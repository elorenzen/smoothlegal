{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { Component, PropTypes, View, Transition } from '../../libs';\n\nvar Switch = function (_Component) {\n  _inherits(Switch, _Component);\n\n  function Switch(props) {\n    _classCallCheck(this, Switch);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      value: props.value,\n      coreWidth: props.width,\n      buttonStyle: {\n        transform: ''\n      }\n    };\n    return _this;\n  }\n\n  Switch.prototype.componentDidMount = function componentDidMount() {\n    if (this.props.width === 0) {\n      this.state.coreWidth = this.hasText() ? 58 : 46;\n    }\n\n    this.updateSwitch();\n  };\n\n  Switch.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {\n    var _this2 = this;\n\n    this.setState({\n      value: props.value\n    }, function () {\n      _this2.updateSwitch();\n    });\n\n    if (props.width) {\n      this.setState({\n        coreWidth: props.width\n      });\n    }\n  };\n\n  Switch.prototype.updateSwitch = function updateSwitch() {\n    this.handleButtonTransform();\n\n    if (this.props.onColor || this.props.offColor) {\n      this.setBackgroundColor();\n    }\n  };\n\n  Switch.prototype.hasText = function hasText() {\n    return this.props.onText || this.props.offText;\n  };\n\n  Switch.prototype.setBackgroundColor = function setBackgroundColor() {\n    var newColor = this.state.value === this.props.onValue ? this.props.onColor : this.props.offColor;\n    this.refs.core.style.borderColor = newColor;\n    this.refs.core.style.backgroundColor = newColor;\n  };\n\n  Switch.prototype.setFocus = function setFocus() {\n    if (this.props.allowFocus) {\n      this.refs.input.focus();\n    }\n  };\n\n  Switch.prototype.handleFocus = function handleFocus(e) {\n    if (this.props.allowFocus) {\n      this.props.onFocus(e);\n    }\n  };\n\n  Switch.prototype.handleBlur = function handleBlur(e) {\n    if (this.props.allowFocus) {\n      this.props.onBlur(e);\n    }\n  };\n\n  Switch.prototype.handleChange = function handleChange(e) {\n    var _this3 = this;\n\n    this.setState({\n      value: e.target.checked ? this.props.onValue : this.props.offValue\n    }, function () {\n      _this3.updateSwitch();\n\n      if (_this3.props.onChange) {\n        _this3.props.onChange(_this3.state.value);\n      }\n    });\n  };\n\n  Switch.prototype.handleButtonTransform = function handleButtonTransform() {\n    var _state = this.state,\n        value = _state.value,\n        coreWidth = _state.coreWidth,\n        buttonStyle = _state.buttonStyle;\n    buttonStyle.transform = value === this.props.onValue ? 'translate(' + (coreWidth - 20) + 'px, 2px)' : 'translate(2px, 2px)';\n    this.setState({\n      buttonStyle: buttonStyle\n    });\n  };\n\n  Switch.prototype.render = function render() {\n    var _props = this.props,\n        name = _props.name,\n        disabled = _props.disabled,\n        onText = _props.onText,\n        offText = _props.offText,\n        onValue = _props.onValue,\n        onIconClass = _props.onIconClass,\n        offIconClass = _props.offIconClass,\n        allowFocus = _props.allowFocus;\n    var _state2 = this.state,\n        value = _state2.value,\n        coreWidth = _state2.coreWidth,\n        buttonStyle = _state2.buttonStyle;\n    return React.createElement('label', {\n      style: this.style(),\n      className: this.className('el-switch', {\n        'is-disabled': disabled,\n        'el-switch--wide': this.hasText(),\n        'is-checked': value === onValue\n      })\n    }, React.createElement(View, {\n      show: disabled\n    }, React.createElement('div', {\n      className: 'el-switch__mask'\n    })), React.createElement('input', {\n      className: this.className('el-switch__input', {\n        'allow-focus': allowFocus\n      }),\n      type: 'checkbox',\n      checked: value === onValue,\n      name: name,\n      ref: 'input',\n      disabled: disabled,\n      onChange: this.handleChange.bind(this),\n      onFocus: this.handleFocus.bind(this),\n      onBlur: this.handleBlur.bind(this)\n    }), React.createElement('span', {\n      className: 'el-switch__core',\n      ref: 'core',\n      style: {\n        'width': coreWidth + 'px'\n      }\n    }, React.createElement('span', {\n      className: 'el-switch__button',\n      style: Object.assign({}, buttonStyle),\n      onClick: this.setFocus.bind(this)\n    })), React.createElement(Transition, {\n      name: 'label-fade'\n    }, React.createElement(View, {\n      show: value === onValue\n    }, React.createElement('div', {\n      className: 'el-switch__label el-switch__label--left',\n      style: {\n        'width': coreWidth + 'px'\n      }\n    }, onIconClass && React.createElement('i', {\n      className: onIconClass\n    }), !onIconClass && onText && React.createElement('span', null, onText)))), React.createElement(Transition, {\n      name: 'label-fade'\n    }, React.createElement(View, {\n      show: value !== onValue\n    }, React.createElement('div', {\n      className: 'el-switch__label el-switch__label--right',\n      style: {\n        'width': coreWidth + 'px'\n      }\n    }, offIconClass && React.createElement('i', {\n      className: offIconClass\n    }), !offIconClass && offText && React.createElement('span', null, offText)))));\n  };\n\n  return Switch;\n}(Component);\n\nexport default Switch;\nSwitch.propTypes = {\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.bool]),\n  disabled: PropTypes.bool,\n  width: PropTypes.number,\n  onIconClass: PropTypes.string,\n  offIconClass: PropTypes.string,\n  onText: PropTypes.string,\n  offText: PropTypes.string,\n  onColor: PropTypes.string,\n  offColor: PropTypes.string,\n  onValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.bool]),\n  offValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.bool]),\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func,\n  allowFocus: PropTypes.bool\n};\nSwitch.defaultProps = {\n  value: true,\n  disabled: false,\n  width: 0,\n  onIconClass: '',\n  offIconClass: '',\n  onText: 'ON',\n  offText: 'OFF',\n  onValue: true,\n  offValue: false,\n  onColor: '',\n  offColor: '',\n  name: '',\n  allowFocus: false\n};","map":null,"metadata":{},"sourceType":"module"}