{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport { throttle } from 'throttle-debounce';\nimport { Component, PropTypes } from '../../libs';\nimport Checkbox from '../checkbox';\nimport FilterPannel from './FilterPannel';\nvar _document = document;\n\nvar TableHeader = function (_Component) {\n  _inherits(TableHeader, _Component);\n\n  function TableHeader(props) {\n    _classCallCheck(this, TableHeader);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    ['handleHeaderClick', 'handleFilterClick', 'handleSortClick'].forEach(function (fn) {\n      _this[fn] = throttle(300, true, _this[fn]);\n    });\n    return _this;\n  }\n\n  TableHeader.prototype.handleMouseMove = function handleMouseMove(column, event) {\n    if (!column.resizable) return;\n    if (column.subColumns && column.subColumns.length) return;\n\n    if (!this.dragging && this.props.border) {\n      var target = event.target;\n\n      while (target && target.tagName !== 'TH') {\n        target = target.parentNode;\n      }\n\n      var rect = target.getBoundingClientRect();\n      var bodyStyle = _document.body.style;\n\n      if (rect.width > 12 && rect.right - event.pageX < 8) {\n        bodyStyle.cursor = 'col-resize';\n        this.draggingColumn = column;\n      } else {\n        bodyStyle.cursor = '';\n        this.draggingColumn = null;\n      }\n    }\n  };\n\n  TableHeader.prototype.handleMouseDown = function handleMouseDown(column, event) {\n    var _this2 = this;\n\n    if (this.draggingColumn) {\n      this.dragging = true;\n      var table = this.context.table;\n      var tableEl = table.el,\n          resizeProxy = table.resizeProxy;\n      var tableLeft = tableEl.getBoundingClientRect().left;\n      var columnEl = event.target;\n\n      while (columnEl && columnEl.tagName !== 'TH') {\n        columnEl = columnEl.parentNode;\n      }\n\n      var columnRect = columnEl.getBoundingClientRect();\n      var minLeft = columnRect.left - tableLeft + 30;\n      columnEl.classList.add('noclick');\n      var startMouseLeft = event.clientX;\n      var startLeft = columnRect.right - tableLeft;\n      var startColumnLeft = columnRect.left - tableLeft;\n      resizeProxy.style.visibility = 'visible';\n      resizeProxy.style.left = startLeft + 'px';\n\n      _document.onselectstart = function () {\n        return false;\n      };\n\n      _document.ondragstart = function () {\n        return false;\n      };\n\n      var handleMouseMove = function handleMouseMove(event) {\n        var deltaLeft = event.clientX - startMouseLeft;\n        var proxyLeft = startLeft + deltaLeft;\n        resizeProxy.style.left = Math.max(minLeft, proxyLeft) + 'px';\n      };\n\n      var handleMouseUp = function handleMouseUp(event) {\n        if (_this2.dragging) {\n          var finalLeft = parseInt(resizeProxy.style.left, 10);\n          var columnWidth = finalLeft - startColumnLeft;\n          var oldWidth = column.realWidth;\n          column.width = column.realWidth = columnWidth;\n          _this2.dragging = false;\n          _this2.draggingColumn = null;\n          _document.body.style.cursor = '';\n          resizeProxy.style.visibility = 'hidden';\n\n          _document.removeEventListener('mousemove', handleMouseMove);\n\n          _document.removeEventListener('mouseup', handleMouseUp);\n\n          _document.onselectstart = null;\n          _document.ondragstart = null;\n          setTimeout(function () {\n            columnEl.classList.remove('noclick');\n          });\n\n          _this2.context.layout.scheduleLayout();\n\n          _this2.dispatchEvent('onHeaderDragEnd', columnWidth, oldWidth, column, event);\n        }\n      };\n\n      _document.addEventListener('mousemove', handleMouseMove);\n\n      _document.addEventListener('mouseup', handleMouseUp);\n    }\n  };\n\n  TableHeader.prototype.handleMouseOut = function handleMouseOut() {\n    _document.body.style.cursor = \"\";\n  };\n\n  TableHeader.prototype.handleHeaderClick = function handleHeaderClick(column, event) {\n    if (column.sortable && !column.filters) {\n      this.handleSortClick(column, null, event);\n    } else if (column.filters && !column.sortable) {\n      this.handleFilterClick(column, event);\n    } else {\n      this.dispatchEvent('onHeaderClick', column, event);\n    }\n  };\n\n  TableHeader.prototype.handleSortClick = function handleSortClick(column, givenOrder, event) {\n    event.stopPropagation();\n    event.nativeEvent.stopImmediatePropagation();\n    var target = event.target;\n\n    while (target && target.tagName !== 'TH') {\n      target = target.parentNode;\n    }\n\n    if (target.classList.contains('noclick')) return;\n    var order = void 0;\n\n    if (givenOrder) {\n      order = givenOrder;\n    } else {\n      var _props$tableStoreStat = this.props.tableStoreState,\n          sortColumn = _props$tableStoreStat.sortColumn,\n          sortOrder = _props$tableStoreStat.sortOrder;\n\n      if (column === sortColumn) {\n        if (!sortOrder) {\n          order = 'ascending';\n        } else {\n          order = sortOrder === 'ascending' ? 'descending' : null;\n        }\n      } else {\n        order = 'ascending';\n      }\n    }\n\n    this.context.tableStore.changeSortCondition(column, order);\n    this.dispatchEvent('onHeaderClick', column, event);\n  };\n\n  TableHeader.prototype.handleFilterClick = function handleFilterClick(column, event) {\n    if (event) {\n      event.stopPropagation();\n      event.nativeEvent.stopImmediatePropagation();\n    }\n\n    this.context.tableStore.toggleFilterOpened(column);\n    event && this.dispatchEvent('onHeaderClick', column, event);\n  };\n\n  TableHeader.prototype.dispatchEvent = function dispatchEvent(name) {\n    var fn = this.props[name];\n\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    fn && fn.apply(undefined, args);\n  };\n\n  TableHeader.prototype.changeFilteredValue = function changeFilteredValue(column, value) {\n    this.context.tableStore.changeFilteredValue(column, value);\n  };\n\n  TableHeader.prototype.isCellHidden = function isCellHidden(index, columns) {\n    var fixed = this.props.fixed;\n\n    if (fixed === true || fixed === 'left') {\n      return index >= this.leftFixedCount;\n    } else if (fixed === 'right') {\n      var before = 0;\n\n      for (var i = 0; i < index; i++) {\n        before += columns[i].colSpan;\n      }\n\n      return before < this.columnsCount - this.rightFixedCount;\n    } else {\n      return index < this.leftFixedCount || index >= this.columnsCount - this.rightFixedCount;\n    }\n  };\n\n  TableHeader.prototype.renderHeader = function renderHeader(column) {\n    var type = column.type;\n\n    if (type === 'expand') {\n      return column.label || '';\n    }\n\n    if (type === 'index') {\n      return column.label || '#';\n    }\n\n    if (type === 'selection') {\n      return React.createElement(Checkbox, {\n        checked: this.context.tableStore.isAllSelected,\n        onChange: this.context.tableStore.toggleAllSelection\n      });\n    }\n\n    return column.renderHeader ? column.renderHeader(column) : column.label;\n  };\n\n  TableHeader.prototype.render = function render() {\n    var _this3 = this;\n\n    var _props = this.props,\n        tableStoreState = _props.tableStoreState,\n        layout = _props.layout,\n        fixed = _props.fixed;\n    return React.createElement('table', {\n      className: 'el-table__header',\n      cellPadding: 0,\n      cellSpacing: 0,\n      style: this.style({\n        borderSpacing: 0,\n        border: 0\n      })\n    }, React.createElement('colgroup', null, tableStoreState.columns.map(function (column, index) {\n      return React.createElement('col', {\n        width: column.realWidth,\n        style: {\n          width: column.realWidth\n        },\n        key: index\n      });\n    }), !fixed && React.createElement('col', {\n      width: layout.scrollY ? layout.gutterWidth : 0,\n      style: {\n        width: layout.scrollY ? layout.gutterWidth : 0\n      }\n    })), React.createElement('thead', null, tableStoreState.columnRows.map(function (columns, rowIndex) {\n      return React.createElement('tr', {\n        key: rowIndex\n      }, columns.map(function (column, cellIndex) {\n        return React.createElement('th', {\n          colSpan: column.colSpan,\n          rowSpan: column.rowSpan,\n          className: _this3.className(tableStoreState.sortColumn === column && tableStoreState.sortOrder, column.headerAlign, column.className, column.labelClassName, column.columnKey, {\n            'is-hidden': rowIndex === 0 && _this3.isCellHidden(cellIndex, columns),\n            'is-leaf': !column.subColumns,\n            'is-sortable': column.sortable\n          }),\n          onMouseMove: _this3.handleMouseMove.bind(_this3, column),\n          onMouseDown: _this3.handleMouseDown.bind(_this3, column),\n          onMouseOut: _this3.handleMouseOut,\n          onClick: _this3.handleHeaderClick.bind(_this3, column),\n          key: cellIndex\n        }, React.createElement('div', {\n          className: 'cell'\n        }, _this3.renderHeader(column), column.sortable && React.createElement('span', {\n          className: 'caret-wrapper',\n          onClick: _this3.handleSortClick.bind(_this3, column, null)\n        }, React.createElement('i', {\n          className: 'sort-caret ascending',\n          onClick: _this3.handleSortClick.bind(_this3, column, 'ascending')\n        }), React.createElement('i', {\n          className: 'sort-caret descending',\n          onClick: _this3.handleSortClick.bind(_this3, column, 'descending')\n        })), column.filterable && React.createElement(FilterPannel, {\n          visible: column.filterOpened,\n          multiple: column.filterMultiple,\n          filters: column.filters,\n          filteredValue: column.filteredValue,\n          placement: column.filterPlacement,\n          onFilterChange: _this3.changeFilteredValue.bind(_this3, column),\n          toggleFilter: _this3.handleFilterClick.bind(_this3, column)\n        }, React.createElement('span', {\n          className: 'el-table__column-filter-trigger',\n          onClick: _this3.handleFilterClick.bind(_this3, column)\n        }, React.createElement('i', {\n          className: _this3.classNames('el-icon-arrow-down', {\n            'el-icon-arrow-up': column.filterOpened\n          })\n        })))));\n      }), !fixed && React.createElement('th', {\n        className: 'gutter',\n        style: {\n          width: layout.scrollY ? layout.gutterWidth : 0\n        }\n      }));\n    })));\n  };\n\n  _createClass(TableHeader, [{\n    key: 'columnsCount',\n    get: function get() {\n      return this.props.tableStoreState.columns.length;\n    }\n  }, {\n    key: 'leftFixedCount',\n    get: function get() {\n      return this.props.tableStoreState.fixedColumns.length;\n    }\n  }, {\n    key: 'rightFixedCount',\n    get: function get() {\n      return this.props.tableStoreState.rightFixedColumns.length;\n    }\n  }]);\n\n  return TableHeader;\n}(Component);\n\nTableHeader.contextTypes = {\n  tableStore: PropTypes.any,\n  layout: PropTypes.any,\n  table: PropTypes.any\n};\nexport default TableHeader;","map":null,"metadata":{},"sourceType":"module"}