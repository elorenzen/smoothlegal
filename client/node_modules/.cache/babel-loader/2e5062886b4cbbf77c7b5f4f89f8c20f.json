{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { Component, PropTypes, View } from '../../libs';\n\nvar Tabs = function (_Component) {\n  _inherits(Tabs, _Component);\n\n  function Tabs(props) {\n    _classCallCheck(this, Tabs);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    var children = props.children,\n        activeName = props.activeName,\n        value = props.value;\n    children = React.Children.toArray(children);\n    _this.state = {\n      children: children,\n      currentName: value || activeName || children[0].props.name,\n      barStyle: {},\n      navStyle: {\n        transform: ''\n      },\n      scrollable: false,\n      scrollNext: false,\n      scrollPrev: false\n    };\n    return _this;\n  }\n\n  Tabs.prototype.componentDidMount = function componentDidMount() {\n    this.calcBarStyle(true);\n    this.update();\n  };\n\n  Tabs.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    if (prevState.scrollable !== this.state.scrollable) {\n      this.scrollToActiveTab();\n    }\n  };\n\n  Tabs.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var _this2 = this;\n\n    if (nextProps.activeName !== this.props.activeName) {\n      this.setState({\n        currentName: nextProps.activeName\n      }, function () {\n        return _this2.calcBarStyle();\n      });\n    }\n\n    if (nextProps.value !== this.props.value) {\n      this.setState({\n        currentName: nextProps.value\n      }, function () {\n        return _this2.calcBarStyle();\n      });\n    }\n\n    if (nextProps.children !== this.props.children) {\n      this.setState({\n        children: React.Children.toArray(nextProps.children)\n      }, function () {\n        _this2.update();\n\n        _this2.calcBarStyle();\n      });\n    }\n  };\n\n  Tabs.prototype.handleTabAdd = function handleTabAdd() {\n    var _props = this.props,\n        onTabAdd = _props.onTabAdd,\n        onTabEdit = _props.onTabEdit;\n    onTabEdit && onTabEdit('add');\n    onTabAdd && onTabAdd();\n  };\n\n  Tabs.prototype.handleTabRemove = function handleTabRemove(tab, index, e) {\n    var _state = this.state,\n        children = _state.children,\n        currentName = _state.currentName;\n    var _props2 = this.props,\n        onTabRemove = _props2.onTabRemove,\n        onTabEdit = _props2.onTabEdit;\n    e.stopPropagation();\n\n    if (children[index].props.name === currentName) {\n      var nextChild = children[index + 1];\n      var prevChild = children[index - 1];\n      this.setState({\n        currentName: nextChild ? nextChild.props.name : prevChild ? prevChild.props.name : '-1'\n      });\n    }\n\n    children.splice(index, 1);\n    this.setState({\n      children: children\n    }, function () {\n      onTabEdit && onTabEdit('remove', tab);\n      onTabRemove && onTabRemove(tab, e);\n    });\n  };\n\n  Tabs.prototype.handleTabClick = function handleTabClick(tab, e) {\n    var _this3 = this;\n\n    if (tab.props.disabled) {\n      return false;\n    }\n\n    this.setState({\n      currentName: tab.props.name\n    }, function () {\n      var onTabClick = _this3.props.onTabClick;\n\n      _this3.calcBarStyle();\n\n      _this3.scrollToActiveTab();\n\n      onTabClick && onTabClick(tab, e);\n    });\n  };\n\n  Tabs.prototype.calcBarStyle = function calcBarStyle(firstRendering) {\n    var _this4 = this;\n\n    if (this.props.type || !this.tabs.length) return {};\n    var style = {};\n    var offset = 0;\n    var tabWidth = 0;\n    var children = this.state.children instanceof Array ? this.state.children : [this.state.children];\n    children.every(function (item, index) {\n      var $el = _this4.tabs[index];\n\n      if (item.props.name !== _this4.state.currentName) {\n        offset += $el.clientWidth;\n        return true;\n      } else {\n        tabWidth = $el.clientWidth;\n        return false;\n      }\n    });\n    style.width = tabWidth + 'px';\n    style.transform = 'translateX(' + offset + 'px)';\n\n    if (!firstRendering) {\n      style.transition = 'transform .3s cubic-bezier(.645,.045,.355,1), -webkit-transform .3s cubic-bezier(.645,.045,.355,1)';\n    }\n\n    this.setState({\n      barStyle: style\n    });\n  };\n\n  Tabs.prototype.scrollPrev = function scrollPrev() {\n    var containerWidth = this.refs.navScroll.offsetWidth;\n    var currentOffset = this.getCurrentScrollOffset();\n    if (!currentOffset) return;\n    var newOffset = currentOffset > containerWidth ? currentOffset - containerWidth : 0;\n    this.setOffset(newOffset);\n  };\n\n  Tabs.prototype.scrollNext = function scrollNext() {\n    var navWidth = this.refs.nav.offsetWidth;\n    var containerWidth = this.refs.navScroll.offsetWidth;\n    var currentOffset = this.getCurrentScrollOffset();\n    if (navWidth - currentOffset <= containerWidth) return;\n    var newOffset = navWidth - currentOffset > containerWidth * 2 ? currentOffset + containerWidth : navWidth - containerWidth;\n    this.setOffset(newOffset);\n  };\n\n  Tabs.prototype.scrollToActiveTab = function scrollToActiveTab() {\n    if (!this.state.scrollable) return;\n    var nav = this.refs.nav;\n    var activeTab = nav.querySelector('.is-active');\n    var navScroll = this.refs.navScroll;\n    var activeTabBounding = activeTab.getBoundingClientRect();\n    var navScrollBounding = navScroll.getBoundingClientRect();\n    var navBounding = nav.getBoundingClientRect();\n    var currentOffset = this.getCurrentScrollOffset();\n    var newOffset = currentOffset;\n\n    if (activeTabBounding.left < navScrollBounding.left) {\n      newOffset = currentOffset - (navScrollBounding.left - activeTabBounding.left);\n    }\n\n    if (activeTabBounding.right > navScrollBounding.right) {\n      newOffset = currentOffset + activeTabBounding.right - navScrollBounding.right;\n    }\n\n    if (navBounding.right < navScrollBounding.right) {\n      newOffset = nav.offsetWidth - navScrollBounding.width;\n    }\n\n    this.setOffset(Math.max(newOffset, 0));\n  };\n\n  Tabs.prototype.getCurrentScrollOffset = function getCurrentScrollOffset() {\n    var navStyle = this.state.navStyle;\n    return navStyle.transform ? Number(navStyle.transform.match(/translateX\\(-(\\d+(\\.\\d+)*)px\\)/)[1]) : 0;\n  };\n\n  Tabs.prototype.setOffset = function setOffset(value) {\n    this.setState({\n      navStyle: {\n        transform: 'translateX(-' + value + 'px)'\n      }\n    });\n  };\n\n  Tabs.prototype.update = function update() {\n    var navWidth = this.refs.nav.offsetWidth;\n    var containerWidth = this.refs.navScroll.offsetWidth;\n    var currentOffset = this.getCurrentScrollOffset();\n\n    if (containerWidth < navWidth) {\n      var _currentOffset = this.getCurrentScrollOffset();\n\n      this.setState({\n        scrollable: true,\n        scrollablePrev: _currentOffset,\n        scrollableNext: _currentOffset + containerWidth < navWidth\n      });\n\n      if (navWidth - _currentOffset < containerWidth) {\n        this.setOffset(navWidth - containerWidth);\n      }\n    } else {\n      this.setState({\n        scrollable: false\n      });\n\n      if (currentOffset > 0) {\n        this.setOffset(0);\n      }\n    }\n  };\n\n  Tabs.prototype.render = function render() {\n    var _this5 = this;\n\n    var _state2 = this.state,\n        children = _state2.children,\n        currentName = _state2.currentName,\n        barStyle = _state2.barStyle,\n        navStyle = _state2.navStyle,\n        scrollable = _state2.scrollable,\n        scrollNext = _state2.scrollNext,\n        scrollPrev = _state2.scrollPrev;\n    var _props3 = this.props,\n        type = _props3.type,\n        addable = _props3.addable,\n        closable = _props3.closable,\n        editable = _props3.editable;\n    var tabsCls = this.classNames({\n      'el-tabs': true,\n      'el-tabs--card': type === 'card',\n      'el-tabs--border-card': type === 'border-card'\n    });\n    var addButton = editable || addable ? React.createElement('span', {\n      className: 'el-tabs__new-tab',\n      onClick: function onClick() {\n        return _this5.handleTabAdd();\n      }\n    }, React.createElement('i', {\n      className: 'el-icon-plus'\n    })) : null;\n    var scrollBtn = scrollable ? [React.createElement('span', {\n      key: 'el-tabs__nav-prev',\n      className: scrollPrev ? 'el-tabs__nav-prev' : 'el-tabs__nav-prev is-disabled',\n      onClick: function onClick() {\n        return _this5.scrollPrev();\n      }\n    }, React.createElement('i', {\n      className: 'el-icon-arrow-left'\n    })), React.createElement('span', {\n      key: 'el-tabs__nav-next',\n      className: scrollNext ? 'el-tabs__nav-next' : 'el-tabs__nav-next is-disabled',\n      onClick: function onClick() {\n        return _this5.scrollNext();\n      }\n    }, React.createElement('i', {\n      className: 'el-icon-arrow-right'\n    }))] : null;\n    this.tabs = [];\n    return React.createElement('div', {\n      style: this.style(),\n      className: this.className(tabsCls)\n    }, React.createElement('div', {\n      className: 'el-tabs__header'\n    }, addButton, React.createElement('div', {\n      className: scrollable ? 'el-tabs__nav-wrap is-scrollable' : 'el-tabs__nav-wrap'\n    }, scrollBtn, React.createElement('div', {\n      className: 'el-tabs__nav-scroll',\n      ref: 'navScroll'\n    }, React.createElement('div', {\n      className: 'el-tabs__nav',\n      ref: 'nav',\n      style: navStyle\n    }, React.Children.map(children, function (item, index) {\n      var _item$props = item.props,\n          name = _item$props.name,\n          label = _item$props.label,\n          disabled = _item$props.disabled;\n\n      var tabCls = _this5.classNames({\n        'el-tabs__item': true,\n        'is-active': name === currentName,\n        'is-disabled': disabled,\n        'is-closable': closable || item.props.closable\n      });\n\n      return React.createElement('div', {\n        key: 'el-tabs__item-' + index,\n        ref: function ref(tab) {\n          return tab && _this5.tabs.push(tab);\n        },\n        name: name,\n        className: tabCls,\n        onClick: function onClick(e) {\n          return _this5.handleTabClick(item, e);\n        }\n      }, label, React.createElement(View, {\n        show: editable || closable || item.props.closable\n      }, React.createElement('span', {\n        className: 'el-icon-close',\n        onClick: function onClick(e) {\n          return _this5.handleTabRemove(item, index, e);\n        }\n      })));\n    }), React.createElement(View, {\n      show: !type\n    }, React.createElement('div', {\n      className: 'el-tabs__active-bar',\n      style: barStyle\n    })))))), React.createElement('div', {\n      className: 'el-tabs__content'\n    }, React.Children.map(children, function (item) {\n      var name = item.props.name; // let transitionName = '';\n      //\n      // if (name === currentName) {\n      //   transitionName = 'slideInRight';\n      // }\n\n      return React.createElement(View, {\n        show: name === currentName\n      }, item);\n    })));\n  };\n\n  return Tabs;\n}(Component);\n\nexport default Tabs;\nTabs.propTypes = {\n  type: PropTypes.oneOf(['card', 'border-card']),\n  activeName: PropTypes.string,\n  value: PropTypes.string,\n  closable: PropTypes.bool,\n  addable: PropTypes.bool,\n  editable: PropTypes.bool,\n  onTabClick: PropTypes.func,\n  onTabRemove: PropTypes.func,\n  onTabAdd: PropTypes.func,\n  onTabEdit: PropTypes.func\n};\nTabs.defaultProps = {\n  closable: false,\n  addable: false,\n  edidable: false\n};","map":null,"metadata":{},"sourceType":"module"}