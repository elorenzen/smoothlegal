{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { Component, PropTypes } from '../../libs';\n\nvar Menu = function (_Component) {\n  _inherits(Menu, _Component);\n\n  function Menu(props) {\n    _classCallCheck(this, Menu);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.instanceType = 'Menu';\n    _this.state = {\n      activeIndex: props.defaultActive,\n      openedMenus: props.defaultOpeneds ? props.defaultOpeneds.slice(0) : [],\n      menuItems: {},\n      submenus: {}\n    };\n    return _this;\n  }\n\n  Menu.prototype.getChildContext = function getChildContext() {\n    return {\n      component: this\n    };\n  };\n\n  Menu.prototype.componentDidMount = function componentDidMount() {\n    this.openActiveItemMenus();\n  };\n\n  Menu.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {\n    if (props.defaultActive != this.props.defaultActive || props.defaultActive != this.state.activeIndex) {\n      this.defaultActiveChanged(props.defaultActive);\n    }\n\n    if (props.defaultOpeneds != this.props.defaultOpeneds) {\n      this.defaultOpenedsChanged(props.defaultOpeneds);\n    }\n  };\n\n  Menu.prototype.openMenu = function openMenu(index, indexPath) {\n    var openedMenus = this.state.openedMenus;\n    if (openedMenus.indexOf(index) !== -1) return; // 将不在该菜单路径下的其余菜单收起\n\n    if (this.props.uniqueOpened) {\n      openedMenus = openedMenus.filter(function (index) {\n        return indexPath.indexOf(index) !== -1;\n      });\n    }\n\n    openedMenus.push(index);\n    this.setState({\n      openedMenus: openedMenus\n    });\n  };\n\n  Menu.prototype.closeMenu = function closeMenu(index) {\n    var openedMenus = this.state.openedMenus;\n    openedMenus.splice(openedMenus.indexOf(index), 1);\n    this.setState({\n      openedMenus: openedMenus\n    });\n  };\n\n  Menu.prototype.handleSubmenuClick = function handleSubmenuClick(index, indexPath) {\n    var isOpened = this.state.openedMenus.indexOf(index) !== -1;\n\n    if (isOpened) {\n      this.closeMenu(index);\n\n      if (this.props.onClose) {\n        this.props.onClose(index, indexPath);\n      }\n    } else {\n      this.openMenu(index, indexPath);\n\n      if (this.props.onOpen) {\n        this.props.onOpen(index, indexPath);\n      }\n    }\n  };\n\n  Menu.prototype.handleSelect = function handleSelect(index, indexPath, instance) {\n    var _this2 = this;\n\n    var _state = this.state,\n        activeIndex = _state.activeIndex,\n        openedMenus = _state.openedMenus,\n        submenus = _state.submenus;\n    activeIndex = index;\n\n    if (this.props.onSelect) {\n      this.props.onSelect(index, indexPath, instance);\n    }\n\n    if (this.props.mode === 'horizontal') {\n      for (var key in submenus) {\n        submenus[key].onItemSelect(index, indexPath);\n      }\n\n      openedMenus = [];\n    }\n\n    this.setState({\n      activeIndex: activeIndex,\n      openedMenus: openedMenus\n    }, function () {\n      if (_this2.props.mode === 'vertical') {\n        _this2.openActiveItemMenus();\n      }\n    });\n  };\n\n  Menu.prototype.openActiveItemMenus = function openActiveItemMenus() {\n    var _this3 = this;\n\n    var _state2 = this.state,\n        activeIndex = _state2.activeIndex,\n        menuItems = _state2.menuItems,\n        submenus = _state2.submenus;\n    if (!menuItems[activeIndex]) return;\n\n    if (activeIndex && this.props.mode === 'vertical') {\n      var indexPath = menuItems[activeIndex].indexPath(); // 展开该菜单项的路径上所有子菜单\n\n      indexPath.forEach(function (index) {\n        var submenu = submenus[index];\n        submenu && _this3.openMenu(index, submenu.indexPath());\n      });\n    }\n  };\n\n  Menu.prototype.defaultActiveChanged = function defaultActiveChanged(value) {\n    var _this4 = this;\n\n    var menuItems = this.state.menuItems;\n    this.setState({\n      activeIndex: value\n    }, function () {\n      if (!menuItems[value]) return;\n      var menuItem = menuItems[value];\n      var indexPath = menuItem.indexPath();\n\n      _this4.handleSelect(value, indexPath, menuItem);\n    });\n  };\n\n  Menu.prototype.defaultOpenedsChanged = function defaultOpenedsChanged(value) {\n    this.setState({\n      openedMenus: value\n    });\n  };\n\n  Menu.prototype.render = function render() {\n    return React.createElement('ul', {\n      style: this.style(),\n      className: this.className(\"el-menu\", {\n        'el-menu--horizontal': this.props.mode === 'horizontal',\n        'el-menu--dark': this.props.theme === 'dark'\n      })\n    }, this.props.children);\n  };\n\n  return Menu;\n}(Component);\n\nexport default Menu;\nMenu.childContextTypes = {\n  component: PropTypes.any\n};\nMenu.propTypes = {\n  mode: PropTypes.string,\n  defaultActive: PropTypes.string,\n  defaultOpeneds: PropTypes.arrayOf(PropTypes.any),\n  theme: PropTypes.string,\n  uniqueOpened: PropTypes.bool,\n  menuTrigger: PropTypes.string,\n  onSelect: PropTypes.func,\n  onOpen: PropTypes.func,\n  onClose: PropTypes.func\n};\nMenu.defaultProps = {\n  mode: 'vertical',\n  theme: 'light',\n  menuTrigger: 'hover'\n};","map":null,"metadata":{},"sourceType":"module"}