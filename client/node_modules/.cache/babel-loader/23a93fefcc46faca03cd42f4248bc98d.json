{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport { throttle } from 'throttle-debounce';\nimport { Component, PropTypes } from '../../libs';\nimport { addResizeListener, removeResizeListener } from '../../libs/utils/resize-event';\nimport Table from './Table';\nimport { getScrollBarWidth, getValueByPath } from \"./utils\";\n\nvar TableLayout = function (_Component) {\n  _inherits(TableLayout, _Component);\n\n  function TableLayout(props) {\n    _classCallCheck(this, TableLayout);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      height: props.height || props.maxHeight || null,\n      // Table's height or maxHeight prop\n      gutterWidth: getScrollBarWidth(),\n      // scrollBar width\n      tableHeight: null,\n      // Table's real height\n      headerHeight: null,\n      // header's height of Table\n      bodyHeight: null,\n      // body's height of Table\n      footerHeight: null,\n      // footer's height of Table\n      fixedBodyHeight: null,\n      // fixed body's height of Table\n      viewportHeight: null,\n      // Table's real height without y scroll bar height\n      scrollX: null,\n      // has x scroll bar\n      scrollY: null // has y scroll bar\n\n    };\n    _this.resizeListener = throttle(50, function () {\n      _this.scheduleLayout();\n    });\n    return _this;\n  }\n\n  TableLayout.prototype.componentDidMount = function componentDidMount() {\n    this.el = this.table.el;\n    this.scheduleLayout();\n    addResizeListener(this.el, this.resizeListener);\n  };\n\n  TableLayout.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var preHeight = this.props.height || this.props.maxHeight;\n    var nextHeight = nextProps.height || nextProps.maxHeight;\n\n    if (preHeight !== nextHeight) {\n      this.setState({\n        height: nextHeight\n      });\n    }\n  };\n\n  TableLayout.prototype.componentDidUpdate = function componentDidUpdate(preProps) {\n    var _this2 = this;\n\n    if (this.isPropChanged('columns', preProps) || this.isPropChanged('style', preProps) || this.isPropChanged('className', preProps)) {\n      this.scheduleLayout();\n      return;\n    }\n\n    var shouldUpdateHeight = ['height', 'maxHeight', 'data', 'store.expandingRows', 'expandRowKeys', 'showSummary', 'summaryMethod', 'sumText'].some(function (key) {\n      return _this2.isPropChanged(key, preProps);\n    });\n\n    if (shouldUpdateHeight) {\n      this.updateHeight();\n      this.updateScrollY();\n    }\n  };\n\n  TableLayout.prototype.componentWillUnmount = function componentWillUnmount() {\n    removeResizeListener(this.el, this.resizeListener);\n  };\n\n  TableLayout.prototype.isPropChanged = function isPropChanged(key, preProps) {\n    var prop = getValueByPath(this.props, key);\n    var preProp = getValueByPath(preProps, key);\n    return prop !== preProp;\n  };\n\n  TableLayout.prototype.getChildContext = function getChildContext() {\n    return {\n      layout: this\n    };\n  };\n\n  TableLayout.prototype.scheduleLayout = function scheduleLayout() {\n    var _this3 = this;\n\n    this.setState(this.caculateWidth(), function () {\n      _this3.updateHeight();\n\n      _this3.updateScrollY();\n    });\n  }; // horizontal direction layout\n\n\n  TableLayout.prototype.caculateWidth = function caculateWidth() {\n    var _props = this.props,\n        _props$tableStoreStat = _props.tableStoreState,\n        columns = _props$tableStoreStat.columns,\n        fixedColumns = _props$tableStoreStat.fixedColumns,\n        rightFixedColumns = _props$tableStoreStat.rightFixedColumns,\n        fit = _props.fit;\n    var gutterWidth = this.state.gutterWidth;\n    var bodyMinWidth = columns.reduce(function (pre, col) {\n      return pre + (col.width || col.minWidth);\n    }, 0);\n    var bodyWidth = this.table.el.clientWidth;\n    var scrollX = void 0;\n    var fixedWidth = void 0;\n    var rightFixedWidth = void 0; // mutate props (TableStore's state[columns])\n\n    var flexColumns = columns.filter(function (column) {\n      return typeof column.width !== 'number';\n    });\n\n    if (flexColumns.length && fit) {\n      if (bodyMinWidth < bodyWidth - gutterWidth) {\n        // no scroll bar\n        scrollX = false;\n        var totalFlexWidth = bodyWidth - gutterWidth - bodyMinWidth;\n\n        if (flexColumns.length === 1) {\n          flexColumns[0].realWidth = flexColumns[0].minWidth + totalFlexWidth;\n        } else {\n          var allColumnsWidth = flexColumns.reduce(function (pre, col) {\n            return pre + col.minWidth;\n          }, 0);\n          var flexWidthPerPixel = totalFlexWidth / allColumnsWidth;\n          var widthWithoutFirst = 0;\n          flexColumns.forEach(function (column, index) {\n            if (index === 0) return;\n            var flexWidth = Math.floor(column.minWidth * flexWidthPerPixel);\n            widthWithoutFirst += flexWidth;\n            column.realWidth = column.minWidth + flexWidth;\n          });\n          flexColumns[0].realWidth = flexColumns[0].minWidth + totalFlexWidth - widthWithoutFirst;\n        }\n      } else {\n        // have horizontal scroll bar\n        scrollX = true;\n        flexColumns.forEach(function (column) {\n          column.realWidth = column.minWidth;\n        });\n      }\n\n      bodyWidth = Math.max(bodyMinWidth, bodyWidth);\n    } else {\n      scrollX = bodyMinWidth > bodyWidth;\n      bodyWidth = bodyMinWidth;\n    }\n\n    if (fixedColumns.length) {\n      fixedWidth = fixedColumns.reduce(function (pre, col) {\n        return pre + col.realWidth;\n      }, 0);\n    }\n\n    if (rightFixedColumns.length) {\n      rightFixedWidth = rightFixedColumns.reduce(function (pre, col) {\n        return pre + col.realWidth;\n      }, 0);\n    }\n\n    return {\n      scrollX: scrollX,\n      bodyWidth: bodyWidth,\n      fixedWidth: fixedWidth,\n      rightFixedWidth: rightFixedWidth\n    };\n  }; // vertical direction layout\n\n\n  TableLayout.prototype.updateHeight = function updateHeight() {\n    var _this4 = this;\n\n    this.setState(function (state) {\n      var data = _this4.props.data;\n      var scrollX = state.scrollX,\n          gutterWidth = state.gutterWidth;\n      var noData = !data || !data.length;\n      var _table = _this4.table,\n          headerWrapper = _table.headerWrapper,\n          footerWrapper = _table.footerWrapper;\n      var tableHeight = _this4.el.clientHeight;\n      var headerHeight = headerWrapper ? headerWrapper.offsetHeight : 0;\n      var footerHeight = footerWrapper ? footerWrapper.offsetHeight : 0;\n      var bodyHeight = tableHeight - headerHeight - footerHeight + (footerWrapper ? 1 : 0);\n      var fixedBodyHeight = bodyHeight - (scrollX ? gutterWidth : 0);\n      var viewportHeight = tableHeight - (scrollX && !noData ? gutterWidth : 0);\n      return {\n        tableHeight: tableHeight,\n        headerHeight: headerHeight,\n        bodyHeight: bodyHeight,\n        footerHeight: footerHeight,\n        fixedBodyHeight: fixedBodyHeight,\n        viewportHeight: viewportHeight // no useful\n\n      };\n    });\n  }; // judge if has scroll-Y bar\n\n\n  TableLayout.prototype.updateScrollY = function updateScrollY() {\n    var _this5 = this;\n\n    this.setState(function (state) {\n      var bodyWrapper = _this5.table.bodyWrapper;\n      var fixedBodyHeight = state.fixedBodyHeight;\n      var body = bodyWrapper.querySelector('.el-table__body');\n      var scrollY = body.offsetHeight > fixedBodyHeight;\n      return {\n        scrollY: scrollY\n      };\n    });\n  };\n\n  TableLayout.prototype.render = function render() {\n    var _this6 = this;\n\n    return React.createElement(Table, _extends({\n      ref: function ref(table) {\n        _this6.table = table;\n      }\n    }, this.props, {\n      layout: this.state\n    }));\n  };\n\n  return TableLayout;\n}(Component);\n\nTableLayout.childContextTypes = {\n  layout: PropTypes.any\n};\nexport default TableLayout;","map":null,"metadata":{},"sourceType":"module"}