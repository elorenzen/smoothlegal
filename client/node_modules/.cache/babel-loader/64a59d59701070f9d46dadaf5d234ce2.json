{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport PropTypes from 'prop-types';\nimport { Component } from 'react';\nimport { require_condition } from '../utils';\nvar windowKey = Symbol.for(\"er_register_map\");\nvar registerMap = window[windowKey] = window[windowKey] || {\n  ids: {}\n};\n\nvar not_null = function not_null(t) {\n  return t != null;\n};\n\nvar hasRegistered = function hasRegistered(_ref) {\n  var id = _ref.id;\n  return not_null(registerMap.ids[id]);\n};\n\nvar cleanRegister = function cleanRegister(props) {\n  var target = props.target,\n      eventName = props.eventName,\n      func = props.func,\n      isUseCapture = props.isUseCapture,\n      id = props.id;\n\n  if (hasRegistered(props)) {\n    target.removeEventListener(eventName, func, isUseCapture);\n    delete registerMap.ids[id];\n  }\n};\n\nvar doRegister = function doRegister(props) {\n  var id = props.id,\n      eventName = props.eventName,\n      func = props.func,\n      isUseCapture = props.isUseCapture;\n  registerMap.ids[id] = id;\n  document.addEventListener(eventName, func, isUseCapture);\n};\n/**\n * register events that hooked up react lifecycle\n */\n\n\nvar EventRegister = function (_Component) {\n  _inherits(EventRegister, _Component);\n\n  function EventRegister() {\n    _classCallCheck(this, EventRegister);\n\n    return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  EventRegister.prototype.componentDidMount = function componentDidMount() {\n    var _props = this.props,\n        eventName = _props.eventName,\n        id = _props.id;\n    eventName = eventName.toLowerCase();\n    eventName = /^on/.test(eventName) ? eventName.substring(2) : eventName;\n    this.cached = Object.assign({}, this.props, {\n      eventName: eventName\n    });\n    require_condition(typeof id === 'string', 'id prop is required');\n    require_condition(!hasRegistered(this.cached), 'id: ' + id + ' has been registered');\n    doRegister(this.cached);\n  };\n\n  EventRegister.prototype.componentWillUnmount = function componentWillUnmount() {\n    cleanRegister(this.cached);\n  };\n\n  EventRegister.prototype.render = function render() {\n    return null;\n  };\n\n  return EventRegister;\n}(Component);\n\nexport default EventRegister;\nEventRegister.propTypes = {\n  id: PropTypes.string.isRequired,\n  target: PropTypes.object.isRequired,\n  eventName: PropTypes.string.isRequired,\n  func: PropTypes.func.isRequired,\n  isUseCapture: PropTypes.bool\n};","map":null,"metadata":{},"sourceType":"module"}