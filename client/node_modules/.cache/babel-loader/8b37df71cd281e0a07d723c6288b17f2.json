{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { Component, PropTypes } from '../../libs';\nimport Tooltip from '../tooltip';\n\nvar SliderButton = function (_Component) {\n  _inherits(SliderButton, _Component);\n\n  function SliderButton(props) {\n    _classCallCheck(this, SliderButton);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      hovering: false,\n      dragging: false,\n      startX: 0,\n      startY: 0,\n      currentX: 0,\n      currentY: 0,\n      startPosition: 0,\n      newPosition: 0\n    };\n    return _this;\n  }\n\n  SliderButton.prototype.parent = function parent() {\n    return this.context.component;\n  };\n\n  SliderButton.prototype.handleMouseEnter = function handleMouseEnter() {\n    this.setState({\n      hovering: true\n    });\n  };\n\n  SliderButton.prototype.handleMouseLeave = function handleMouseLeave() {\n    this.setState({\n      hovering: false\n    });\n  };\n\n  SliderButton.prototype.onButtonDown = function onButtonDown(event) {\n    if (this.disabled()) return;\n    this.onDragStart(event);\n    window.addEventListener('mousemove', this.onDragging.bind(this));\n    window.addEventListener('mouseup', this.onDragEnd.bind(this));\n    window.addEventListener('contextmenu', this.onDragEnd.bind(this));\n  };\n\n  SliderButton.prototype.onDragStart = function onDragStart(event) {\n    this.setState({\n      dragging: true,\n      startX: event.clientX,\n      startY: event.clientY,\n      startPosition: parseInt(this.currentPosition(), 10)\n    });\n  };\n\n  SliderButton.prototype.onDragging = function onDragging(event) {\n    var _this2 = this;\n\n    var _state = this.state,\n        dragging = _state.dragging,\n        startY = _state.startY,\n        currentY = _state.currentY,\n        currentX = _state.currentX,\n        startX = _state.startX,\n        startPosition = _state.startPosition,\n        newPosition = _state.newPosition;\n    var vertical = this.props.vertical;\n\n    if (dragging) {\n      this.setState({\n        currentX: event.clientX,\n        currentY: event.clientY\n      }, function () {\n        var diff = void 0;\n\n        if (vertical) {\n          diff = (startY - currentY) / _this2.parent().sliderSize() * 100;\n        } else {\n          diff = (currentX - startX) / _this2.parent().sliderSize() * 100;\n        }\n\n        _this2.state.newPosition = startPosition + diff;\n\n        _this2.setPosition(newPosition);\n      });\n    }\n  };\n\n  SliderButton.prototype.onDragEnd = function onDragEnd() {\n    var _this3 = this;\n\n    var _state2 = this.state,\n        dragging = _state2.dragging,\n        newPosition = _state2.newPosition;\n\n    if (dragging) {\n      /*\n       * 防止在 mouseup 后立即触发 click，导致滑块有几率产生一小段位移\n       * 不使用 preventDefault 是因为 mouseup 和 click 没有注册在同一个 DOM 上\n       */\n      setTimeout(function () {\n        _this3.setState({\n          dragging: false\n        }, function () {\n          _this3.setPosition(newPosition);\n        });\n      }, 0);\n      window.removeEventListener('mousemove', this.onDragging.bind(this));\n      window.removeEventListener('mouseup', this.onDragEnd.bind(this));\n      window.removeEventListener('contextmenu', this.onDragEnd.bind(this));\n    }\n  };\n\n  SliderButton.prototype.setPosition = function setPosition(newPosition) {\n    if (newPosition < 0) {\n      newPosition = 0;\n    } else if (newPosition > 100) {\n      newPosition = 100;\n    }\n\n    var lengthPerStep = 100 / ((this.max() - this.min()) / this.step());\n    var steps = Math.round(newPosition / lengthPerStep);\n    var value = steps * lengthPerStep * (this.max() - this.min()) * 0.01 + this.min();\n    this.props.onChange(parseFloat(value.toFixed(this.precision())));\n  };\n  /* Computed Methods */\n\n\n  SliderButton.prototype.formatValue = function formatValue() {\n    var formatTooltip = this.parent().props.formatTooltip;\n\n    if (formatTooltip instanceof Function) {\n      return formatTooltip(this.props.value);\n    }\n\n    return this.props.value;\n  };\n\n  SliderButton.prototype.disabled = function disabled() {\n    return this.parent().props.disabled;\n  };\n\n  SliderButton.prototype.max = function max() {\n    return this.parent().props.max;\n  };\n\n  SliderButton.prototype.min = function min() {\n    return this.parent().props.min;\n  };\n\n  SliderButton.prototype.step = function step() {\n    return this.parent().props.step;\n  };\n\n  SliderButton.prototype.precision = function precision() {\n    return this.parent().state.precision;\n  };\n\n  SliderButton.prototype.currentPosition = function currentPosition() {\n    return (this.props.value - this.min()) / (this.max() - this.min()) * 100 + '%';\n  };\n\n  SliderButton.prototype.wrapperStyle = function wrapperStyle() {\n    return this.props.vertical ? {\n      bottom: this.currentPosition()\n    } : {\n      left: this.currentPosition()\n    };\n  };\n\n  SliderButton.prototype.render = function render() {\n    var _state3 = this.state,\n        hovering = _state3.hovering,\n        dragging = _state3.dragging;\n    return React.createElement('div', {\n      className: this.classNames('el-slider__button-wrapper', {\n        'hover': hovering,\n        'dragging': dragging\n      }),\n      style: this.wrapperStyle(),\n      onMouseEnter: this.handleMouseEnter.bind(this),\n      onMouseLeave: this.handleMouseLeave.bind(this),\n      onMouseDown: this.onButtonDown.bind(this)\n    }, React.createElement(Tooltip, {\n      placement: 'top',\n      content: React.createElement('span', null, this.formatValue()),\n      disabled: !this.parent().props.showTooltip\n    }, React.createElement('div', {\n      className: this.classNames('el-slider__button', {\n        'hover': hovering,\n        'dragging': dragging\n      })\n    })));\n  };\n\n  return SliderButton;\n}(Component);\n\nSliderButton.defaultProps = {\n  value: 0\n};\nexport default SliderButton;\nSliderButton.contextTypes = {\n  component: PropTypes.any\n};\nSliderButton.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.number,\n  vertical: PropTypes.bool\n};","map":null,"metadata":{},"sourceType":"module"}