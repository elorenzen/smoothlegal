{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { Component, PropTypes, Transition, View } from '../../libs';\n\nvar CascaderMenu = function (_Component) {\n  _inherits(CascaderMenu, _Component);\n\n  function CascaderMenu(props) {\n    _classCallCheck(this, CascaderMenu);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      inputWidth: 0,\n      options: [],\n      props: {},\n      visible: false,\n      activeValue: [],\n      value: [],\n      expandTrigger: 'click',\n      changeOnSelect: false,\n      popperClass: ''\n    };\n    return _this;\n  }\n\n  CascaderMenu.prototype.parent = function parent() {\n    return this.context.component;\n  };\n\n  CascaderMenu.prototype.componentDidMount = function componentDidMount() {\n    this.parent().initMenu(this);\n  };\n\n  CascaderMenu.prototype.componentDidUpdate = function componentDidUpdate(props, state) {\n    if (state.value !== this.state.value || state.visible !== this.state.visible) {\n      this.setState({\n        activeValue: this.state.value\n      });\n    }\n  };\n\n  CascaderMenu.prototype.select = function select(item, menuIndex) {\n    var activeValue = this.state.activeValue;\n\n    if (item.__IS__FLAT__OPTIONS) {\n      activeValue = item.value;\n    } else {\n      if (!menuIndex) {\n        activeValue = [item.value];\n      } else {\n        activeValue.splice(menuIndex, activeValue.length - 1, item.value);\n      }\n    }\n\n    this.forceUpdate();\n    this.parent().handlePick(activeValue);\n  };\n\n  CascaderMenu.prototype.handleMenuLeave = function handleMenuLeave() {};\n\n  CascaderMenu.prototype.activeItem = function activeItem(item, menuIndex) {\n    var activeOptions = this.activeOptions();\n    this.state.activeValue.splice(menuIndex, activeOptions.length, item.value);\n    this.forceUpdate();\n\n    if (this.parent().props.changeOnSelect) {\n      this.parent().handlePick(this.state.activeValue, false);\n    } else {\n      this.parent().handleActiveItemChange(this.state.activeValue);\n    }\n  };\n  /* Computed Methods */\n\n\n  CascaderMenu.prototype.activeOptions = function activeOptions() {\n    var _this2 = this;\n\n    var activeValue = this.state.activeValue;\n    var configurableProps = ['label', 'value', 'children', 'disabled'];\n\n    var formatOptions = function formatOptions(options) {\n      options.forEach(function (option) {\n        if (option.__IS__FLAT__OPTIONS) return;\n        configurableProps.forEach(function (prop) {\n          var value = option[_this2.parent().props.props[prop] || prop];\n          if (value) option[prop] = value;\n        });\n\n        if (Array.isArray(option.children)) {\n          formatOptions(option.children);\n        }\n      });\n    };\n\n    var loadActiveOptions = function loadActiveOptions(options) {\n      var activeOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var level = activeOptions.length;\n      activeOptions[level] = options;\n      var active = activeValue[level];\n\n      if (active) {\n        options = options.filter(function (option) {\n          return option.value === active;\n        })[0];\n\n        if (options && options.children) {\n          loadActiveOptions(options.children, activeOptions);\n        }\n      }\n\n      return activeOptions;\n    };\n\n    formatOptions(this.state.options);\n    return loadActiveOptions(this.state.options);\n  };\n\n  CascaderMenu.prototype.render = function render() {\n    var _this3 = this;\n\n    var _parent$props = this.parent().props,\n        expandTrigger = _parent$props.expandTrigger,\n        popperClass = _parent$props.popperClass;\n    var _state = this.state,\n        activeValue = _state.activeValue,\n        visible = _state.visible;\n    var activeOptions = this.activeOptions();\n    var menus = activeOptions.map(function (menu, menuIndex) {\n      var isFlat = false;\n      var items = menu.map(function (item, index) {\n        var events = {};\n        if (item.__IS__FLAT__OPTIONS) isFlat = true;\n\n        if (!item.disabled) {\n          if (item.children) {\n            var triggerEvent = {\n              click: 'onClick',\n              hover: 'onMouseEnter'\n            }[expandTrigger];\n\n            events[triggerEvent] = function () {\n              _this3.activeItem(item, menuIndex);\n            };\n          } else {\n            events.onClick = function () {\n              _this3.select(item, menuIndex);\n            };\n          }\n        }\n\n        return React.createElement('li', _extends({\n          key: index,\n          className: _this3.classNames({\n            'el-cascader-menu__item': true,\n            'el-cascader-menu__item--extensible': item.children,\n            'is-active': item.value === activeValue[menuIndex],\n            'is-disabled': item.disabled\n          })\n        }, events), item.label);\n      });\n      var menuStyle = {};\n\n      if (isFlat) {\n        menuStyle.minWidth = _this3.inputWidth + 'px';\n      }\n\n      return React.createElement('ul', {\n        key: menuIndex,\n        className: _this3.classNames({\n          'el-cascader-menu': true,\n          'el-cascader-menu--flexible': isFlat\n        }),\n        style: menuStyle\n      }, items);\n    });\n    return React.createElement(Transition, {\n      name: 'el-zoom-in-top'\n    }, React.createElement(View, {\n      show: visible\n    }, React.createElement('div', {\n      className: this.classNames('el-cascader-menus', popperClass)\n    }, menus)));\n  };\n\n  return CascaderMenu;\n}(Component);\n\nexport default CascaderMenu;\nCascaderMenu.contextTypes = {\n  component: PropTypes.any\n};","map":null,"metadata":{},"sourceType":"module"}