{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { Component, PropTypes } from '../../libs';\nimport UploadList from './UploadList';\nimport iFrameUpload from './iFrameUpload';\nimport AjaxUpload from './AjaxUpload';\n\nvar Upload = function (_Component) {\n  _inherits(Upload, _Component);\n\n  function Upload(props) {\n    _classCallCheck(this, Upload);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      fileList: [],\n      tempIndex: 1\n    };\n    return _this;\n  }\n\n  Upload.prototype.componentWillMount = function componentWillMount() {\n    this.init(this.props);\n  };\n\n  Upload.prototype.init = function init(props) {\n    var tempIndex = this.state.tempIndex;\n    var fileList = props.fileList;\n    var uploadFiles = fileList.map(function (file) {\n      file.uid = file.uid || Date.now() + tempIndex++;\n      file.status = 'success';\n      return file;\n    });\n    this.setState({\n      fileList: uploadFiles\n    });\n  };\n\n  Upload.prototype.getChildContext = function getChildContext() {\n    return {\n      onPreview: this.handlePreview.bind(this),\n      onRemove: this.handleRemove.bind(this)\n    };\n  };\n\n  Upload.prototype.getFile = function getFile(file) {\n    if (file) {\n      return this.state.fileList.find(function (item) {\n        return item.uid === file.uid;\n      });\n    }\n\n    return null;\n  };\n\n  Upload.prototype.handleStart = function handleStart(file) {\n    var _state = this.state,\n        tempIndex = _state.tempIndex,\n        fileList = _state.fileList;\n    file.uid = Date.now() + tempIndex++;\n    var _file = {\n      status: 'ready',\n      name: file.name,\n      size: file.size,\n      percentage: 0,\n      uid: file.uid,\n      raw: file\n    };\n\n    try {\n      _file.url = URL.createObjectURL(file);\n    } catch (err) {\n      return;\n    }\n\n    fileList.push(_file);\n    this.setState({\n      fileList: fileList,\n      tempIndex: tempIndex\n    });\n  };\n\n  Upload.prototype.handleProgress = function handleProgress(e, file) {\n    var fileList = this.state.fileList;\n\n    var _file = this.getFile(file);\n\n    if (_file) {\n      _file.percentage = e.percent || 0;\n      _file.status = 'uploading';\n      this.props.onProgress(e, _file, fileList);\n      this.setState({\n        fileList: fileList\n      });\n    }\n  };\n\n  Upload.prototype.handleSuccess = function handleSuccess(res, file) {\n    var _this2 = this;\n\n    var fileList = this.state.fileList;\n\n    var _file = this.getFile(file);\n\n    if (_file) {\n      _file.status = 'success';\n      _file.response = res;\n      setTimeout(function () {\n        _this2.setState({\n          fileList: fileList\n        }, function () {\n          _this2.props.onSuccess(res, _file, fileList);\n\n          _this2.props.onChange(_file, fileList);\n        });\n      }, 1000);\n    }\n  };\n\n  Upload.prototype.handleError = function handleError(err, file) {\n    var _this3 = this;\n\n    var fileList = this.state.fileList;\n\n    var _file = this.getFile(file);\n\n    if (_file) {\n      _file.status = 'fail';\n      fileList.splice(fileList.indexOf(_file), 1);\n      this.setState({\n        fileList: fileList\n      }, function () {\n        _this3.props.onError(err, _file, fileList);\n\n        _this3.props.onChange(_file, fileList);\n      });\n    }\n  };\n\n  Upload.prototype.handleRemove = function handleRemove(file) {\n    var _this4 = this;\n\n    var fileList = this.state.fileList;\n\n    var _file = this.getFile(file);\n\n    if (_file) {\n      fileList.splice(fileList.indexOf(_file), 1);\n      this.setState({\n        fileList: fileList\n      }, function () {\n        return _this4.props.onRemove(file, fileList);\n      });\n    }\n  };\n\n  Upload.prototype.handlePreview = function handlePreview(file) {\n    if (file.status === 'success') {\n      this.props.onPreview(file);\n    }\n  };\n\n  Upload.prototype.clearFiles = function clearFiles() {\n    this.setState({\n      fileList: []\n    });\n  };\n\n  Upload.prototype.submit = function submit() {\n    var _this5 = this;\n\n    this.state.fileList.filter(function (file) {\n      return file.status === 'ready';\n    }).forEach(function (file) {\n      _this5.refs['upload-inner'].upload(file.raw, file);\n    });\n  };\n\n  Upload.prototype.showCover = function showCover() {\n    var fileList = this.state.fileList;\n    var file = fileList[fileList.length - 1];\n    return file && file.status !== 'fail';\n  };\n\n  Upload.prototype.render = function render() {\n    var fileList = this.state.fileList;\n    var _props = this.props,\n        showFileList = _props.showFileList,\n        autoUpload = _props.autoUpload,\n        drag = _props.drag,\n        tip = _props.tip,\n        action = _props.action,\n        multiple = _props.multiple,\n        beforeUpload = _props.beforeUpload,\n        withCredentials = _props.withCredentials,\n        headers = _props.headers,\n        name = _props.name,\n        data = _props.data,\n        accept = _props.accept,\n        listType = _props.listType,\n        className = _props.className,\n        limit = _props.limit,\n        disabled = _props.disabled,\n        onExceed = _props.onExceed,\n        httpRequest = _props.httpRequest;\n    var uploadList = void 0;\n\n    if (showFileList && fileList.length) {\n      uploadList = React.createElement(UploadList, {\n        listType: listType,\n        fileList: fileList\n      });\n    }\n\n    var restProps = {\n      autoUpload: autoUpload,\n      drag: drag,\n      action: action,\n      multiple: multiple,\n      beforeUpload: beforeUpload,\n      withCredentials: withCredentials,\n      headers: headers,\n      name: name,\n      data: data,\n      accept: accept,\n      listType: listType,\n      fileList: fileList,\n      limit: limit,\n      disabled: disabled,\n      onExceed: onExceed,\n      httpRequest: httpRequest,\n      onStart: this.handleStart.bind(this),\n      onProgress: this.handleProgress.bind(this),\n      onSuccess: this.handleSuccess.bind(this),\n      onError: this.handleError.bind(this),\n      onPreview: this.handlePreview.bind(this),\n      onRemove: this.handleRemove.bind(this),\n      showCover: this.showCover(),\n      ref: 'upload-inner'\n    };\n    var trigger = this.props.trigger || this.props.children;\n    var uploadComponent = typeof FormData !== 'undefined' ? React.createElement(AjaxUpload, _extends({\n      key: 'AjaxUpload'\n    }, restProps), trigger) : React.createElement('iFrameUpload', _extends({\n      key: 'iFrameUpload'\n    }, restProps), trigger);\n    return React.createElement('div', {\n      className: className\n    }, listType === 'picture-card' ? uploadList : '', this.props.trigger ? [uploadComponent, this.props.children] : uploadComponent, tip, listType !== 'picture-card' ? uploadList : '');\n  };\n\n  return Upload;\n}(Component);\n\nUpload.defaultProps = {\n  headers: {},\n  name: 'file',\n  type: 'select',\n  listType: 'text',\n  fileList: [],\n  showFileList: true,\n  autoUpload: true,\n  disabled: false,\n  onRemove: function onRemove() {},\n  onPreview: function onPreview() {},\n  onProgress: function onProgress() {},\n  onSuccess: function onSuccess() {},\n  onError: function onError() {},\n  onChange: function onChange() {}\n};\nexport default Upload;\nUpload.childContextTypes = {\n  onPreview: PropTypes.func,\n  onRemove: PropTypes.func\n};\nUpload.propTypes = {\n  action: PropTypes.string.isRequired,\n  headers: PropTypes.object,\n  data: PropTypes.object,\n  multiple: PropTypes.bool,\n  name: PropTypes.string,\n  withCredentials: PropTypes.bool,\n  showFileList: PropTypes.bool,\n  fileList: PropTypes.array,\n  autoUpload: PropTypes.bool,\n  accept: PropTypes.string,\n  drag: PropTypes.bool,\n  listType: PropTypes.oneOf(['text', 'picture', 'picture-card']),\n  tip: PropTypes.node,\n  trigger: PropTypes.node,\n  beforeUpload: PropTypes.func,\n  onRemove: PropTypes.func,\n  onPreview: PropTypes.func,\n  onProgress: PropTypes.func,\n  onSuccess: PropTypes.func,\n  onError: PropTypes.func,\n  onChange: PropTypes.func,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  limit: PropTypes.number,\n  onExceed: PropTypes.func,\n  httpRequest: PropTypes.func\n};","map":null,"metadata":{},"sourceType":"module"}