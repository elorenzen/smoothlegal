{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { Component, PropTypes, Transition, View } from '../../libs';\nimport { cleanScrollBar } from '../table/utils';\nimport Button from '../button';\nimport Input from '../input';\nimport i18n from '../locale';\nvar typeMap = {\n  success: 'circle-check',\n  info: 'information',\n  warning: 'warning',\n  error: 'circle-cross'\n};\n\nvar MessageBox = function (_Component) {\n  _inherits(MessageBox, _Component);\n\n  function MessageBox(props) {\n    _classCallCheck(this, MessageBox);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      visible: false,\n      inputValue: props.inputValue\n    };\n    return _this;\n  }\n\n  MessageBox.prototype.componentDidMount = function componentDidMount() {\n    cleanScrollBar();\n    this.setState({\n      visible: true\n    });\n    document.activeElement && document.activeElement.blur();\n  };\n\n  MessageBox.prototype.confirmButtonText = function confirmButtonText() {\n    return this.props.confirmButtonText || i18n.t('el.messagebox.confirm');\n  };\n\n  MessageBox.prototype.cancelButtonText = function cancelButtonText() {\n    return this.props.cancelButtonText || i18n.t('el.messagebox.cancel');\n  };\n\n  MessageBox.prototype.onChange = function onChange(value) {\n    this.setState({\n      inputValue: value\n    });\n    this.validate(value);\n  };\n\n  MessageBox.prototype.typeClass = function typeClass() {\n    return this.props.type && typeMap[this.props.type] && 'el-icon-' + typeMap[this.props.type];\n  };\n\n  MessageBox.prototype.validate = function validate(value) {\n    var _props = this.props,\n        inputPattern = _props.inputPattern,\n        inputValidator = _props.inputValidator,\n        inputErrorMessage = _props.inputErrorMessage;\n    var editorErrorMessage = void 0;\n\n    if (inputPattern && !inputPattern.test(value)) {\n      editorErrorMessage = inputErrorMessage || i18n.t('el.messagebox.error');\n    }\n\n    if (typeof inputValidator === 'function') {\n      var validateResult = inputValidator(value);\n\n      if (validateResult === false) {\n        editorErrorMessage = inputErrorMessage || i18n.t('el.messagebox.error');\n      }\n\n      if (typeof validateResult === 'string') {\n        editorErrorMessage = validateResult;\n      }\n    }\n\n    this.setState({\n      editorErrorMessage: editorErrorMessage\n    });\n    return !editorErrorMessage;\n  };\n\n  MessageBox.prototype.handleAction = function handleAction(action) {\n    var _props2 = this.props,\n        modal = _props2.modal,\n        promise = _props2.promise,\n        showInput = _props2.showInput;\n\n    if (modal) {\n      switch (action) {\n        case 'cancel':\n          promise.reject();\n          break;\n\n        case 'confirm':\n          if (modal === 'prompt') {\n            if (this.validate(this.state.inputValue || '')) {\n              if (showInput) {\n                promise.resolve({\n                  value: this.state.inputValue,\n                  action: action\n                });\n              } else {\n                promise.resolve(action);\n              }\n            } else {\n              return;\n            }\n          } else {\n            promise.resolve();\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    } else {\n      promise.resolve(action);\n    }\n\n    this.close();\n  };\n\n  MessageBox.prototype.close = function close() {\n    this.setState({\n      visible: false\n    });\n  };\n\n  MessageBox.prototype.render = function render() {\n    var _props3 = this.props,\n        willUnmount = _props3.willUnmount,\n        title = _props3.title,\n        showClose = _props3.showClose,\n        message = _props3.message,\n        showInput = _props3.showInput,\n        inputPlaceholder = _props3.inputPlaceholder,\n        showCancelButton = _props3.showCancelButton,\n        cancelButtonClass = _props3.cancelButtonClass,\n        showConfirmButton = _props3.showConfirmButton,\n        confirmButtonClass = _props3.confirmButtonClass,\n        customClass = _props3.customClass,\n        inputType = _props3.inputType;\n    var _state = this.state,\n        visible = _state.visible,\n        editorErrorMessage = _state.editorErrorMessage;\n    return React.createElement('div', null, React.createElement('div', {\n      style: {\n        position: 'absolute',\n        zIndex: 2001\n      }\n    }, React.createElement(Transition, {\n      name: 'msgbox-fade',\n      onAfterLeave: function onAfterLeave() {\n        willUnmount && willUnmount();\n      }\n    }, React.createElement(View, {\n      show: visible\n    }, React.createElement('div', {\n      className: this.classNames('el-message-box__wrapper', customClass)\n    }, React.createElement('div', {\n      className: 'el-message-box'\n    }, title && React.createElement('div', {\n      className: 'el-message-box__header'\n    }, React.createElement('div', {\n      className: 'el-message-box__title'\n    }, title), showClose && React.createElement('button', {\n      type: 'button',\n      className: 'el-message-box__headerbtn',\n      'aria-label': 'Close',\n      onClick: this.handleAction.bind(this, 'cancel')\n    }, React.createElement('i', {\n      className: 'el-message-box__close el-icon-close'\n    }))), message && React.createElement('div', {\n      className: 'el-message-box__content'\n    }, React.createElement('div', {\n      className: this.classNames('el-message-box__status', this.typeClass())\n    }), React.createElement('div', {\n      className: 'el-message-box__message',\n      style: {\n        marginLeft: this.typeClass() ? '50px' : '0'\n      }\n    }, React.createElement('div', null, message)), React.createElement(View, {\n      show: showInput\n    }, React.createElement('div', {\n      className: 'el-message-box__input'\n    }, React.createElement(Input, {\n      className: this.classNames({\n        'invalid': editorErrorMessage\n      }),\n      type: inputType,\n      value: this.state.inputValue,\n      placeholder: inputPlaceholder,\n      onChange: this.onChange.bind(this)\n    }), React.createElement('div', {\n      className: 'el-message-box__errormsg',\n      style: {\n        visibility: editorErrorMessage ? 'visible' : 'hidden'\n      }\n    }, editorErrorMessage)))), React.createElement('div', {\n      className: 'el-message-box__btns'\n    }, React.createElement(View, {\n      show: showCancelButton\n    }, React.createElement(Button, {\n      className: cancelButtonClass,\n      onClick: this.handleAction.bind(this, 'cancel')\n    }, this.cancelButtonText())), React.createElement(View, {\n      show: showConfirmButton\n    }, React.createElement(Button, {\n      className: this.classNames('el-button--primary', confirmButtonClass),\n      onClick: this.handleAction.bind(this, 'confirm')\n    }, this.confirmButtonText())))))))), React.createElement(Transition, {\n      name: 'v-modal'\n    }, React.createElement(View, {\n      show: visible\n    }, React.createElement('div', {\n      className: 'v-modal',\n      style: {\n        zIndex: 1006\n      }\n    }))));\n  };\n\n  return MessageBox;\n}(Component);\n\nexport default MessageBox;\nMessageBox.propTypes = {\n  modal: PropTypes.oneOf(['alert', 'confirm', 'prompt']),\n  type: PropTypes.oneOf(['success', 'warning', 'info', 'error']),\n  title: PropTypes.string,\n  message: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  showInput: PropTypes.bool,\n  showClose: PropTypes.bool,\n  showCancelButton: PropTypes.bool,\n  showConfirmButton: PropTypes.bool,\n  confirmButtonText: PropTypes.string,\n  cancelButtonText: PropTypes.string,\n  cancelButtonClass: PropTypes.string,\n  confirmButtonClass: PropTypes.string,\n  customClass: PropTypes.string,\n  inputPlaceholder: PropTypes.string,\n  inputPattern: PropTypes.regex,\n  inputValidator: PropTypes.func,\n  inputErrorMessage: PropTypes.string,\n  inputValue: PropTypes.any,\n  inputType: PropTypes.string,\n  promise: PropTypes.object,\n  onClose: PropTypes.func\n};\nMessageBox.defaultProps = {\n  title: '提示',\n  showInput: false,\n  showClose: true,\n  showCancelButton: false,\n  showConfirmButton: true\n};","map":null,"metadata":{},"sourceType":"module"}