{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { Component, PropTypes } from '../../libs';\nimport InputNumber from '../input-number';\nimport SliderButton from './Button';\n\nvar Slider = function (_Component) {\n  _inherits(Slider, _Component);\n\n  function Slider(props) {\n    _classCallCheck(this, Slider);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.slider = React.createRef();\n    _this.button1 = React.createRef();\n    _this.button2 = React.createRef();\n    _this.state = {\n      firstValue: 0,\n      secondValue: 0,\n      oldValue: 0,\n      precision: 0,\n      inputValue: 0,\n      dragging: false\n    };\n    return _this;\n  }\n\n  Slider.prototype.getChildContext = function getChildContext() {\n    return {\n      component: this\n    };\n  };\n\n  Slider.prototype.componentWillMount = function componentWillMount() {\n    var _props = this.props,\n        range = _props.range,\n        value = _props.value,\n        min = _props.min,\n        max = _props.max,\n        step = _props.step;\n    var _state = this.state,\n        firstValue = _state.firstValue,\n        secondValue = _state.secondValue,\n        oldValue = _state.oldValue,\n        inputValue = _state.inputValue,\n        precision = _state.precision;\n\n    if (range) {\n      if (Array.isArray(value)) {\n        firstValue = Math.max(min, value[0]);\n        secondValue = Math.min(max, value[1]);\n      } else {\n        firstValue = min;\n        secondValue = max;\n      }\n\n      oldValue = [firstValue, secondValue];\n    } else {\n      firstValue = this.initValue;\n      oldValue = firstValue;\n    }\n\n    var precisions = [min, max, step].map(function (item) {\n      var decimal = ('' + item).split('.')[1];\n      return decimal ? decimal.length : 0;\n    });\n    precision = Math.max.apply(null, precisions);\n    inputValue = inputValue || firstValue;\n    this.setState({\n      firstValue: firstValue,\n      secondValue: secondValue,\n      oldValue: oldValue,\n      inputValue: inputValue,\n      precision: precision\n    });\n  };\n\n  Slider.prototype.componentWillUpdate = function componentWillUpdate(props) {\n    var _props2 = this.props,\n        min = _props2.min,\n        max = _props2.max,\n        value = _props2.value,\n        range = _props2.range;\n    var dragging = this.state.dragging;\n\n    if (props.min != min || props.max != max) {\n      this.setValues();\n    }\n\n    if (props.value != value) {\n      var _oldValue = this.state.oldValue;\n\n      if (dragging || Array.isArray(value) && Array.isArray(props.value) && Array.isArray(_oldValue) && value.every(function (item, index) {\n        return item === _oldValue[index];\n      })) {\n        return;\n      } else if (!range && typeof props.value === 'number' && !isNaN(props.value)) {\n        this.setState({\n          firstValue: props.value\n        });\n      }\n\n      this.setValues();\n    }\n  };\n\n  Slider.prototype.valueChanged = function valueChanged() {\n    var range = this.props.range;\n    var _state2 = this.state,\n        firstValue = _state2.firstValue,\n        oldValue = _state2.oldValue;\n\n    if (range && Array.isArray(oldValue)) {\n      return ![this.minValue(), this.maxValue()].every(function (item, index) {\n        return item === oldValue[index];\n      });\n    } else {\n      return firstValue !== oldValue;\n    }\n  };\n\n  Slider.prototype.setValues = function setValues() {\n    var _this2 = this;\n\n    var _props3 = this.props,\n        range = _props3.range,\n        value = _props3.value,\n        min = _props3.min,\n        max = _props3.max;\n    var _state3 = this.state,\n        firstValue = _state3.firstValue,\n        secondValue = _state3.secondValue,\n        oldValue = _state3.oldValue,\n        inputValue = _state3.inputValue;\n\n    if (range && Array.isArray(value)) {\n      if (value[1] < min) {\n        inputValue = [min, min];\n      } else if (value[0] > max) {\n        inputValue = [max, max];\n      } else if (value[0] < min) {\n        inputValue = [min, value[1]];\n      } else if (value[1] > max) {\n        inputValue = [value[0], max];\n      } else {\n        firstValue = value[0];\n        secondValue = value[1];\n\n        if (this.valueChanged()) {\n          this.onValueChanged([this.minValue(), this.maxValue()]);\n          oldValue = value.slice();\n        }\n      }\n    } else if (!range && typeof value === 'number' && !isNaN(value)) {\n      if (this.initValue < min) {\n        inputValue = min;\n      } else if (this.initValue > max) {\n        inputValue = max;\n      } else {\n        inputValue = firstValue;\n        this.setState({\n          firstValue: firstValue\n        }, function () {\n          if (_this2.valueChanged()) {\n            _this2.onValueChanged(firstValue);\n\n            _this2.setState({\n              oldValue: firstValue\n            });\n          }\n        });\n      }\n    }\n\n    this.setState({\n      firstValue: firstValue,\n      secondValue: secondValue,\n      inputValue: inputValue\n    });\n  };\n\n  Slider.prototype.setPosition = function setPosition(percent) {\n    var _props4 = this.props,\n        range = _props4.range,\n        min = _props4.min,\n        max = _props4.max;\n    var _state4 = this.state,\n        firstValue = _state4.firstValue,\n        secondValue = _state4.secondValue;\n    var targetValue = min + percent * (max - min) / 100;\n\n    if (!range) {\n      this.button1.current.setPosition(percent);\n      return;\n    }\n\n    var button = void 0;\n\n    if (Math.abs(this.minValue() - targetValue) < Math.abs(this.maxValue() - targetValue)) {\n      button = firstValue < secondValue ? 'button1' : 'button2';\n    } else {\n      button = firstValue > secondValue ? 'button1' : 'button2';\n    }\n\n    this[button].current.setPosition(percent);\n  };\n\n  Slider.prototype.onSliderClick = function onSliderClick(event) {\n    var _props5 = this.props,\n        disabled = _props5.disabled,\n        dragging = _props5.dragging,\n        vertical = _props5.vertical;\n    if (disabled || dragging) return;\n\n    if (vertical) {\n      var sliderOffsetBottom = this.slider.current.getBoundingClientRect().bottom;\n      this.setPosition((sliderOffsetBottom - event.clientY) / this.sliderSize() * 100);\n    } else {\n      var sliderOffsetLeft = this.slider.current.getBoundingClientRect().left;\n      this.setPosition((event.clientX - sliderOffsetLeft) / this.sliderSize() * 100);\n    }\n\n    this.setValues();\n  };\n  /* Watched Methods */\n\n\n  Slider.prototype.onValueChanged = function onValueChanged(val) {\n    var onChange = this.props.onChange;\n    if (onChange) onChange(val);\n  };\n\n  Slider.prototype.onInputValueChanged = function onInputValueChanged(e) {\n    var _this3 = this;\n\n    this.setState({\n      inputValue: e || 0,\n      firstValue: e || 0\n    }, function () {\n      _this3.setValues();\n    });\n  };\n\n  Slider.prototype.onFirstValueChange = function onFirstValueChange(value) {\n    var _this4 = this;\n\n    var firstValue = this.state.firstValue;\n\n    if (firstValue !== value) {\n      this.setState({\n        firstValue: value\n      }, function () {\n        return _this4.setValues();\n      });\n    }\n  };\n\n  Slider.prototype.onSecondValueChange = function onSecondValueChange(value) {\n    var _this5 = this;\n\n    var secondValue = this.state.secondValue;\n\n    if (secondValue !== value) {\n      this.setState({\n        secondValue: value\n      }, function () {\n        return _this5.setValues();\n      });\n    }\n  };\n  /* Computed Methods */\n\n\n  Slider.prototype.sliderSize = function sliderSize() {\n    var vertical = this.props.vertical;\n    return parseInt(vertical ? this.slider.current.offsetHeight : this.slider.current.offsetWidth, 10);\n  };\n\n  Slider.prototype.stops = function stops() {\n    var _this6 = this;\n\n    var _props6 = this.props,\n        range = _props6.range,\n        min = _props6.min,\n        max = _props6.max,\n        step = _props6.step;\n    var firstValue = this.state.firstValue;\n    var stopCount = (max - min) / step;\n    var stepWidth = 100 * step / (max - min);\n    var result = [];\n\n    for (var i = 1; i < stopCount; i++) {\n      result.push(i * stepWidth);\n    }\n\n    if (range) {\n      return result.filter(function (step) {\n        return step < 100 * (_this6.minValue() - min) / (max - min) || step > 100 * (_this6.maxValue() - min) / (max - min);\n      });\n    } else {\n      return result.filter(function (step) {\n        return step > 100 * (firstValue - min) / (max - min);\n      });\n    }\n  };\n\n  Slider.prototype.minValue = function minValue() {\n    var _state5 = this.state,\n        firstValue = _state5.firstValue,\n        secondValue = _state5.secondValue;\n    return Math.min(firstValue, secondValue);\n  };\n\n  Slider.prototype.maxValue = function maxValue() {\n    var _state6 = this.state,\n        firstValue = _state6.firstValue,\n        secondValue = _state6.secondValue;\n    return Math.max(firstValue, secondValue);\n  };\n\n  Slider.prototype.runwayStyle = function runwayStyle() {\n    var _props7 = this.props,\n        vertical = _props7.vertical,\n        height = _props7.height;\n    return vertical ? {\n      height: height\n    } : {};\n  };\n\n  Slider.prototype.barStyle = function barStyle() {\n    var vertical = this.props.vertical;\n    return vertical ? {\n      height: this.barSize(),\n      bottom: this.barStart()\n    } : {\n      width: this.barSize(),\n      left: this.barStart()\n    };\n  };\n\n  Slider.prototype.barSize = function barSize() {\n    var firstValue = this.state.firstValue;\n    var _props8 = this.props,\n        range = _props8.range,\n        max = _props8.max,\n        min = _props8.min;\n    return range ? 100 * (this.maxValue() - this.minValue()) / (max - min) + '%' : 100 * (firstValue - min) / (max - min) + '%';\n  };\n\n  Slider.prototype.barStart = function barStart() {\n    var _props9 = this.props,\n        range = _props9.range,\n        max = _props9.max,\n        min = _props9.min;\n    return range ? 100 * (this.minValue() - min) / (max - min) + '%' : '0%';\n  };\n\n  Slider.prototype.render = function render() {\n    var _props10 = this.props,\n        vertical = _props10.vertical,\n        showInput = _props10.showInput,\n        showStops = _props10.showStops,\n        showInputControls = _props10.showInputControls,\n        range = _props10.range,\n        step = _props10.step,\n        disabled = _props10.disabled,\n        min = _props10.min,\n        max = _props10.max;\n    var _state7 = this.state,\n        inputValue = _state7.inputValue,\n        firstValue = _state7.firstValue,\n        secondValue = _state7.secondValue;\n    return React.createElement('div', {\n      className: this.className('el-slider', {\n        'is-vertical': vertical,\n        'el-slider--with-input': showInput\n      })\n    }, showInput && !range && React.createElement(InputNumber, {\n      ref: 'input',\n      className: 'el-slider__input',\n      defaultValue: inputValue,\n      value: firstValue,\n      step: step,\n      disabled: disabled,\n      controls: showInputControls,\n      min: min,\n      max: max,\n      size: 'small',\n      onChange: this.onInputValueChanged.bind(this)\n    }), React.createElement('div', {\n      ref: this.slider,\n      style: this.runwayStyle(),\n      className: this.classNames('el-slider__runway', {\n        'show-input': showInput,\n        'disabled': disabled\n      }),\n      onClick: this.onSliderClick.bind(this)\n    }, React.createElement('div', {\n      className: 'el-slider__bar',\n      style: this.barStyle()\n    }), React.createElement(SliderButton, {\n      ref: this.button1,\n      vertical: vertical,\n      value: firstValue,\n      onChange: this.onFirstValueChange.bind(this)\n    }), range && React.createElement(SliderButton, {\n      ref: this.button2,\n      vertical: vertical,\n      value: secondValue,\n      onChange: this.onSecondValueChange.bind(this)\n    }), showStops && this.stops().map(function (item, index) {\n      return React.createElement('div', {\n        key: index,\n        className: 'el-slider__stop',\n        style: vertical ? {\n          'bottom': item + '%'\n        } : {\n          'left': item + '%'\n        }\n      });\n    })));\n  };\n\n  _createClass(Slider, [{\n    key: 'initValue',\n    get: function get() {\n      var _props11 = this.props,\n          value = _props11.value,\n          min = _props11.min,\n          max = _props11.max;\n      var initValue = value;\n\n      if (typeof value !== 'number' || isNaN(value)) {\n        initValue = min;\n      } else {\n        initValue = Math.min(max, Math.max(min, value));\n      }\n\n      return initValue;\n    }\n  }]);\n\n  return Slider;\n}(Component);\n\nexport default Slider;\nSlider.childContextTypes = {\n  component: PropTypes.any\n};\nSlider.propTypes = {\n  min: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  max: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  step: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n  showInput: PropTypes.bool,\n  showInputControls: PropTypes.bool,\n  showTooltip: PropTypes.bool,\n  showStops: PropTypes.bool,\n  disabled: PropTypes.bool,\n  range: PropTypes.bool,\n  vertical: PropTypes.bool,\n  height: PropTypes.string,\n  formatTooltip: PropTypes.func,\n  onChange: PropTypes.func\n};\nSlider.defaultProps = {\n  showTooltip: true,\n  showInputControls: true,\n  min: 0,\n  max: 100,\n  step: 1,\n  value: 0\n};","map":null,"metadata":{},"sourceType":"module"}