{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport _extends from 'babel-runtime/helpers/extends';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { PropTypes } from '../../../libs';\nimport Locale from '../../locale';\nimport Input from '../../input';\nimport TimePanel from './TimePanel';\nimport { MountBody } from '../MountBody';\nimport { SELECTION_MODES, toDate, prevMonth as _prevMonth, nextMonth as _nextMonth, formatDate, parseDate } from '../utils';\nimport { DateTable } from '../basic';\nimport { PopperBase } from './PopperBase';\nimport { PLACEMENT_MAP } from '../constants';\n\nvar _prevYear = function _prevYear(date) {\n  var d = toDate(date);\n  d.setFullYear(date.getFullYear() - 1);\n  return d;\n};\n\nvar _nextYear = function _nextYear(date) {\n  var d = toDate(date);\n  d.setFullYear(date.getFullYear() + 1);\n  return d;\n};\n\nvar mapPropsToState = function mapPropsToState(props) {\n  var value = props.value;\n  var state = {\n    rangeState: {\n      endDate: null,\n      selecting: false\n    }\n  };\n\n  if (!value) {\n    state = _extends({}, state, {\n      minDate: null,\n      maxDate: null,\n      date: new Date()\n    });\n  } else {\n    if (value[0] && value[1]) {\n      state.minDate = toDate(value[0]);\n      state.maxDate = toDate(value[1]);\n    }\n\n    if (value[0]) {\n      state.date = toDate(value[0]);\n    } else {\n      state.date = new Date();\n    }\n  }\n\n  return state;\n};\n\nvar DateRangePanel = function (_PopperBase) {\n  _inherits(DateRangePanel, _PopperBase);\n\n  _createClass(DateRangePanel, null, [{\n    key: 'propTypes',\n    get: function get() {\n      return Object.assign({\n        // user picked date value\n\n        /*\n        value: null | [Date, null | false]\n        */\n        value: PropTypes.any,\n        // ([value1, value2]|null, isKeepPanel)=>()\n        onPick: PropTypes.func.isRequired,\n        isShowTime: PropTypes.bool,\n        // Array[{text: String, onClick: (picker)=>()}]\n        shortcuts: PropTypes.arrayOf(PropTypes.shape({\n          text: PropTypes.string.isRequired,\n          // ()=>()\n          onClick: PropTypes.func.isRequired\n        })),\n        // (Date)=>bool, if true, disabled\n        disabledDate: PropTypes.func,\n        firstDayOfWeek: PropTypes.range(0, 6),\n        //()=>HtmlElement\n        getPopperRefElement: PropTypes.func,\n        popperMixinOption: PropTypes.object\n      }, PopperBase.propTypes);\n    }\n  }]);\n\n  function DateRangePanel(props) {\n    _classCallCheck(this, DateRangePanel);\n\n    var _this = _possibleConstructorReturn(this, _PopperBase.call(this, props));\n\n    _this.state = _extends({\n      minTimePickerVisible: false,\n      maxTimePickerVisible: false,\n      minPickerWidth: 0,\n      // not used in code right now, due to some reason, for more details see comments in DatePannel that marked with todo.\n      maxPickerWidth: 0\n    }, mapPropsToState(props));\n    return _this;\n  }\n\n  DateRangePanel.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    this.setState(mapPropsToState(nextProps));\n  };\n\n  DateRangePanel.prototype.handleRangePick = function handleRangePick(_ref, isClose) {\n    var minDate = _ref.minDate,\n        maxDate = _ref.maxDate;\n    var _props = this.props,\n        isShowTime = _props.isShowTime,\n        onPick = _props.onPick;\n    this.setState({\n      minDate: minDate,\n      maxDate: maxDate\n    });\n    if (!isClose) return;\n\n    if (!isShowTime) {\n      onPick([minDate, maxDate], false);\n    }\n  };\n\n  DateRangePanel.prototype.prevYear = function prevYear() {\n    var date = this.state.date;\n    this.setState({\n      date: _prevYear(date)\n    });\n  };\n\n  DateRangePanel.prototype.nextYear = function nextYear() {\n    var date = this.state.date;\n    this.setState({\n      date: _nextYear(date)\n    });\n  };\n\n  DateRangePanel.prototype.prevMonth = function prevMonth() {\n    this.setState({\n      date: _prevMonth(this.state.date)\n    });\n  };\n\n  DateRangePanel.prototype.nextMonth = function nextMonth() {\n    this.setState({\n      date: _nextMonth(this.state.date)\n    });\n  }; //todo: wired way to do sth like this? try to come up with a better option\n\n\n  DateRangePanel.prototype.handleChangeRange = function handleChangeRange(_ref2) {\n    var endDate = _ref2.endDate;\n    var _state = this.state,\n        rangeState = _state.rangeState,\n        minDate = _state.minDate;\n    if (endDate <= minDate) endDate = null;\n    rangeState.endDate = endDate;\n    this.setState({\n      maxDate: endDate\n    });\n  };\n\n  DateRangePanel.prototype.handleShortcutClick = function handleShortcutClick(shortcut) {\n    shortcut.onClick();\n  };\n\n  DateRangePanel.prototype.setTime = function setTime(date, value) {\n    var oldDate = new Date(date.getTime());\n    var hour = value.getHours();\n    var minute = value.getMinutes();\n    var second = value.getSeconds();\n    oldDate.setHours(hour);\n    oldDate.setMinutes(minute);\n    oldDate.setSeconds(second);\n    return new Date(oldDate.getTime());\n  };\n\n  DateRangePanel.prototype.handleMinTimePick = function handleMinTimePick(pickedDate, isKeepPanel) {\n    var minDate = this.state.minDate || new Date();\n\n    if (pickedDate) {\n      minDate = this.setTime(minDate, pickedDate);\n    }\n\n    this.setState({\n      minDate: minDate,\n      minTimePickerVisible: isKeepPanel\n    });\n  };\n\n  DateRangePanel.prototype.handleMaxTimePick = function handleMaxTimePick(pickedDate, isKeepPanel) {\n    var _state2 = this.state,\n        minDate = _state2.minDate,\n        maxDate = _state2.maxDate;\n\n    if (!maxDate) {\n      var now = new Date();\n\n      if (now >= minDate) {\n        maxDate = new Date();\n      }\n    }\n\n    if (maxDate && pickedDate) {\n      maxDate = this.setTime(maxDate, pickedDate);\n    }\n\n    this.setState({\n      maxDate: maxDate,\n      maxTimePickerVisible: isKeepPanel\n    });\n  };\n\n  DateRangePanel.prototype.handleDateChange = function handleDateChange(value, type) {\n    var parsedValue = parseDate(value, 'yyyy-MM-dd');\n    var _state3 = this.state,\n        minDate = _state3.minDate,\n        maxDate = _state3.maxDate;\n\n    if (parsedValue) {\n      var target = new Date(type === 'min' ? minDate : maxDate);\n\n      if (target) {\n        target.setFullYear(parsedValue.getFullYear());\n        target.setMonth(parsedValue.getMonth(), parsedValue.getDate());\n      }\n\n      if (type === 'min') {\n        if (target < maxDate) {\n          this.setState({\n            minDate: new Date(target.getTime())\n          });\n        }\n      } else {\n        if (target > minDate) {\n          maxDate = new Date(target.getTime());\n\n          if (minDate && minDate > maxDate) {\n            minDate = null;\n          }\n\n          this.setState({\n            minDate: minDate,\n            maxDate: maxDate\n          });\n        }\n      }\n    }\n  };\n\n  DateRangePanel.prototype.handleTimeChange = function handleTimeChange(value, type) {\n    var parsedValue = parseDate(value, 'HH:mm:ss');\n\n    if (parsedValue) {\n      var _setState;\n\n      var target = new Date(type === 'min' ? this.minDate : this.maxDate);\n\n      if (target) {\n        target.setHours(parsedValue.getHours());\n        target.setMinutes(parsedValue.getMinutes());\n        target.setSeconds(parsedValue.getSeconds());\n      }\n\n      var _state4 = this.state,\n          minDate = _state4.minDate,\n          maxDate = _state4.maxDate;\n\n      if (type === 'min') {\n        if (target < maxDate) {\n          minDate = new Date(target.getTime());\n        }\n      } else {\n        if (target > minDate) {\n          maxDate = new Date(target.getTime());\n        }\n      }\n\n      this.setState((_setState = {\n        minDate: minDate,\n        maxDate: maxDate\n      }, _setState[type + 'TimpickerVisisble'] = false, _setState));\n    }\n  };\n\n  DateRangePanel.prototype.handleClear = function handleClear() {\n    var onPick = this.props.onPick;\n    var minDate = null,\n        maxDate = null,\n        date = new Date();\n    this.setState({\n      minDate: minDate,\n      maxDate: maxDate,\n      date: date\n    });\n    onPick([], false);\n  };\n\n  DateRangePanel.prototype.handleConfirm = function handleConfirm() {\n    var _state5 = this.state,\n        minDate = _state5.minDate,\n        maxDate = _state5.maxDate;\n    this.props.onPick([minDate, maxDate], false);\n  };\n\n  DateRangePanel.prototype.render = function render() {\n    var _this2 = this;\n\n    var _props2 = this.props,\n        shortcuts = _props2.shortcuts,\n        disabledDate = _props2.disabledDate,\n        firstDayOfWeek = _props2.firstDayOfWeek,\n        isShowTime = _props2.isShowTime;\n    var _state6 = this.state,\n        date = _state6.date,\n        rangeState = _state6.rangeState,\n        minDate = _state6.minDate,\n        maxDate = _state6.maxDate,\n        minTimePickerVisible = _state6.minTimePickerVisible,\n        maxTimePickerVisible = _state6.maxTimePickerVisible,\n        minPickerWidth = _state6.minPickerWidth,\n        maxPickerWidth = _state6.maxPickerWidth;\n    var rightDate = this.rightDate;\n    var t = Locale.t;\n    var leftLabel = date.getFullYear() + ' ' + t('el.datepicker.year') + ' ' + t('el.datepicker.month' + (date.getMonth() + 1));\n    var rightLabel = rightDate.getFullYear() + ' ' + t('el.datepicker.year') + ' ' + t('el.datepicker.month' + (rightDate.getMonth() + 1));\n    return React.createElement('div', {\n      ref: 'root',\n      className: this.classNames('el-picker-panel el-date-range-picker', {\n        'has-sidebar': shortcuts,\n        'has-time': isShowTime\n      })\n    }, React.createElement('div', {\n      className: 'el-picker-panel__body-wrapper'\n    }, Array.isArray(shortcuts) && React.createElement('div', {\n      className: 'el-picker-panel__sidebar'\n    }, shortcuts.map(function (e, idx) {\n      return React.createElement('button', {\n        key: idx,\n        type: 'button',\n        className: 'el-picker-panel__shortcut',\n        onClick: function onClick() {\n          return _this2.handleShortcutClick(e);\n        }\n      }, e.text);\n    })), React.createElement('div', {\n      className: 'el-picker-panel__body'\n    }, isShowTime && React.createElement('div', {\n      className: 'el-date-range-picker__time-header'\n    }, React.createElement('span', {\n      className: 'el-date-range-picker__editors-wrap'\n    }, React.createElement('span', {\n      className: 'el-date-range-picker__time-picker-wrap'\n    }, React.createElement(Input, {\n      size: 'small',\n      ref: 'minInput',\n      placeholder: Locale.t('el.datepicker.startDate'),\n      className: 'el-date-range-picker__editor',\n      value: this.minVisibleDate,\n      onChange: function onChange(value) {\n        return _this2.handleDateChange(value, 'min');\n      }\n    })), React.createElement('span', {\n      className: 'el-date-range-picker__time-picker-wrap'\n    }, React.createElement(Input, {\n      size: 'small',\n      ref: 'timeIptStart',\n      placeholder: Locale.t('el.datepicker.startTime'),\n      className: 'el-date-range-picker__editor',\n      value: this.minVisibleTime,\n      onFocus: function onFocus() {\n        _this2.setState({\n          minTimePickerVisible: !minTimePickerVisible\n        });\n      },\n      onChange: function onChange(value) {\n        return _this2.handleTimeChange(value, 'min');\n      }\n    }), minTimePickerVisible && React.createElement(MountBody, null, React.createElement(TimePanel, {\n      pickerWidth: minPickerWidth,\n      ref: 'minTimePicker',\n      currentDate: minDate,\n      onPicked: this.handleMinTimePick.bind(this),\n      getPopperRefElement: function getPopperRefElement() {\n        return ReactDOM.findDOMNode(_this2.refs.timeIptStart);\n      },\n      popperMixinOption: {\n        placement: PLACEMENT_MAP[this.props.align] || PLACEMENT_MAP.left\n      },\n      onCancel: function onCancel() {\n        return _this2.setState({\n          minTimePickerVisible: false\n        });\n      }\n    })))), React.createElement('span', {\n      className: 'el-icon-arrow-right'\n    }), React.createElement('span', {\n      className: 'el-date-range-picker__editors-wrap is-right'\n    }, React.createElement('span', {\n      className: 'el-date-range-picker__time-picker-wrap'\n    }, React.createElement(Input, {\n      size: 'small',\n      placeholder: Locale.t('el.datepicker.endDate'),\n      className: 'el-date-range-picker__editor',\n      value: this.maxVisibleDate,\n      readOnly: !minDate,\n      onChange: function onChange(value) {\n        return _this2.handleDateInput(value, 'max');\n      }\n    })), React.createElement('span', {\n      className: 'el-date-range-picker__time-picker-wrap'\n    }, React.createElement(Input, {\n      size: 'small',\n      ref: 'maxInput',\n      placeholder: Locale.t('el.datepicker.endTime'),\n      className: 'el-date-range-picker__editor',\n      value: this.maxVisibleTime,\n      onFocus: function onFocus() {\n        if (minDate) {\n          _this2.setState({\n            maxTimePickerVisible: !maxTimePickerVisible\n          });\n        }\n      },\n      readOnly: !minDate,\n      onChange: function onChange(value) {\n        return _this2.handleTimeChange(value, 'max');\n      }\n    }), maxTimePickerVisible && React.createElement(MountBody, null, React.createElement(TimePanel, {\n      pickerWidth: maxPickerWidth,\n      ref: 'maxTimePicker',\n      currentDate: maxDate,\n      onPicked: this.handleMaxTimePick.bind(this),\n      getPopperRefElement: function getPopperRefElement() {\n        return ReactDOM.findDOMNode(_this2.refs.maxInput);\n      },\n      popperMixinOption: {\n        placement: PLACEMENT_MAP[this.props.align] || PLACEMENT_MAP.left\n      },\n      onCancel: function onCancel() {\n        return _this2.setState({\n          maxTimePickerVisible: false\n        });\n      }\n    }))))), React.createElement('div', {\n      className: 'el-picker-panel__content el-date-range-picker__content is-left'\n    }, React.createElement('div', {\n      className: 'el-date-range-picker__header'\n    }, React.createElement('button', {\n      type: 'button',\n      onClick: this.prevYear.bind(this),\n      className: 'el-picker-panel__icon-btn el-icon-d-arrow-left'\n    }), React.createElement('button', {\n      type: 'button',\n      onClick: this.prevMonth.bind(this),\n      className: 'el-picker-panel__icon-btn el-icon-arrow-left'\n    }), React.createElement('div', null, leftLabel)), React.createElement(DateTable, {\n      selectionMode: SELECTION_MODES.RANGE,\n      date: date,\n      value: minDate,\n      minDate: minDate,\n      maxDate: maxDate,\n      rangeState: rangeState,\n      disabledDate: disabledDate,\n      onChangeRange: this.handleChangeRange.bind(this),\n      onPick: this.handleRangePick.bind(this),\n      firstDayOfWeek: firstDayOfWeek\n    })), React.createElement('div', {\n      className: 'el-picker-panel__content el-date-range-picker__content is-right'\n    }, React.createElement('div', {\n      className: 'el-date-range-picker__header'\n    }, React.createElement('button', {\n      type: 'button',\n      onClick: this.nextYear.bind(this),\n      className: 'el-picker-panel__icon-btn el-icon-d-arrow-right'\n    }), React.createElement('button', {\n      type: 'button',\n      onClick: this.nextMonth.bind(this),\n      className: 'el-picker-panel__icon-btn el-icon-arrow-right'\n    }), React.createElement('div', null, rightLabel)), React.createElement(DateTable, {\n      selectionMode: SELECTION_MODES.RANGE,\n      date: rightDate,\n      value: maxDate,\n      minDate: minDate,\n      maxDate: maxDate,\n      rangeState: rangeState,\n      disabledDate: disabledDate,\n      onChangeRange: this.handleChangeRange.bind(this),\n      onPick: this.handleRangePick.bind(this),\n      firstDayOfWeek: firstDayOfWeek\n    })))), isShowTime && React.createElement('div', {\n      className: 'el-picker-panel__footer'\n    }, React.createElement('a', {\n      className: 'el-picker-panel__link-btn',\n      onClick: function onClick() {\n        return _this2.handleClear();\n      }\n    }, Locale.t('el.datepicker.clear')), React.createElement('button', {\n      type: 'button',\n      className: 'el-picker-panel__btn',\n      onClick: function onClick() {\n        return _this2.handleConfirm();\n      },\n      disabled: this.btnDisabled\n    }, Locale.t('el.datepicker.confirm'))));\n  };\n\n  _createClass(DateRangePanel, [{\n    key: 'rightDate',\n    get: function get() {\n      return _nextMonth(this.state.date);\n    }\n  }, {\n    key: 'minVisibleDate',\n    get: function get() {\n      var minDate = this.state.minDate;\n      return minDate ? formatDate(minDate) : '';\n    }\n  }, {\n    key: 'maxVisibleDate',\n    get: function get() {\n      var _state7 = this.state,\n          maxDate = _state7.maxDate,\n          minDate = _state7.minDate;\n      var d = maxDate || minDate;\n      return d ? formatDate(d) : '';\n    }\n  }, {\n    key: 'minVisibleTime',\n    get: function get() {\n      var minDate = this.state.minDate;\n      return minDate ? formatDate(minDate, 'HH:mm:ss') : '';\n    }\n  }, {\n    key: 'maxVisibleTime',\n    get: function get() {\n      var _state8 = this.state,\n          maxDate = _state8.maxDate,\n          minDate = _state8.minDate;\n      var d = maxDate || minDate;\n      return d ? formatDate(d, 'HH:mm:ss') : '';\n    }\n  }, {\n    key: 'btnDisabled',\n    get: function get() {\n      var _state9 = this.state,\n          minDate = _state9.minDate,\n          maxDate = _state9.maxDate,\n          selecting = _state9.rangeState.selecting;\n      return !(minDate && maxDate && !selecting);\n    }\n  }]);\n\n  return DateRangePanel;\n}(PopperBase);\n\nexport default DateRangePanel;\nDateRangePanel.defaultProps = {};","map":null,"metadata":{},"sourceType":"module"}