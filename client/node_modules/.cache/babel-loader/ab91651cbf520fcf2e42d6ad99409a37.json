{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Popper from 'popper.js';\nimport { Component, PropTypes, Transition, View } from '../../libs';\n\nvar Popover = function (_Component) {\n  _inherits(Popover, _Component);\n\n  function Popover(props) {\n    _classCallCheck(this, Popover);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      showPopper: false\n    };\n    return _this;\n  }\n\n  Popover.prototype.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    var trigger = this.props.trigger,\n        popper = this.refs.popper;\n    this.element = ReactDOM.findDOMNode(this);\n    this.reference = ReactDOM.findDOMNode(this.refs.reference);\n    if (this.reference === null) return;\n\n    if (trigger === 'click') {\n      this.reference.addEventListener('click', function () {\n        _this2.setState({\n          showPopper: !_this2.state.showPopper\n        });\n      });\n      document.addEventListener('click', function (e) {\n        if (!_this2.element || _this2.element.contains(e.target) || !_this2.reference || _this2.reference.contains(e.target) || !popper || popper.contains(e.target)) return;\n\n        _this2.setState({\n          showPopper: false\n        });\n      });\n    } else if (trigger === 'hover') {\n      this.reference.addEventListener('mouseenter', this.handleMouseEnter.bind(this));\n      this.reference.addEventListener('mouseleave', this.handleMouseLeave.bind(this));\n      popper.addEventListener('mouseenter', this.handleMouseEnter.bind(this));\n      popper.addEventListener('mouseleave', this.handleMouseLeave.bind(this));\n    } else if (trigger === 'manual') {\n      this.setState({\n        showPopper: this.props.visible\n      });\n    } else {\n      if (this.reference.nodeName === 'INPUT' || this.reference.nodeName === 'TEXTAREA') {\n        this.reference.addEventListener('focus', function () {\n          _this2.setState({\n            showPopper: true\n          });\n        });\n        this.reference.addEventListener('blur', function () {\n          _this2.setState({\n            showPopper: false\n          });\n        });\n      } else {\n        this.reference.addEventListener('mousedown', function () {\n          _this2.setState({\n            showPopper: true\n          });\n        });\n        this.reference.addEventListener('mouseup', function () {\n          _this2.setState({\n            showPopper: false\n          });\n        });\n      }\n    }\n  };\n\n  Popover.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {\n    if (props.visible !== this.props.visible) {\n      this.setState({\n        showPopper: props.visible\n      });\n    }\n  };\n\n  Popover.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.reference.parentNode.replaceChild(this.reference.cloneNode(true), this.reference);\n  };\n\n  Popover.prototype.handleMouseEnter = function handleMouseEnter() {\n    clearTimeout(this.timer);\n    this.setState({\n      showPopper: true\n    });\n  };\n\n  Popover.prototype.handleMouseLeave = function handleMouseLeave() {\n    var _this3 = this;\n\n    this.timer = setTimeout(function () {\n      _this3.setState({\n        showPopper: false\n      });\n    }, 200);\n  };\n\n  Popover.prototype.onEnter = function onEnter() {\n    if (this.refs.arrow) {\n      this.refs.arrow.setAttribute('x-arrow', '');\n    }\n\n    this.popperJS = new Popper(this.reference, this.refs.popper, {\n      placement: this.props.placement,\n      modifiers: {\n        computeStyle: {\n          gpuAcceleration: false\n        }\n      }\n    });\n  };\n\n  Popover.prototype.onAfterLeave = function onAfterLeave() {\n    this.popperJS.destroy();\n  };\n\n  Popover.prototype.render = function render() {\n    var _props = this.props,\n        transition = _props.transition,\n        popperClass = _props.popperClass,\n        width = _props.width,\n        title = _props.title,\n        content = _props.content,\n        visibleArrow = _props.visibleArrow;\n    return React.createElement('span', null, React.createElement(Transition, {\n      name: transition,\n      onEnter: this.onEnter.bind(this),\n      onAfterLeave: this.onAfterLeave.bind(this)\n    }, React.createElement(View, {\n      show: this.state.showPopper\n    }, React.createElement('div', {\n      ref: 'popper',\n      className: this.className('el-popover', popperClass),\n      style: this.style({\n        width: Number(width)\n      })\n    }, title && React.createElement('div', {\n      className: 'el-popover__title'\n    }, title), content, visibleArrow && React.createElement('div', {\n      ref: 'arrow',\n      className: 'popper__arrow'\n    })))), React.cloneElement(React.Children.only(this.props.children), {\n      ref: 'reference'\n    }));\n  };\n\n  return Popover;\n}(Component);\n\nPopover.defaultProps = {\n  visibleArrow: true,\n  transition: 'fade-in-linear',\n  trigger: 'click',\n  placement: 'bottom',\n  width: 150\n};\nexport default Popover;\nPopover.propTypes = {\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  placement: PropTypes.oneOf(['top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'left-start', 'left-end', 'right', 'right-start', 'right-end']),\n  trigger: PropTypes.oneOf(['click', 'focus', 'hover', 'manual']),\n  title: PropTypes.string,\n  content: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  popperClass: PropTypes.string,\n  transition: PropTypes.string,\n  visible: PropTypes.bool,\n  visibleArrow: PropTypes.bool\n};","map":null,"metadata":{},"sourceType":"module"}