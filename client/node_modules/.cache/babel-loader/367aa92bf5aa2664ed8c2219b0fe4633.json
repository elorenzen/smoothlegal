{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { PropTypes, Component } from '../../libs';\nimport { require_condition } from '../../libs/utils';\nimport Node from './Node';\nimport Locale from '../locale';\nimport TreeStore from './model/tree-store';\n\nvar Tree = function (_Component) {\n  _inherits(Tree, _Component);\n\n  function Tree(props) {\n    _classCallCheck(this, Tree);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    var _this$props = _this.props,\n        data = _this$props.data,\n        lazy = _this$props.lazy,\n        options = _this$props.options,\n        load = _this$props.load,\n        defaultCheckedKeys = _this$props.defaultCheckedKeys,\n        defaultExpandedKeys = _this$props.defaultExpandedKeys,\n        currentNodeKey = _this$props.currentNodeKey,\n        nodeKey = _this$props.nodeKey,\n        checkStrictly = _this$props.checkStrictly,\n        autoExpandParent = _this$props.autoExpandParent,\n        defaultExpandAll = _this$props.defaultExpandAll,\n        filterNodeMethod = _this$props.filterNodeMethod;\n    _this.state = {\n      store: new TreeStore({\n        key: nodeKey,\n        data: data,\n        lazy: lazy,\n        props: options,\n        load: load,\n        currentNodeKey: currentNodeKey,\n        checkStrictly: checkStrictly,\n        defaultCheckedKeys: defaultCheckedKeys,\n        defaultExpandedKeys: defaultExpandedKeys,\n        autoExpandParent: autoExpandParent,\n        defaultExpandAll: defaultExpandAll,\n        filterNodeMethod: filterNodeMethod\n      }),\n      currentNode: null\n    };\n    return _this;\n  }\n\n  Tree.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (nextProps.data instanceof Array && this.props.data !== nextProps.data) {\n      this.root.setData(nextProps.data);\n      this.setState({}); //force update\n    }\n  };\n\n  Tree.prototype.filter = function filter(value) {\n    if (!this.props.filterNodeMethod) throw new Error('[Tree] filterNodeMethod is required when filter');\n    this.store.filter(value);\n    this.refresh();\n  };\n\n  Tree.prototype.refresh = function refresh() {\n    this.setState({});\n  };\n\n  Tree.prototype.getNodeKey = function getNodeKey(node, otherwise) {\n    var nodeKey = this.props.nodeKey;\n\n    if (nodeKey && node) {\n      return node.data[nodeKey];\n    }\n\n    return otherwise;\n  };\n\n  Tree.prototype.getCheckedNodes = function getCheckedNodes(leafOnly) {\n    return this.store.getCheckedNodes(leafOnly);\n  };\n\n  Tree.prototype.getCheckedKeys = function getCheckedKeys(leafOnly) {\n    return this.store.getCheckedKeys(leafOnly);\n  };\n\n  Tree.prototype.setCheckedNodes = function setCheckedNodes(nodes, leafOnly) {\n    if (!this.props.nodeKey) throw new Error('[Tree] nodeKey is required in setCheckedNodes');\n    this.store.setCheckedNodes(nodes, leafOnly);\n  };\n\n  Tree.prototype.setCheckedKeys = function setCheckedKeys(keys, leafOnly) {\n    if (!this.props.nodeKey) throw new Error('[Tree] nodeKey is required in setCheckedNodes');\n    this.store.setCheckedKeys(keys, leafOnly);\n  };\n\n  Tree.prototype.setChecked = function setChecked(data, checked, deep) {\n    this.store.setChecked(data, checked, deep);\n  }; // used by child nodes, use tree store to store this info?\n\n\n  Tree.prototype.getCurrentNode = function getCurrentNode() {\n    return this.state.currentNode;\n  };\n\n  Tree.prototype.setCurrentNode = function setCurrentNode(node) {\n    require_condition(node != null);\n    var _props = this.props,\n        onCurrentChange = _props.onCurrentChange,\n        onNodeClicked = _props.onNodeClicked;\n    this.store.setCurrentNode(node);\n    this.setState({\n      currentNode: node\n    }, function () {\n      var nodeModel = node.props.nodeModel;\n      onCurrentChange(nodeModel.data, node);\n      onNodeClicked(nodeModel.data, node);\n    });\n  };\n\n  Tree.prototype.closeSiblings = function closeSiblings(exclude) {\n    var accordion = this.props.accordion;\n    if (!accordion) return;\n    if (!this.root.childNodes || !this.root.childNodes.length) return;\n    this.root.childNodes.filter(function (e) {\n      return e !== exclude;\n    }).forEach(function (e) {\n      return e.collapse();\n    });\n    this.refresh();\n  };\n\n  Tree.prototype.render = function render() {\n    var _this2 = this;\n\n    var _props2 = this.props,\n        options = _props2.options,\n        renderContent = _props2.renderContent,\n        highlightCurrent = _props2.highlightCurrent,\n        isShowCheckbox = _props2.isShowCheckbox,\n        onCheckChange = _props2.onCheckChange,\n        onNodeClicked = _props2.onNodeClicked,\n        emptyText = _props2.emptyText;\n\n    var renderEmptyText = function renderEmptyText() {\n      if (!_this2.root.childNodes || _this2.root.childNodes.length === 0) {\n        return React.createElement('div', {\n          className: 'el-tree__empty-block'\n        }, React.createElement('span', {\n          className: 'el-tree__empty-text'\n        }, emptyText));\n      } else return null;\n    };\n\n    return React.createElement('div', {\n      style: this.style(),\n      className: this.className('el-tree', {\n        'el-tree--highlight-current': highlightCurrent\n      })\n    }, this.root.childNodes.map(function (e, idx) {\n      return React.createElement(Node, {\n        ref: 'cnode',\n        key: _this2.getNodeKey(e, idx),\n        nodeModel: e,\n        options: options,\n        renderContent: renderContent,\n        treeNode: _this2,\n        parent: _this2,\n        isShowCheckbox: isShowCheckbox,\n        onCheckChange: onCheckChange\n      });\n    }), renderEmptyText());\n  };\n\n  _createClass(Tree, [{\n    key: 'root',\n    get: function get() {\n      return this.state.store.root;\n    }\n  }, {\n    key: 'store',\n    get: function get() {\n      return this.state.store;\n    }\n  }]);\n\n  return Tree;\n}(Component);\n\nexport default Tree;\nTree.propTypes = {\n  autoExpandParent: PropTypes.bool,\n  checkStrictly: PropTypes.bool,\n  currentNodeKey: PropTypes.any,\n  defaultCheckedKeys: PropTypes.array,\n  defaultExpandedKeys: PropTypes.array,\n  defaultExpandAll: PropTypes.bool,\n  data: PropTypes.array,\n  emptyText: PropTypes.string,\n  expandOnClickNode: PropTypes.bool,\n  filterNodeMethod: PropTypes.func,\n  renderContent: PropTypes.func,\n  isShowCheckbox: PropTypes.bool,\n  accordion: PropTypes.bool,\n  indent: PropTypes.number,\n  nodeKey: PropTypes.string,\n  options: PropTypes.shape({\n    children: PropTypes.string,\n    label: PropTypes.string,\n    icon: PropTypes.string\n  }),\n  //equal to props in vue element\n  lazy: PropTypes.bool,\n  //todo: check this\n  highlightCurrent: PropTypes.bool,\n  // (f:(resolve, reject)=>Unit)=>Unit\n  load: PropTypes.func,\n  //\n  onCheckChange: PropTypes.func,\n  // todo: 这个地方需要改下， 现在是current和nodeclick一起被设置上了\n  // (nodeModel.data, node)=>Unit\n  onNodeClicked: PropTypes.func,\n  // (nodeModel.data, node)=>Unit\n  onCurrentChange: PropTypes.func,\n  // (nodeModel.data, nodeModel, Node)=>Unit\n  onNodeExpand: PropTypes.func,\n  onNodeCollapse: PropTypes.func\n};\nTree.defaultProps = {\n  autoExpandParent: true,\n  defaultCheckedKeys: [],\n  defaultExpandedKeys: [],\n  data: [],\n  expandOnClickNode: true,\n  emptyText: Locale.t('el.tree.emptyText'),\n  indent: 16,\n  options: {\n    children: 'children',\n    label: 'label',\n    icon: 'icon'\n  },\n  onCheckChange: function onCheckChange() {},\n  onNodeClicked: function onNodeClicked() {},\n  onCurrentChange: function onCurrentChange() {},\n  onNodeExpand: function onNodeExpand() {},\n  onNodeCollapse: function onNodeCollapse() {}\n};","map":null,"metadata":{},"sourceType":"module"}