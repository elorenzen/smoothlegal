{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { Component, PropTypes, View } from '../../libs';\n\nvar Option = function (_Component) {\n  _inherits(Option, _Component);\n\n  function Option(props) {\n    _classCallCheck(this, Option);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      index: -1,\n      visible: true,\n      hitState: false\n    };\n    return _this;\n  }\n\n  Option.prototype.componentWillMount = function componentWillMount() {\n    this.parent().onOptionCreate(this);\n    this.setState({\n      index: this.parent().state.options.indexOf(this)\n    });\n\n    if (this.currentSelected() === true) {\n      this.parent().addOptionToValue(this, true);\n    }\n  };\n\n  Option.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.parent().onOptionDestroy(this);\n  };\n\n  Option.prototype.parent = function parent() {\n    return this.context.component;\n  };\n\n  Option.prototype.currentSelected = function currentSelected() {\n    return this.props.selected || (this.parent().props.multiple ? this.parent().state.value.indexOf(this.props.value) > -1 : this.parent().state.value === this.props.value);\n  };\n\n  Option.prototype.currentLabel = function currentLabel() {\n    return this.props.label || (typeof this.props.value === 'string' || typeof this.props.value === 'number' ? this.props.value : '');\n  };\n\n  Option.prototype.itemSelected = function itemSelected() {\n    if (Object.prototype.toString.call(this.parent().state.selected) === '[object Object]') {\n      return this === this.parent().state.selected;\n    } else if (Array.isArray(this.parent().state.selected)) {\n      return this.parent().state.selected.map(function (el) {\n        return el.props.value;\n      }).indexOf(this.props.value) > -1;\n    }\n\n    return false;\n  };\n\n  Option.prototype.hoverItem = function hoverItem() {\n    if (!this.props.disabled && !this.parent().props.disabled) {\n      this.parent().setState({\n        hoverIndex: this.parent().state.options.indexOf(this)\n      });\n    }\n  };\n\n  Option.prototype.selectOptionClick = function selectOptionClick() {\n    if (this.props.disabled !== true && this.parent().props.disabled !== true) {\n      this.parent().onOptionClick(this);\n    }\n  };\n\n  Option.prototype.queryChange = function queryChange(query) {\n    // query 里如果有正则中的特殊字符，需要先将这些字符转义\n    var parsedQuery = query.replace(/(\\^|\\(|\\)|\\[|\\]|\\$|\\*|\\+|\\.|\\?|\\\\|\\{|\\}|\\|)/g, '\\\\$1');\n    var visible = new RegExp(parsedQuery, 'i').test(this.currentLabel());\n\n    if (!visible) {\n      this.parent().setState({\n        filteredOptionsCount: this.parent().state.filteredOptionsCount - 1\n      });\n    }\n\n    this.setState({\n      visible: visible\n    });\n  };\n\n  Option.prototype.resetIndex = function resetIndex() {\n    this.setState({\n      index: this.parent().state.options.indexOf(this)\n    });\n  };\n\n  Option.prototype.render = function render() {\n    var _state = this.state,\n        visible = _state.visible,\n        index = _state.index;\n    return React.createElement(View, {\n      show: visible\n    }, React.createElement('li', {\n      style: this.style(),\n      className: this.className('el-select-dropdown__item', {\n        'selected': this.itemSelected(),\n        'is-disabled': this.props.disabled || this.parent().props.disabled,\n        'hover': this.parent().state.hoverIndex === index\n      }),\n      onMouseEnter: this.hoverItem.bind(this),\n      onClick: this.selectOptionClick.bind(this)\n    }, this.props.children || React.createElement('span', null, this.currentLabel())));\n  };\n\n  return Option;\n}(Component);\n\nexport default Option;\nOption.contextTypes = {\n  component: PropTypes.any\n};\nOption.propTypes = {\n  value: PropTypes.any.isRequired,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  selected: PropTypes.bool,\n  disabled: PropTypes.bool\n};","map":null,"metadata":{},"sourceType":"module"}