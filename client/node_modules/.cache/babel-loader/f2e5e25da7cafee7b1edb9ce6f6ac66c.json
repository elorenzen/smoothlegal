{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { Component, PropTypes } from '../../libs';\nimport Button from '../button';\nimport TransferPanel from './TransferPanel';\nimport i18n from '../locale';\n\nvar Transfer = function (_Component) {\n  _inherits(Transfer, _Component);\n\n  function Transfer(props) {\n    _classCallCheck(this, Transfer);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.onSourceCheckedChange = function (val) {\n      _this.setState({\n        leftChecked: val\n      });\n    };\n\n    _this.onTargetCheckedChange = function (val) {\n      _this.setState({\n        rightChecked: val\n      });\n    };\n\n    _this.addToLeft = function () {\n      var value = _this.props.value;\n      var rightChecked = _this.state.rightChecked;\n      var currentValue = value.slice();\n      rightChecked.forEach(function (item) {\n        var index = currentValue.indexOf(item);\n\n        if (index > -1) {\n          currentValue.splice(index, 1);\n        }\n      });\n\n      _this.setState({\n        rightChecked: []\n      }, function () {\n        return _this.props.onChange(currentValue, 'left', rightChecked);\n      });\n    };\n\n    _this.addToRight = function () {\n      var value = _this.props.value;\n      var leftChecked = _this.state.leftChecked;\n      var currentValue = value.slice();\n      leftChecked.forEach(function (item) {\n        if (!value.includes(item)) {\n          currentValue = currentValue.concat(item);\n        }\n      });\n\n      _this.setState({\n        leftChecked: []\n      }, function () {\n        return _this.props.onChange(currentValue, 'right', leftChecked);\n      });\n    };\n\n    _this.state = {\n      leftChecked: [],\n      rightChecked: []\n    };\n    return _this;\n  }\n\n  Transfer.prototype.componentWillMount = function componentWillMount() {\n    var _props = this.props,\n        leftDefaultChecked = _props.leftDefaultChecked,\n        rightDefaultChecked = _props.rightDefaultChecked;\n\n    if (leftDefaultChecked.length) {\n      this.setState({\n        leftChecked: leftDefaultChecked\n      });\n    }\n\n    if (rightDefaultChecked.length) {\n      this.setState({\n        rightChecked: rightDefaultChecked\n      });\n    }\n  };\n\n  Transfer.prototype.render = function render() {\n    var _props2 = this.props,\n        filterPlaceholder = _props2.filterPlaceholder,\n        titles = _props2.titles,\n        buttonTexts = _props2.buttonTexts,\n        propsAlias = _props2.propsAlias,\n        filterable = _props2.filterable,\n        filterMethod = _props2.filterMethod,\n        footerFormat = _props2.footerFormat,\n        leftFooter = _props2.leftFooter,\n        rightFooter = _props2.rightFooter,\n        renderContent = _props2.renderContent;\n    var _state = this.state,\n        leftChecked = _state.leftChecked,\n        rightChecked = _state.rightChecked;\n    return React.createElement('div', {\n      className: 'el-transfer'\n    }, React.createElement(TransferPanel, {\n      propsAlias: propsAlias,\n      data: this.sourceData,\n      title: titles[0] || i18n.t('el.transfer.titles.0'),\n      checked: leftChecked,\n      filterable: filterable,\n      filterMethod: filterMethod,\n      footerFormat: footerFormat,\n      renderContent: renderContent,\n      placeholder: filterPlaceholder || i18n.t('el.transfer.filterPlaceholder'),\n      onChange: this.onSourceCheckedChange\n    }, leftFooter), React.createElement('div', {\n      className: 'el-transfer__buttons'\n    }, React.createElement(Button, {\n      type: 'primary',\n      size: 'small',\n      onClick: this.addToLeft,\n      disabled: rightChecked.length === 0\n    }, React.createElement('i', {\n      className: 'el-icon-arrow-left'\n    }), buttonTexts[0] !== undefined && React.createElement('span', null, buttonTexts[0])), React.createElement(Button, {\n      type: 'primary',\n      size: 'small',\n      onClick: this.addToRight,\n      disabled: leftChecked.length === 0\n    }, buttonTexts[1] !== undefined && React.createElement('span', null, buttonTexts[1]), React.createElement('i', {\n      className: 'el-icon-arrow-right'\n    }))), React.createElement(TransferPanel, {\n      propsAlias: propsAlias,\n      data: this.targetData,\n      title: titles[1] || i18n.t('el.transfer.titles.1'),\n      checked: rightChecked,\n      filterable: filterable,\n      filterMethod: filterMethod,\n      footerFormat: footerFormat,\n      renderContent: renderContent,\n      placeholder: filterPlaceholder || i18n.t('el.transfer.filterPlaceholder'),\n      onChange: this.onTargetCheckedChange\n    }, rightFooter));\n  };\n\n  _createClass(Transfer, [{\n    key: 'sourceData',\n    get: function get() {\n      var _props3 = this.props,\n          data = _props3.data,\n          value = _props3.value,\n          propsAlias = _props3.propsAlias;\n      return data.filter(function (item) {\n        return !value.includes(item[propsAlias.key]);\n      });\n    }\n  }, {\n    key: 'targetData',\n    get: function get() {\n      var _props4 = this.props,\n          data = _props4.data,\n          value = _props4.value,\n          propsAlias = _props4.propsAlias;\n      return data.filter(function (item) {\n        return value.includes(item[propsAlias.key]);\n      });\n    }\n  }]);\n\n  return Transfer;\n}(Component);\n\nTransfer.propTypes = {\n  data: PropTypes.array,\n  titles: PropTypes.array,\n  buttonTexts: PropTypes.array,\n  filterPlaceholder: PropTypes.string,\n  filterMethod: PropTypes.func,\n  leftDefaultChecked: PropTypes.array,\n  rightDefaultChecked: PropTypes.array,\n  renderContent: PropTypes.func,\n  value: PropTypes.array,\n  footerFormat: PropTypes.object,\n  filterable: PropTypes.bool,\n  propsAlias: PropTypes.object,\n  onChange: PropTypes.func,\n  leftFooter: PropTypes.node,\n  rightFooter: PropTypes.node\n};\nTransfer.defaultProps = {\n  data: [],\n  titles: [],\n  buttonTexts: [],\n  filterPlaceholder: '',\n  leftDefaultChecked: [],\n  rightDefaultChecked: [],\n  value: [],\n  footerFormat: {},\n  propsAlias: {\n    label: 'label',\n    key: 'key',\n    disabled: 'disabled'\n  },\n  onChange: function onChange() {}\n};\nexport default Transfer;","map":null,"metadata":{},"sourceType":"module"}