{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { Component, PropTypes } from '../../libs';\nimport calcTextareaHeight from './calcTextareaHeight';\n\nvar Input = function (_Component) {\n  _inherits(Input, _Component);\n\n  function Input(props) {\n    _classCallCheck(this, Input);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      textareaStyle: {\n        resize: props.resize\n      }\n    };\n    return _this;\n  }\n\n  Input.prototype.componentDidMount = function componentDidMount() {\n    this.resizeTextarea();\n  };\n  /* <Instance Methods */\n\n\n  Input.prototype.focus = function focus() {\n    var _this2 = this;\n\n    setTimeout(function () {\n      (_this2.refs.input || _this2.refs.textarea).focus();\n    });\n  };\n\n  Input.prototype.blur = function blur() {\n    var _this3 = this;\n\n    setTimeout(function () {\n      (_this3.refs.input || _this3.refs.textarea).blur();\n    });\n  };\n  /* Instance Methods> */\n\n\n  Input.prototype.fixControlledValue = function fixControlledValue(value) {\n    if (typeof value === 'undefined' || value === null) {\n      return '';\n    }\n\n    return value;\n  };\n\n  Input.prototype.handleChange = function handleChange(e) {\n    var onChange = this.props.onChange;\n\n    if (onChange) {\n      onChange(e.target.value);\n    }\n\n    this.resizeTextarea();\n  };\n\n  Input.prototype.handleFocus = function handleFocus(e) {\n    var onFocus = this.props.onFocus;\n    if (onFocus) onFocus(e);\n  };\n\n  Input.prototype.handleBlur = function handleBlur(e) {\n    var onBlur = this.props.onBlur;\n    if (this.props.trim) this.handleTrim();\n    if (onBlur) onBlur(e);\n  };\n\n  Input.prototype.handleTrim = function handleTrim() {\n    this.refs.input.value = this.refs.input.value.trim();\n\n    if (this.props.onChange) {\n      // this's for controlled components\n      this.props.onChange(this.refs.input.value.trim());\n    }\n  };\n\n  Input.prototype.handleIconClick = function handleIconClick(e) {\n    if (this.props.onIconClick) {\n      this.props.onIconClick(e);\n    }\n  };\n\n  Input.prototype.resizeTextarea = function resizeTextarea() {\n    var _props = this.props,\n        autosize = _props.autosize,\n        type = _props.type;\n\n    if (!autosize || type !== 'textarea') {\n      return;\n    }\n\n    var minRows = autosize.minRows;\n    var maxRows = autosize.maxRows;\n    var textareaCalcStyle = calcTextareaHeight(this.refs.textarea, minRows, maxRows);\n    this.setState({\n      textareaStyle: Object.assign({}, this.state.textareaStyle, textareaCalcStyle)\n    });\n  };\n\n  Input.prototype.render = function render() {\n    var _props2 = this.props,\n        type = _props2.type,\n        size = _props2.size,\n        prepend = _props2.prepend,\n        append = _props2.append,\n        icon = _props2.icon,\n        autoComplete = _props2.autoComplete,\n        validating = _props2.validating,\n        rows = _props2.rows,\n        onMouseEnter = _props2.onMouseEnter,\n        onMouseLeave = _props2.onMouseLeave,\n        trim = _props2.trim,\n        otherProps = _objectWithoutProperties(_props2, ['type', 'size', 'prepend', 'append', 'icon', 'autoComplete', 'validating', 'rows', 'onMouseEnter', 'onMouseLeave', 'trim']);\n\n    var classname = this.classNames(type === 'textarea' ? 'el-textarea' : 'el-input', size && 'el-input--' + size, {\n      'is-disabled': this.props.disabled,\n      'el-input-group': prepend || append,\n      'el-input-group--append': !!append,\n      'el-input-group--prepend': !!prepend\n    });\n\n    if ('value' in this.props) {\n      otherProps.value = this.fixControlledValue(this.props.value);\n      delete otherProps.defaultValue;\n    }\n\n    delete otherProps.resize;\n    delete otherProps.style;\n    delete otherProps.autosize;\n    delete otherProps.onIconClick;\n\n    if (type === 'textarea') {\n      return React.createElement('div', {\n        style: this.style(),\n        className: this.className(classname)\n      }, React.createElement('textarea', _extends({}, otherProps, {\n        ref: 'textarea',\n        className: 'el-textarea__inner',\n        style: this.state.textareaStyle,\n        rows: rows,\n        onChange: this.handleChange.bind(this),\n        onFocus: this.handleFocus.bind(this),\n        onBlur: this.handleBlur.bind(this)\n      })));\n    } else {\n      return React.createElement('div', {\n        style: this.style(),\n        className: this.className(classname),\n        onMouseEnter: onMouseEnter,\n        onMouseLeave: onMouseLeave\n      }, prepend && React.createElement('div', {\n        className: 'el-input-group__prepend'\n      }, prepend), typeof icon === 'string' ? React.createElement('i', {\n        className: 'el-input__icon el-icon-' + icon,\n        onClick: this.handleIconClick.bind(this)\n      }, prepend) : icon, React.createElement('input', _extends({}, otherProps, {\n        ref: 'input',\n        type: type,\n        className: 'el-input__inner',\n        autoComplete: autoComplete,\n        onChange: this.handleChange.bind(this),\n        onFocus: this.handleFocus.bind(this),\n        onBlur: this.handleBlur.bind(this)\n      })), validating && React.createElement('i', {\n        className: 'el-input__icon el-icon-loading'\n      }), append && React.createElement('div', {\n        className: 'el-input-group__append'\n      }, append));\n    }\n  };\n\n  return Input;\n}(Component);\n\nInput.defaultProps = {\n  type: 'text',\n  autosize: false,\n  rows: 2,\n  trim: false,\n  autoComplete: 'off'\n};\nexport default Input;\nInput.propTypes = {\n  // base\n  type: PropTypes.string,\n  icon: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),\n  disabled: PropTypes.bool,\n  name: PropTypes.string,\n  placeholder: PropTypes.string,\n  readOnly: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  maxLength: PropTypes.number,\n  minLength: PropTypes.number,\n  defaultValue: PropTypes.any,\n  value: PropTypes.any,\n  trim: PropTypes.bool,\n  // type !== 'textarea'\n  size: PropTypes.oneOf(['large', 'small', 'mini']),\n  prepend: PropTypes.node,\n  append: PropTypes.node,\n  // type === 'textarea'\n  autosize: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  rows: PropTypes.number,\n  resize: PropTypes.oneOf(['none', 'both', 'horizontal', 'vertical']),\n  // event\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func,\n  onIconClick: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  // autoComplete\n  autoComplete: PropTypes.string,\n  inputSelect: PropTypes.func,\n  // form related\n  form: PropTypes.string,\n  validating: PropTypes.bool\n};","map":null,"metadata":{},"sourceType":"module"}