{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { PropTypes } from '../../../libs';\nimport { limitRange } from '../utils';\nimport TimeSpinner from '../basic/TimeSpinner';\nimport Locale from '../../locale';\nimport { PopperBase } from './PopperBase';\n\nvar mapPropsToState = function mapPropsToState(props) {\n  var state = {\n    format: props.format || 'HH:mm:ss',\n    currentDate: props.currentDate || new Date()\n  };\n  state.isShowSeconds = (state.format || '').indexOf('ss') !== -1;\n  return state;\n};\n\nvar TimePanel = function (_PopperBase) {\n  _inherits(TimePanel, _PopperBase);\n\n  _createClass(TimePanel, null, [{\n    key: 'propTypes',\n    get: function get() {\n      return Object.assign({}, {\n        selectableRange: TimeSpinner.propTypes.selectableRange,\n        onSelectRangeChange: TimeSpinner.propTypes.onSelectRangeChange\n      }, {\n        pickerWidth: PropTypes.number,\n        currentDate: PropTypes.instanceOf(Date),\n\n        /*\n        onPicked: (value, isKeepPannelOpen)=>()\n         @param value: Date|null\n        @param isKeepPannelOpen:boolean, should parent close the pannel\n        */\n        onPicked: PropTypes.func.isRequired,\n        // cancel btn is clicked\n        //()=>()\n        onCancel: PropTypes.func.isRequired\n      }, PopperBase.propTypes);\n    }\n  }, {\n    key: 'defaultProps',\n    get: function get() {\n      return {\n        popperMixinOption: {}\n      };\n    }\n  }]);\n\n  function TimePanel(props) {\n    _classCallCheck(this, TimePanel);\n\n    var _this = _possibleConstructorReturn(this, _PopperBase.call(this, props));\n\n    _this.state = mapPropsToState(props);\n    return _this;\n  }\n\n  TimePanel.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    this.setState(mapPropsToState(nextProps));\n  }; // type: string,  one of [hours, minutes, seconds]\n  // date: {type: number}\n\n\n  TimePanel.prototype.handleChange = function handleChange(date) {\n    var currentDate = this.state.currentDate;\n\n    if (date.hours !== undefined) {\n      currentDate.setHours(date.hours);\n    }\n\n    if (date.minutes !== undefined) {\n      currentDate.setMinutes(date.minutes);\n    }\n\n    if (date.seconds !== undefined) {\n      currentDate.setSeconds(date.seconds);\n    }\n\n    this.setState({});\n    this.handleConfirm(true);\n  };\n\n  TimePanel.prototype.handleConfirm = function handleConfirm() {\n    var isKeepPannelOpen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var currentDate = this.state.currentDate;\n    var _props = this.props,\n        onPicked = _props.onPicked,\n        selectableRange = _props.selectableRange;\n    var date = new Date(limitRange(currentDate, selectableRange, 'HH:mm:ss'));\n    onPicked(date, isKeepPannelOpen);\n  };\n\n  TimePanel.prototype.render = function render() {\n    var _this2 = this;\n\n    var _state = this.state,\n        isShowSeconds = _state.isShowSeconds,\n        currentDate = _state.currentDate;\n    var _props2 = this.props,\n        onSelectRangeChange = _props2.onSelectRangeChange,\n        selectableRange = _props2.selectableRange;\n    var hours = currentDate.getHours();\n    var minutes = currentDate.getMinutes();\n    var seconds = currentDate.getSeconds();\n    var $t = Locale.t;\n    return React.createElement('div', {\n      ref: 'root',\n      className: 'el-time-panel'\n    }, React.createElement('div', {\n      className: this.classNames('el-time-panel__content', {\n        'has-seconds': isShowSeconds\n      })\n    }, React.createElement(TimeSpinner, {\n      ref: 'spinner',\n      onChange: this.handleChange.bind(this),\n      isShowSeconds: isShowSeconds,\n      hours: hours,\n      minutes: minutes,\n      seconds: seconds,\n      selectableRange: selectableRange,\n      onSelectRangeChange: onSelectRangeChange\n    })), React.createElement('div', {\n      className: 'el-time-panel__footer'\n    }, React.createElement('button', {\n      type: 'button',\n      className: 'el-time-panel__btn cancel',\n      onClick: function onClick() {\n        return _this2.props.onCancel();\n      }\n    }, $t('el.datepicker.cancel')), React.createElement('button', {\n      type: 'button',\n      className: 'el-time-panel__btn confirm',\n      onClick: function onClick() {\n        return _this2.handleConfirm();\n      }\n    }, $t('el.datepicker.confirm'))));\n  };\n\n  return TimePanel;\n}(PopperBase);\n\nexport default TimePanel;","map":null,"metadata":{},"sourceType":"module"}