{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { Component, PropTypes } from '../../../libs';\nimport draggable from '../draggable';\n\nvar AlphaSlider = function (_Component) {\n  _inherits(AlphaSlider, _Component);\n\n  function AlphaSlider(props) {\n    _classCallCheck(this, AlphaSlider);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      thumbLeft: 0,\n      thumbTop: 0,\n      background: null\n    };\n    return _this;\n  }\n\n  AlphaSlider.prototype.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    var _refs = this.refs,\n        bar = _refs.bar,\n        thumb = _refs.thumb;\n    var dragConfig = {\n      drag: function drag(event) {\n        _this2.handleDrag(event);\n      },\n      end: function end(event) {\n        _this2.handleDrag(event);\n      }\n    };\n    draggable(bar, dragConfig);\n    draggable(thumb, dragConfig);\n    this.update();\n  };\n\n  AlphaSlider.prototype.handleClick = function handleClick(event) {\n    var thumb = this.refs.thumb;\n    var target = event.target;\n\n    if (target !== thumb) {\n      this.handleDrag(event);\n    }\n  };\n\n  AlphaSlider.prototype.handleDrag = function handleDrag(event) {\n    var _props = this.props,\n        vertical = _props.vertical,\n        color = _props.color;\n    var onChange = this.context.onChange;\n    var rect = this.$el.getBoundingClientRect();\n    var thumb = this.refs.thumb;\n\n    if (!vertical) {\n      var left = event.clientX - rect.left;\n      left = Math.max(thumb.offsetWidth / 2, left);\n      left = Math.min(left, rect.width - thumb.offsetWidth / 2);\n      color.set('alpha', Math.round((left - thumb.offsetWidth / 2) / (rect.width - thumb.offsetWidth) * 100));\n    } else {\n      var top = event.clientY - rect.top;\n      top = Math.max(thumb.offsetHeight / 2, top);\n      top = Math.min(top, rect.height - thumb.offsetHeight / 2);\n      color.set('alpha', Math.round((top - thumb.offsetHeight / 2) / (rect.height - thumb.offsetHeight) * 100));\n    }\n\n    this.update();\n    onChange(color);\n  };\n\n  AlphaSlider.prototype.getThumbLeft = function getThumbLeft() {\n    var _props2 = this.props,\n        vertical = _props2.vertical,\n        color = _props2.color;\n    if (vertical) return 0;\n    var el = this.$el;\n    var alpha = color._alpha;\n    if (!el) return 0;\n    var thumb = this.refs.thumb;\n    return Math.round(alpha * (el.offsetWidth - thumb.offsetWidth / 2) / 100);\n  };\n\n  AlphaSlider.prototype.getThumbTop = function getThumbTop() {\n    var _props3 = this.props,\n        vertical = _props3.vertical,\n        color = _props3.color;\n    if (!vertical) return 0;\n    var el = this.$el;\n    var alpha = color._alpha;\n    if (!el) return 0;\n    var thumb = this.refs.thumb;\n    return Math.round(alpha * (el.offsetHeight - thumb.offsetHeight / 2) / 100);\n  };\n\n  AlphaSlider.prototype.getBackground = function getBackground() {\n    var color = this.props.color;\n\n    if (color && color.value) {\n      var _color$toRgb = color.toRgb(),\n          r = _color$toRgb.r,\n          g = _color$toRgb.g,\n          b = _color$toRgb.b;\n\n      return 'linear-gradient(to right, rgba(' + r + ', ' + g + ', ' + b + ', 0) 0%, rgba(' + r + ', ' + g + ', ' + b + ', 1) 100%)';\n    }\n\n    return null;\n  };\n\n  AlphaSlider.prototype.update = function update() {\n    this.setState({\n      thumbLeft: this.getThumbLeft(),\n      thumbTop: this.getThumbTop(),\n      background: this.getBackground()\n    });\n  };\n\n  AlphaSlider.prototype.render = function render() {\n    var _this3 = this;\n\n    var vertical = this.props.vertical;\n    var _state = this.state,\n        thumbLeft = _state.thumbLeft,\n        thumbTop = _state.thumbTop,\n        background = _state.background;\n    return React.createElement('div', {\n      ref: function ref(el) {\n        return _this3.$el = el;\n      },\n      className: this.classNames({\n        'el-color-alpha-slider': true,\n        'is-vertical': vertical\n      })\n    }, React.createElement('div', {\n      className: 'el-color-alpha-slider__bar',\n      onClick: function onClick(e) {\n        return _this3.handleClick(e);\n      },\n      ref: 'bar',\n      style: {\n        background: background\n      }\n    }), React.createElement('div', {\n      className: 'el-color-alpha-slider__thumb',\n      ref: 'thumb',\n      style: {\n        left: thumbLeft + 'px',\n        top: thumbTop + 'px'\n      }\n    }));\n  };\n\n  return AlphaSlider;\n}(Component);\n\nexport default AlphaSlider;\nAlphaSlider.contextTypes = {\n  onChange: PropTypes.func\n};\nAlphaSlider.propTypes = {\n  color: PropTypes.object.isRequired,\n  vertical: PropTypes.bool\n};","map":null,"metadata":{},"sourceType":"module"}