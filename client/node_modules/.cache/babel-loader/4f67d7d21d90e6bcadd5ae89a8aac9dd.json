{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { PropTypes } from '../../../libs';\nimport { scrollIntoView } from '../../../libs/utils/dom';\nimport { Scrollbar } from '../../scrollbar';\nimport { PopperBase } from './PopperBase';\n\nvar TimeSelectPanel = function (_PopperBase) {\n  _inherits(TimeSelectPanel, _PopperBase);\n\n  _createClass(TimeSelectPanel, null, [{\n    key: 'propTypes',\n    get: function get() {\n      return Object.assign({\n        start: PropTypes.string,\n        end: PropTypes.string,\n        step: PropTypes.string,\n        minTime: PropTypes.string,\n        maxTime: PropTypes.string,\n        value: PropTypes.string,\n        onPicked: PropTypes.func,\n        //(string)=>date\n        dateParser: PropTypes.func.isRequired,\n        //()=>HtmlElement\n        getPopperRefElement: PropTypes.func,\n        popperMixinOption: PropTypes.object\n      }, PopperBase.propTypes);\n    }\n  }]);\n\n  function TimeSelectPanel(props) {\n    _classCallCheck(this, TimeSelectPanel);\n\n    return _possibleConstructorReturn(this, _PopperBase.call(this, props));\n  }\n\n  TimeSelectPanel.prototype.handleClick = function handleClick(item) {\n    var _props = this.props,\n        onPicked = _props.onPicked,\n        dateParser = _props.dateParser;\n\n    if (!item.disabled) {\n      onPicked(dateParser(item.value));\n    }\n  };\n\n  TimeSelectPanel.prototype.items = function items() {\n    return TimeSelectPanel.items(this.props);\n  };\n\n  TimeSelectPanel.prototype.scrollToOption = function scrollToOption() {\n    var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'selected';\n    var menu = this.refs.root.querySelector('.el-picker-panel__content');\n    scrollIntoView(menu, menu.getElementsByClassName(className)[0]);\n  };\n\n  TimeSelectPanel.prototype.componentDidMount = function componentDidMount() {\n    this.scrollToOption();\n  };\n\n  TimeSelectPanel.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var _this2 = this;\n\n    clearTimeout(this._timer);\n\n    if (nextProps.value !== this.props.value) {\n      this._timer = setTimeout(function () {\n        return _this2.scrollToOption();\n      }, 0);\n    }\n  };\n\n  TimeSelectPanel.prototype.render = function render() {\n    var _this3 = this;\n\n    var value = this.props.value;\n    return React.createElement('div', {\n      ref: 'root',\n      className: 'el-picker-panel time-select'\n    }, React.createElement(Scrollbar, {\n      wrapClass: 'el-picker-panel__content',\n      noresize: true\n    }, this.items().map(function (item, idx) {\n      return React.createElement('div', {\n        key: idx,\n        className: _this3.classNames('time-select-item', {\n          selected: value === item.value,\n          disabled: item.disabled\n        }),\n        disabled: item.disabled,\n        onClick: function onClick() {\n          return _this3.handleClick(item);\n        }\n      }, item.value);\n    })));\n  };\n\n  return TimeSelectPanel;\n}(PopperBase);\n\nexport default TimeSelectPanel;\n\nTimeSelectPanel.isValid = function (value, _ref) {\n  var start = _ref.start,\n      end = _ref.end,\n      step = _ref.step,\n      minTime = _ref.minTime,\n      maxTime = _ref.maxTime;\n  var items = TimeSelectPanel.items({\n    start: start,\n    end: end,\n    step: step,\n    minTime: minTime,\n    maxTime: maxTime\n  });\n  return !!items.filter(function (e) {\n    return !e.disabled;\n  }).find(function (e) {\n    return e.value === value;\n  });\n};\n\nTimeSelectPanel.items = function (_ref2) {\n  var start = _ref2.start,\n      end = _ref2.end,\n      step = _ref2.step,\n      minTime = _ref2.minTime,\n      maxTime = _ref2.maxTime;\n  var result = [];\n\n  if (start && end && step) {\n    var current = start;\n\n    while (compareTime(current, end) <= 0) {\n      result.push({\n        value: current,\n        disabled: compareTime(current, minTime || '-1:-1') <= 0 || compareTime(current, maxTime || '100:100') >= 0\n      });\n      current = nextTime(current, step);\n    }\n  }\n\n  return result;\n};\n\nTimeSelectPanel.defaultProps = {\n  start: '09:00',\n  end: '18:00',\n  step: '00:30',\n  minTime: '',\n  onPicked: function onPicked() {},\n  popperMixinOption: {}\n};\n\nvar parseTime = function parseTime(time) {\n  var values = (time || '').split(':');\n\n  if (values.length >= 2) {\n    var hours = parseInt(values[0], 10);\n    var minutes = parseInt(values[1], 10);\n    return {\n      hours: hours,\n      minutes: minutes\n    };\n  }\n  /* istanbul ignore next */\n\n\n  return null;\n};\n\nvar compareTime = function compareTime(time1, time2) {\n  var value1 = parseTime(time1);\n  var value2 = parseTime(time2);\n  var minutes1 = value1.minutes + value1.hours * 60;\n  var minutes2 = value2.minutes + value2.hours * 60;\n\n  if (minutes1 === minutes2) {\n    return 0;\n  }\n\n  return minutes1 > minutes2 ? 1 : -1;\n};\n\nvar formatTime = function formatTime(time) {\n  return (time.hours < 10 ? '0' + time.hours : time.hours) + ':' + (time.minutes < 10 ? '0' + time.minutes : time.minutes);\n};\n\nvar nextTime = function nextTime(time, step) {\n  var timeValue = parseTime(time);\n  var stepValue = parseTime(step);\n  var next = {\n    hours: timeValue.hours,\n    minutes: timeValue.minutes\n  };\n  next.minutes += stepValue.minutes;\n  next.hours += stepValue.hours;\n  next.hours += Math.floor(next.minutes / 60);\n  next.minutes = next.minutes % 60;\n  return formatTime(next);\n};","map":null,"metadata":{},"sourceType":"module"}