{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { Component, PropTypes } from '../../../libs';\nimport draggable from '../draggable';\n\nvar SvPanel = function (_Component) {\n  _inherits(SvPanel, _Component);\n\n  function SvPanel(props) {\n    _classCallCheck(this, SvPanel);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      cursorTop: 0,\n      cursorLeft: 0,\n      background: 'hsl(0, 100%, 50%)'\n    };\n    return _this;\n  }\n\n  SvPanel.prototype.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    var dragConfig = {\n      drag: function drag(event) {\n        _this2.handleDrag(event);\n      },\n      end: function end(event) {\n        _this2.handleDrag(event);\n      }\n    };\n    draggable(this.$el, dragConfig);\n    this.update();\n  };\n\n  SvPanel.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var background = this.state.background;\n    var newBackground = 'hsl(' + nextProps.color.get('hue') + ', 100%, 50%)';\n\n    if (newBackground !== background) {\n      this.update(nextProps);\n    }\n  };\n\n  SvPanel.prototype.update = function update(props) {\n    var _ref = props || this.props,\n        color = _ref.color;\n\n    var saturation = color.get('saturation');\n    var value = color.get('value');\n    var el = this.$el;\n\n    var _el$getBoundingClient = el.getBoundingClientRect(),\n        width = _el$getBoundingClient.width,\n        height = _el$getBoundingClient.height;\n\n    if (!height) height = width * 3 / 4;\n    this.setState({\n      cursorLeft: saturation * width / 100,\n      cursorTop: (100 - value) * height / 100,\n      background: 'hsl(' + color.get('hue') + ', 100%, 50%)'\n    });\n  };\n\n  SvPanel.prototype.handleDrag = function handleDrag(event) {\n    var color = this.props.color;\n    var onChange = this.context.onChange;\n    var el = this.$el;\n    var rect = el.getBoundingClientRect();\n    var left = event.clientX - rect.left;\n    var top = event.clientY - rect.top;\n    left = Math.max(0, left);\n    left = Math.min(left, rect.width);\n    top = Math.max(0, top);\n    top = Math.min(top, rect.height);\n    this.setState({\n      cursorLeft: left,\n      cursorTop: top,\n      background: 'hsl(' + color.get('hue') + ', 100%, 50%)'\n    }, function () {\n      color.set({\n        saturation: left / rect.width * 100,\n        value: 100 - top / rect.height * 100\n      });\n      onChange(color);\n    });\n  };\n\n  SvPanel.prototype.render = function render() {\n    var _this3 = this;\n\n    var _state = this.state,\n        cursorTop = _state.cursorTop,\n        cursorLeft = _state.cursorLeft,\n        background = _state.background;\n    return React.createElement('div', {\n      className: 'el-color-svpanel',\n      style: {\n        backgroundColor: background\n      },\n      ref: function ref(el) {\n        return _this3.$el = el;\n      }\n    }, React.createElement('div', {\n      className: 'el-color-svpanel__white'\n    }), React.createElement('div', {\n      className: 'el-color-svpanel__black'\n    }), React.createElement('div', {\n      className: 'el-color-svpanel__cursor',\n      style: {\n        top: cursorTop + 'px',\n        left: cursorLeft + 'px'\n      }\n    }, React.createElement('div', null)));\n  };\n\n  return SvPanel;\n}(Component);\n\nexport default SvPanel;\nSvPanel.contextTypes = {\n  onChange: PropTypes.func\n};\nSvPanel.propTypes = {\n  color: PropTypes.object.isRequired\n};","map":null,"metadata":{},"sourceType":"module"}