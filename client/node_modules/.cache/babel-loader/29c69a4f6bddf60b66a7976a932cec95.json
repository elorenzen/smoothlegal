{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { Component, View, Transition, PropTypes } from '../../libs';\nimport { cleanScrollBar } from '../table/utils';\n\nvar Dialog = function (_Component) {\n  _inherits(Dialog, _Component);\n\n  function Dialog(props) {\n    _classCallCheck(this, Dialog);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.wrap = React.createRef();\n    _this.state = {\n      bodyOverflow: ''\n    };\n    return _this;\n  }\n\n  Dialog.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var bodyOverflow = this.state.bodyOverflow;\n    var _props = this.props,\n        lockScroll = _props.lockScroll,\n        modal = _props.modal;\n\n    if (this.willOpen(this.props, nextProps)) {\n      cleanScrollBar();\n\n      if (lockScroll && document.body && document.body.style) {\n        if (!bodyOverflow) {\n          this.setState({\n            bodyOverflow: document.body.style.overflow\n          });\n        }\n\n        document.body.style.overflow = 'hidden';\n      }\n    }\n\n    if (this.willClose(this.props, nextProps) && lockScroll) {\n      if (modal && bodyOverflow !== 'hidden' && document.body && document.body.style) {\n        document.body.style.overflow = bodyOverflow;\n      }\n    }\n  };\n\n  Dialog.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (this.willOpen(prevProps, this.props)) {\n      this.wrap.current.focus();\n    }\n  };\n\n  Dialog.prototype.componentWillUnmount = function componentWillUnmount() {\n    var lockScroll = this.props.lockScroll;\n\n    if (lockScroll && document.body && document.body.style) {\n      document.body.style.removeProperty('overflow');\n    }\n  };\n\n  Dialog.prototype.onKeyDown = function onKeyDown(e) {\n    var closeOnPressEscape = this.props.closeOnPressEscape;\n\n    if (closeOnPressEscape && e.keyCode === 27) {\n      this.close(e);\n    }\n  };\n\n  Dialog.prototype.handleWrapperClick = function handleWrapperClick(e) {\n    var closeOnClickModal = this.props.closeOnClickModal;\n\n    if (e.target instanceof HTMLDivElement) {\n      if (closeOnClickModal && e.target === e.currentTarget) {\n        this.close(e);\n      }\n    }\n  };\n\n  Dialog.prototype.close = function close(e) {\n    this.props.onCancel(e);\n  };\n\n  Dialog.prototype.willOpen = function willOpen(prevProps, nextProps) {\n    return !prevProps.visible && nextProps.visible;\n  };\n\n  Dialog.prototype.willClose = function willClose(prevProps, nextProps) {\n    return prevProps.visible && !nextProps.visible;\n  };\n\n  Dialog.prototype.render = function render() {\n    var _this2 = this;\n\n    var _props2 = this.props,\n        visible = _props2.visible,\n        title = _props2.title,\n        size = _props2.size,\n        top = _props2.top,\n        modal = _props2.modal,\n        customClass = _props2.customClass,\n        showClose = _props2.showClose,\n        children = _props2.children;\n    return React.createElement('div', null, React.createElement(Transition, {\n      name: 'dialog-fade'\n    }, React.createElement(View, {\n      show: visible\n    }, React.createElement('div', {\n      ref: this.wrap,\n      style: {\n        zIndex: 1013\n      },\n      className: this.classNames('el-dialog__wrapper'),\n      onClick: function onClick(e) {\n        return _this2.handleWrapperClick(e);\n      },\n      onKeyDown: function onKeyDown(e) {\n        return _this2.onKeyDown(e);\n      }\n    }, React.createElement('div', {\n      ref: 'dialog',\n      style: this.style(size === 'full' ? {} : {\n        'top': top\n      }),\n      className: this.className(\"el-dialog\", 'el-dialog--' + size, customClass)\n    }, React.createElement('div', {\n      className: 'el-dialog__header'\n    }, React.createElement('span', {\n      className: 'el-dialog__title'\n    }, title), showClose && React.createElement('button', {\n      type: 'button',\n      className: 'el-dialog__headerbtn',\n      onClick: function onClick(e) {\n        return _this2.close(e);\n      }\n    }, React.createElement('i', {\n      className: 'el-dialog__close el-icon el-icon-close'\n    }))), children)))), modal && React.createElement(View, {\n      show: visible\n    }, React.createElement('div', {\n      className: 'v-modal',\n      style: {\n        zIndex: 1012\n      }\n    })));\n  };\n\n  return Dialog;\n}(Component);\n\nDialog.defaultProps = {\n  visible: false,\n  title: '',\n  size: 'small',\n  top: '15%',\n  modal: true,\n  lockScroll: true,\n  closeOnClickModal: true,\n  closeOnPressEscape: true,\n  showClose: true\n};\nexport default Dialog;\nDialog.propTypes = {\n  // 控制对话框是否可见\n  visible: PropTypes.bool.isRequired,\n  // 标题\n  title: PropTypes.string,\n  // 大小 (tiny/small/large/full)\n  size: PropTypes.string,\n  // top 值（仅在 size 不为 full 时有效）\n  top: PropTypes.string,\n  // 控制遮罩层展示\n  modal: PropTypes.bool,\n  // Dialog 的自定义类名\n  customClass: PropTypes.string,\n  // 是否在 Dialog 出现时将 body 滚动锁定\n  lockScroll: PropTypes.bool,\n  // 是否可以通过点击 modal 关闭 Dialog\n  closeOnClickModal: PropTypes.bool,\n  // 是否可以通过按下 ESC 关闭 Dialog\n  closeOnPressEscape: PropTypes.bool,\n  // 点击遮罩层或右上角叉或取消按钮的回调\n  onCancel: PropTypes.func.isRequired,\n  showClose: PropTypes.bool\n};","map":null,"metadata":{},"sourceType":"module"}