{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport Popper from 'popper.js';\nimport { Component, PropTypes, Transition, View } from '../../libs';\n\nvar Tooltip = function (_Component) {\n  _inherits(Tooltip, _Component);\n\n  function Tooltip(props) {\n    _classCallCheck(this, Tooltip);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      showPopper: false\n    };\n    return _this;\n  }\n\n  Tooltip.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {\n    if (props.visible !== this.props.visible) {\n      this.setState({\n        showPopper: props.visible\n      });\n    }\n  };\n\n  Tooltip.prototype.showPopper = function showPopper() {\n    var _this2 = this;\n\n    if (!this.props.manual) {\n      this.timeout = setTimeout(function () {\n        _this2.setState({\n          showPopper: true\n        });\n      }, this.props.openDelay);\n    }\n  };\n\n  Tooltip.prototype.hidePopper = function hidePopper() {\n    if (!this.props.manual) {\n      clearTimeout(this.timeout);\n      this.setState({\n        showPopper: false\n      });\n    }\n  };\n\n  Tooltip.prototype.onEnter = function onEnter() {\n    var _refs = this.refs,\n        popper = _refs.popper,\n        reference = _refs.reference,\n        arrow = _refs.arrow;\n\n    if (arrow) {\n      arrow.setAttribute('x-arrow', '');\n    }\n\n    this.popperJS = new Popper(reference, popper, {\n      placement: this.props.placement,\n      modifiers: {\n        computeStyle: {\n          gpuAcceleration: false\n        }\n      }\n    });\n  };\n\n  Tooltip.prototype.onAfterLeave = function onAfterLeave() {\n    this.popperJS.destroy();\n  };\n\n  Tooltip.prototype.render = function render() {\n    var _props = this.props,\n        effect = _props.effect,\n        content = _props.content,\n        disabled = _props.disabled,\n        transition = _props.transition,\n        visibleArrow = _props.visibleArrow;\n    return React.createElement('div', {\n      style: this.style(),\n      className: this.className('el-tooltip'),\n      onMouseEnter: this.showPopper.bind(this),\n      onMouseLeave: this.hidePopper.bind(this)\n    }, React.createElement('div', {\n      ref: 'reference',\n      className: 'el-tooltip__rel'\n    }, React.createElement('div', null, this.props.children)), !disabled && React.createElement(Transition, {\n      name: transition,\n      onEnter: this.onEnter.bind(this),\n      onAfterLeave: this.onAfterLeave.bind(this)\n    }, React.createElement(View, {\n      show: this.state.showPopper\n    }, React.createElement('div', {\n      ref: 'popper',\n      className: this.classNames(\"el-tooltip__popper\", 'is-' + effect)\n    }, React.createElement('div', null, content), visibleArrow && React.createElement('div', {\n      ref: 'arrow',\n      className: 'popper__arrow'\n    })))));\n  };\n\n  return Tooltip;\n}(Component);\n\nTooltip.defaultProps = {\n  effect: \"dark\",\n  placement: \"bottom\",\n  disabled: false,\n  transition: \"fade-in-linear\",\n  visibleArrow: true,\n  openDelay: 0,\n  manual: false\n};\nexport default Tooltip;\nTooltip.propTypes = {\n  // 默认提供的主题: dark, light\n  effect: PropTypes.string,\n  // 显示的内容，也可以通过 slot#content 传入 DOM\n  content: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  // Tooltip 的出现位置 [top, top-start, top-end, bottom, bottom-start, bottom-end, left, left-start, left-end, right, right-start, right-end]\n  placement: PropTypes.oneOf(['top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'left-start', 'left-end', 'right', 'right-start', 'right-end']),\n  // 状态是否可用\n  disabled: PropTypes.bool,\n  // 渐变动画定义\n  transition: PropTypes.string,\n  // 是否显示 Tooltip 箭头\n  visibleArrow: PropTypes.bool,\n  // 延迟出现(单位: 毫秒)\n  openDelay: PropTypes.number,\n  // 手动控制模式，设置为 true 后，mouseenter 和 mouseleave 事件将不会生效\n  manual: PropTypes.bool,\n  // 手动控制状态的展示\n  visible: PropTypes.bool\n};","map":null,"metadata":{},"sourceType":"module"}