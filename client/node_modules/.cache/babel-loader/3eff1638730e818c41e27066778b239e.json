{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { Component, PropTypes } from '../../libs';\n\nvar Progress = function (_Component) {\n  _inherits(Progress, _Component);\n\n  function Progress(props) {\n    _classCallCheck(this, Progress);\n\n    return _possibleConstructorReturn(this, _Component.call(this, props));\n  }\n\n  Progress.prototype.relativeStrokeWidth = function relativeStrokeWidth() {\n    var _props = this.props,\n        strokeWidth = _props.strokeWidth,\n        width = _props.width;\n    return (strokeWidth / width * 100).toFixed(1);\n  };\n\n  Progress.prototype.trackPath = function trackPath() {\n    var radius = parseInt(50 - parseFloat(this.relativeStrokeWidth()) / 2, 10);\n    return 'M 50 50 m 0 -' + radius + ' a ' + radius + ' ' + radius + ' 0 1 1 0 ' + radius * 2 + ' a ' + radius + ' ' + radius + ' 0 1 1 0 -' + radius * 2;\n  };\n\n  Progress.prototype.perimeter = function perimeter() {\n    var radius = 50 - parseFloat(this.relativeStrokeWidth()) / 2;\n    return 2 * Math.PI * radius;\n  };\n\n  Progress.prototype.circlePathStyle = function circlePathStyle() {\n    var perimeter = this.perimeter();\n    return {\n      strokeDasharray: perimeter + 'px,' + perimeter + 'px',\n      strokeDashoffset: (1 - this.props.percentage / 100) * perimeter + 'px',\n      transition: 'stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease'\n    };\n  };\n\n  Progress.prototype.stroke = function stroke() {\n    var ret = void 0;\n\n    switch (this.props.status) {\n      case 'success':\n        ret = '#13ce66';\n        break;\n\n      case 'exception':\n        ret = '#ff4949';\n        break;\n\n      default:\n        ret = '#20a0ff';\n    }\n\n    return ret;\n  };\n\n  Progress.prototype.iconClass = function iconClass() {\n    var _props2 = this.props,\n        type = _props2.type,\n        status = _props2.status;\n    return type === 'line' ? status === 'success' ? 'el-icon-circle-check' : 'el-icon-circle-cross' : status === 'success' ? 'el-icon-check' : 'el-icon-close';\n  };\n\n  Progress.prototype.progressTextSize = function progressTextSize() {\n    var _props3 = this.props,\n        type = _props3.type,\n        strokeWidth = _props3.strokeWidth,\n        width = _props3.width;\n    return type === 'line' ? 12 + strokeWidth * 0.4 : width * 0.111111 + 2;\n  };\n\n  Progress.prototype.render = function render() {\n    var _className;\n\n    var _props4 = this.props,\n        type = _props4.type,\n        percentage = _props4.percentage,\n        status = _props4.status,\n        strokeWidth = _props4.strokeWidth,\n        textInside = _props4.textInside,\n        width = _props4.width,\n        showText = _props4.showText;\n    var progress = void 0;\n\n    if (type === 'line') {\n      progress = React.createElement('div', {\n        className: 'el-progress-bar'\n      }, React.createElement('div', {\n        className: 'el-progress-bar__outer',\n        style: {\n          height: strokeWidth + 'px'\n        }\n      }, React.createElement('div', {\n        className: 'el-progress-bar__inner',\n        style: {\n          width: percentage + '%'\n        }\n      }, showText && textInside && React.createElement('div', {\n        className: 'el-progress-bar__innerText'\n      }, percentage + '%'))));\n    } else {\n      progress = React.createElement('div', {\n        className: 'el-progress-circle',\n        style: {\n          height: width + 'px',\n          width: width + 'px'\n        }\n      }, React.createElement('svg', {\n        viewBox: '0 0 100 100'\n      }, React.createElement('path', {\n        className: 'el-progress-circle__track',\n        d: this.trackPath(),\n        stroke: '#e5e9f2',\n        strokeWidth: this.relativeStrokeWidth(),\n        fill: 'none'\n      }), React.createElement('path', {\n        className: 'el-progress-circle__path',\n        d: this.trackPath(),\n        strokeLinecap: 'round',\n        stroke: this.stroke(),\n        strokeWidth: this.relativeStrokeWidth(),\n        fill: 'none',\n        style: this.circlePathStyle()\n      })));\n    }\n\n    var progressInfo = showText && !textInside && React.createElement('div', {\n      className: 'el-progress__text',\n      style: {\n        fontSize: this.progressTextSize() + 'px'\n      }\n    }, status ? React.createElement('i', {\n      className: this.iconClass()\n    }) : percentage + '%');\n    return React.createElement('div', {\n      style: this.style(),\n      className: this.className('el-progress', 'el-progress--' + type, (_className = {}, _className['is-' + status] = !!status, _className['el-progress--without-text'] = !showText, _className['el-progress--text-inside'] = textInside, _className))\n    }, progress, progressInfo);\n  };\n\n  return Progress;\n}(Component);\n\nProgress.defaultProps = {\n  type: 'line',\n  percentage: 0,\n  strokeWidth: 6,\n  width: 126,\n  showText: true,\n  textInside: false\n};\nexport default Progress;\nProgress.propTypes = {\n  type: PropTypes.oneOf(['line', 'circle']),\n  percentage: PropTypes.range(0, 100).isRequired,\n  status: PropTypes.string,\n  strokeWidth: PropTypes.number,\n  width: PropTypes.number,\n  textInside: PropTypes.bool,\n  showText: PropTypes.bool\n};","map":null,"metadata":{},"sourceType":"module"}