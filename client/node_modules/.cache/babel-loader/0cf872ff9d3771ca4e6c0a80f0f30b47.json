{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport { Component, PropTypes, Animate, View } from '../../libs';\nvar Transition = Animate.Transition;\nvar typeMap = {\n  success: 'circle-check',\n  info: 'information',\n  warning: 'warning',\n  error: 'circle-cross'\n};\n\nvar Notification = function (_Component) {\n  _inherits(Notification, _Component);\n\n  function Notification(props) {\n    _classCallCheck(this, Notification);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      visible: true\n    };\n    return _this;\n  }\n\n  Notification.prototype.componentDidMount = function componentDidMount() {\n    this.startTimer();\n  };\n\n  Notification.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.stopTimer();\n  };\n\n  Notification.prototype.onClick = function onClick() {\n    if (this.props.onClick) {\n      this.props.onClick();\n    }\n  };\n\n  Notification.prototype.onClose = function onClose() {\n    var _this2 = this;\n\n    this.setState({\n      visible: false\n    }, function () {\n      return _this2.stopTimer();\n    });\n  };\n\n  Notification.prototype.startTimer = function startTimer() {\n    var _this3 = this;\n\n    var duration = this.props.duration;\n\n    if (duration) {\n      this.timeout = setTimeout(function () {\n        return _this3.onClose();\n      }, duration);\n    }\n  };\n\n  Notification.prototype.stopTimer = function stopTimer() {\n    clearTimeout(this.timeout);\n  };\n\n  Notification.prototype.typeClass = function typeClass() {\n    var type = this.props.type;\n    return type && typeMap[type] ? 'el-icon-' + typeMap[type] : '';\n  };\n\n  Notification.prototype.render = function render() {\n    var _this4 = this;\n\n    var visible = this.state.visible;\n    var _props = this.props,\n        _props$onClose = _props.onClose,\n        onClose = _props$onClose === undefined ? function () {\n      return false;\n    } : _props$onClose,\n        willUnmount = _props.willUnmount,\n        duration = _props.duration,\n        top = _props.top,\n        type = _props.type,\n        iconClass = _props.iconClass,\n        title = _props.title,\n        message = _props.message;\n    return React.createElement(Transition, {\n      unmountOnExit: true,\n      transitionClass: {\n        exiting: 'el-notification-fade-leave-active',\n        exited: 'el-notification-fade-enter'\n      },\n      'in': visible,\n      onEnter: function onEnter() {\n        _this4.offsetHeight = _this4.rootDOM.offsetHeight;\n      },\n      onExit: function onExit() {\n        return willUnmount(_this4.offsetHeight, parseInt(_this4.rootDOM.style.top));\n      },\n      onExited: function onExited() {\n        return onClose();\n      }\n    }, React.createElement(View, {\n      show: visible\n    }, React.createElement('div', {\n      ref: function ref(ele) {\n        _this4.rootDOM = ele;\n      },\n      className: 'el-notification',\n      style: {\n        top: top,\n        zIndex: 9999\n      },\n      onMouseEnter: this.stopTimer.bind(this),\n      onMouseLeave: this.startTimer.bind(this),\n      onClick: this.onClick.bind(this)\n    }, type && React.createElement('i', {\n      className: this.classNames('el-notification__icon', this.typeClass(), iconClass)\n    }), React.createElement('div', {\n      className: this.classNames('el-notification__group', {\n        'is-with-icon': this.typeClass() || iconClass\n      })\n    }, React.createElement('h2', {\n      className: 'el-notification__title'\n    }, title), React.createElement('div', {\n      className: 'el-notification__content'\n    }, message), React.createElement('div', {\n      className: 'el-notification__closeBtn el-icon-close',\n      onClick: this.onClose.bind(this)\n    })))));\n  };\n\n  return Notification;\n}(Component);\n\nexport default Notification;\nNotification.propTypes = {\n  type: PropTypes.oneOf(['success', 'warning', 'info', 'error']),\n  title: PropTypes.string,\n  message: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  duration: PropTypes.number,\n  iconClass: PropTypes.string,\n  onClick: PropTypes.func,\n  top: PropTypes.number\n};\nNotification.defaultProps = {\n  duration: 4500,\n  top: 16\n};","map":null,"metadata":{},"sourceType":"module"}