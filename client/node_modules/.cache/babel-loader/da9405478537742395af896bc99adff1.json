{"ast":null,"code":"import _typeof from 'babel-runtime/helpers/typeof';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport Node from './node';\nimport { getNodeKey } from './util';\n\nvar TreeStore = function () {\n  function TreeStore(options) {\n    var _this = this;\n\n    _classCallCheck(this, TreeStore);\n\n    this.currentNode = null;\n    this.currentNodeKey = null;\n\n    for (var option in options) {\n      if (options.hasOwnProperty(option)) {\n        this[option] = options[option];\n      }\n    }\n\n    this.nodesMap = {};\n    this.root = new Node({\n      data: this.data,\n      store: this\n    });\n\n    if (this.lazy && this.load) {\n      var loadFn = this.load;\n      loadFn(this.root, function (data) {\n        _this.root.doCreateChildren(data);\n\n        _this._initDefaultCheckedNodes();\n      });\n    } else {\n      this._initDefaultCheckedNodes();\n    }\n  }\n\n  TreeStore.prototype.filter = function filter(value) {\n    var filterNodeMethod = this.filterNodeMethod;\n\n    var traverse = function traverse(node) {\n      var childNodes = node.root ? node.root.childNodes : node.childNodes;\n      childNodes.forEach(function (child) {\n        child.visible = filterNodeMethod.call(child, value, child.data, child);\n        traverse(child);\n      });\n\n      if (!node.visible && childNodes.length) {\n        var allHidden = true;\n        childNodes.forEach(function (child) {\n          if (child.visible) allHidden = false;\n        });\n\n        if (node.root) {\n          node.root.visible = allHidden === false;\n        } else {\n          node.visible = allHidden === false;\n        }\n      }\n\n      if (node.visible && !node.isLeaf) node.expand();\n    };\n\n    traverse(this);\n  };\n\n  TreeStore.prototype.setData = function setData(newVal) {\n    var instanceChanged = newVal !== this.root.data;\n    this.root.setData(newVal);\n\n    if (instanceChanged) {\n      this._initDefaultCheckedNodes();\n    }\n  };\n\n  TreeStore.prototype.getNode = function getNode(data) {\n    var key = (typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object' ? data : getNodeKey(this.key, data);\n    return this.nodesMap[key];\n  };\n\n  TreeStore.prototype.insertBefore = function insertBefore(data, refData) {\n    var refNode = this.getNode(refData);\n    refNode.parent.insertBefore({\n      data: data\n    }, refNode);\n  };\n\n  TreeStore.prototype.insertAfter = function insertAfter(data, refData) {\n    var refNode = this.getNode(refData);\n    refNode.parent.insertAfter({\n      data: data\n    }, refNode);\n  };\n\n  TreeStore.prototype.remove = function remove(data) {\n    var node = this.getNode(data);\n\n    if (node) {\n      node.parent.removeChild(node);\n    }\n  };\n\n  TreeStore.prototype.append = function append(data, parentData) {\n    var parentNode = parentData ? this.getNode(parentData) : this.root;\n\n    if (parentNode) {\n      parentNode.insertChild({\n        data: data\n      });\n    }\n  };\n\n  TreeStore.prototype._initDefaultCheckedNodes = function _initDefaultCheckedNodes() {\n    var _this2 = this;\n\n    var defaultCheckedKeys = this.defaultCheckedKeys || [];\n    var nodesMap = this.nodesMap;\n    defaultCheckedKeys.forEach(function (checkedKey) {\n      var node = nodesMap[checkedKey];\n\n      if (node) {\n        node.setChecked(true, !_this2.checkStrictly);\n      }\n    });\n  };\n\n  TreeStore.prototype._initDefaultCheckedNode = function _initDefaultCheckedNode(node) {\n    var defaultCheckedKeys = this.defaultCheckedKeys || [];\n\n    if (defaultCheckedKeys.indexOf(node.key) !== -1) {\n      node.setChecked(true, !this.checkStrictly);\n    }\n  };\n\n  TreeStore.prototype.setDefaultCheckedKey = function setDefaultCheckedKey(newVal) {\n    if (newVal !== this.defaultCheckedKeys) {\n      this.defaultCheckedKeys = newVal;\n\n      this._initDefaultCheckedNodes();\n    }\n  };\n\n  TreeStore.prototype.registerNode = function registerNode(node) {\n    var key = this.key;\n    if (!key || !node || !node.data) return;\n    var nodeKey = node.key;\n    if (nodeKey !== undefined) this.nodesMap[node.key] = node;\n  };\n\n  TreeStore.prototype.deregisterNode = function deregisterNode(node) {\n    var key = this.key;\n    if (!key || !node || !node.data) return;\n    delete this.nodesMap[node.key];\n  };\n\n  TreeStore.prototype.getCheckedNodes = function getCheckedNodes() {\n    var leafOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var checkedNodes = [];\n\n    var traverse = function traverse(node) {\n      var childNodes = node.root ? node.root.childNodes : node.childNodes;\n      childNodes.forEach(function (child) {\n        if (!leafOnly && child.checked || leafOnly && child.isLeaf && child.checked) {\n          checkedNodes.push(child.data);\n        }\n\n        traverse(child);\n      });\n    };\n\n    traverse(this);\n    return checkedNodes;\n  };\n\n  TreeStore.prototype.getCheckedKeys = function getCheckedKeys() {\n    var leafOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var key = this.key;\n\n    var allNodes = this._getAllNodes();\n\n    var keys = [];\n    allNodes.forEach(function (node) {\n      if (!leafOnly || leafOnly && node.isLeaf) {\n        if (node.checked) {\n          keys.push((node.data || {})[key]);\n        }\n      }\n    });\n    return keys;\n  };\n\n  TreeStore.prototype._getAllNodes = function _getAllNodes() {\n    var allNodes = [];\n    var nodesMap = this.nodesMap;\n\n    for (var nodeKey in nodesMap) {\n      if (nodesMap.hasOwnProperty(nodeKey)) {\n        allNodes.push(nodesMap[nodeKey]);\n      }\n    }\n\n    return allNodes;\n  };\n\n  TreeStore.prototype._setCheckedKeys = function _setCheckedKeys(key) {\n    var _this3 = this;\n\n    var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var checkedKeys = arguments[2];\n\n    var allNodes = this._getAllNodes();\n\n    allNodes.sort(function (a, b) {\n      return b.level - a.level;\n    });\n    var keys = Object.keys(checkedKeys);\n    allNodes.forEach(function (node) {\n      var checked = keys.indexOf(node.data[key] + '') > -1;\n\n      if (!node.isLeaf) {\n        if (!_this3.checkStrictly) {\n          var childNodes = node.childNodes;\n          var all = true;\n          var none = true;\n\n          for (var i = 0, j = childNodes.length; i < j; i++) {\n            var child = childNodes[i];\n\n            if (child.checked !== true || child.indeterminate) {\n              all = false;\n            }\n\n            if (child.checked !== false || child.indeterminate) {\n              none = false;\n            }\n          }\n\n          if (all) {\n            node.setChecked(true, !_this3.checkStrictly);\n          } else if (!all && !none) {\n            checked = checked ? true : 'half';\n            node.setChecked(checked, !_this3.checkStrictly && checked === true);\n          } else if (none) {\n            node.setChecked(checked, !_this3.checkStrictly);\n          }\n        } else {\n          node.setChecked(checked, false);\n        }\n\n        if (leafOnly) {\n          node.setChecked(false, false);\n\n          var traverse = function traverse(node) {\n            var childNodes = node.childNodes;\n            childNodes.forEach(function (child) {\n              if (!child.isLeaf) {\n                child.setChecked(false, false);\n              }\n\n              traverse(child);\n            });\n          };\n\n          traverse(node);\n        }\n      } else {\n        node.setChecked(checked, false);\n      }\n    });\n  };\n\n  TreeStore.prototype.setCheckedNodes = function setCheckedNodes(array) {\n    var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var key = this.key;\n    var checkedKeys = {};\n    array.forEach(function (item) {\n      checkedKeys[(item || {})[key]] = true;\n    });\n\n    this._setCheckedKeys(key, leafOnly, checkedKeys);\n  };\n\n  TreeStore.prototype.setCheckedKeys = function setCheckedKeys(keys) {\n    var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.defaultCheckedKeys = keys;\n    var key = this.key;\n    var checkedKeys = {};\n    keys.forEach(function (key) {\n      checkedKeys[key] = true;\n    });\n\n    this._setCheckedKeys(key, leafOnly, checkedKeys);\n  };\n\n  TreeStore.prototype.setDefaultExpandedKeys = function setDefaultExpandedKeys(keys) {\n    var _this4 = this;\n\n    keys = keys || [];\n    this.defaultExpandedKeys = keys;\n    keys.forEach(function (key) {\n      var node = _this4.getNode(key);\n\n      if (node) node.expand(null, _this4.autoExpandParent);\n    });\n  };\n\n  TreeStore.prototype.setChecked = function setChecked(data, checked, deep) {\n    var node = this.getNode(data);\n\n    if (node) {\n      node.setChecked(!!checked, deep);\n    }\n  };\n\n  TreeStore.prototype.getCurrentNode = function getCurrentNode() {\n    return this.currentNode;\n  };\n\n  TreeStore.prototype.setCurrentNode = function setCurrentNode(node) {\n    this.currentNode = node;\n  };\n\n  TreeStore.prototype.setCurrentNodeKey = function setCurrentNodeKey(key) {\n    var node = this.getNode(key);\n\n    if (node) {\n      this.currentNode = node;\n    }\n  };\n\n  return TreeStore;\n}();\n\nexport default TreeStore;","map":null,"metadata":{},"sourceType":"module"}