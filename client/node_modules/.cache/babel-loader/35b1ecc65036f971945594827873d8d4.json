{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { Component, PropTypes } from '../../libs';\nimport Input from '../input';\nimport { accAdd, accSub } from './util';\n\nvar InputNumber = function (_Component) {\n  _inherits(InputNumber, _Component);\n\n  function InputNumber(props) {\n    _classCallCheck(this, InputNumber);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      value: props.defaultValue,\n      inputActive: false\n    };\n    return _this;\n  }\n\n  InputNumber.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {\n    if (props.value != this.props.value) {\n      this.setState({\n        value: props.value\n      });\n    }\n  };\n\n  InputNumber.prototype.onKeyDown = function onKeyDown(e) {\n    switch (e.keyCode) {\n      case 38:\n        // KeyUp\n        e.preventDefault();\n        this.increase();\n        break;\n\n      case 40:\n        // KeyDown\n        e.preventDefault();\n        this.decrease();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  InputNumber.prototype.onBlur = function onBlur() {\n    var value = this.state.value;\n\n    if (this.isValid) {\n      value = Number(value);\n\n      if (value > this.props.max) {\n        value = Number(this.props.max);\n      } else if (value < this.props.min) {\n        value = Number(this.props.min);\n      }\n    } else {\n      value = undefined;\n    }\n\n    this.setState({\n      value: value\n    }, this.onChange);\n  };\n\n  InputNumber.prototype.onInput = function onInput(value) {\n    var _this2 = this;\n\n    this.setState({\n      value: value\n    }, function () {\n      clearTimeout(_this2.timeout);\n      _this2.timeout = setTimeout(function () {\n        _this2.onBlur();\n      }, 750);\n    });\n  };\n\n  InputNumber.prototype.onChange = function onChange() {\n    if (this.props.onChange) {\n      this.props.onChange(this.state.value);\n    }\n  };\n\n  InputNumber.prototype.increase = function increase() {\n    var _props = this.props,\n        step = _props.step,\n        max = _props.max,\n        disabled = _props.disabled,\n        min = _props.min;\n    var _state = this.state,\n        value = _state.value,\n        inputActive = _state.inputActive;\n\n    if (this.maxDisabled) {\n      inputActive = false;\n    } else {\n      if (value + Number(step) > max || disabled) return;\n      if (value + Number(step) < min) value = min - Number(step);\n      value = accAdd(step, value);\n    }\n\n    this.setState({\n      value: value,\n      inputActive: inputActive\n    }, this.onChange);\n  };\n\n  InputNumber.prototype.decrease = function decrease() {\n    var _props2 = this.props,\n        step = _props2.step,\n        min = _props2.min,\n        disabled = _props2.disabled,\n        max = _props2.max;\n    var _state2 = this.state,\n        value = _state2.value,\n        inputActive = _state2.inputActive;\n\n    if (this.minDisabled) {\n      inputActive = false;\n    } else {\n      if (value - Number(step) < min || disabled) return;\n      if (value - Number(step) > max) value = Number(max) + Number(step);\n      value = accSub(value, step);\n    }\n\n    this.setState({\n      value: value,\n      inputActive: inputActive\n    }, this.onChange);\n  };\n\n  InputNumber.prototype.activeInput = function activeInput(disabled) {\n    if (!this.props.disabled && !disabled) {\n      this.setState({\n        inputActive: true\n      });\n    }\n  };\n\n  InputNumber.prototype.inactiveInput = function inactiveInput(disabled) {\n    if (!this.props.disabled && !disabled) {\n      this.setState({\n        inputActive: false\n      });\n    }\n  };\n\n  InputNumber.prototype.render = function render() {\n    var _props3 = this.props,\n        controls = _props3.controls,\n        disabled = _props3.disabled,\n        size = _props3.size;\n    var _state3 = this.state,\n        value = _state3.value,\n        inputActive = _state3.inputActive;\n    return React.createElement('div', {\n      style: this.style(),\n      className: this.className('el-input-number', size && 'el-input-number--' + size, {\n        'is-disabled': disabled,\n        'is-without-controls': !controls\n      })\n    }, controls && React.createElement('span', {\n      className: this.classNames(\"el-input-number__decrease\", {\n        'is-disabled': this.minDisabled\n      }),\n      onClick: this.decrease.bind(this)\n    }, React.createElement('i', {\n      className: 'el-icon-minus'\n    })), controls && React.createElement('span', {\n      className: this.classNames(\"el-input-number__increase\", {\n        'is-disabled': this.maxDisabled\n      }),\n      onClick: this.increase.bind(this)\n    }, React.createElement('i', {\n      className: 'el-icon-plus'\n    })), React.createElement(Input, {\n      ref: 'input',\n      className: this.classNames({\n        'is-active': inputActive\n      }),\n      value: value,\n      disabled: disabled,\n      size: size,\n      onChange: this.onInput.bind(this),\n      onKeyDown: this.onKeyDown.bind(this),\n      onBlur: this.onBlur.bind(this)\n    }));\n  };\n\n  _createClass(InputNumber, [{\n    key: 'isValid',\n    get: function get() {\n      return this.state.value !== '' && !isNaN(Number(this.state.value));\n    }\n  }, {\n    key: 'minDisabled',\n    get: function get() {\n      return !this.isValid || this.state.value - Number(this.props.step) < this.props.min;\n    }\n  }, {\n    key: 'maxDisabled',\n    get: function get() {\n      return !this.isValid || this.state.value + Number(this.props.step) > this.props.max;\n    }\n  }]);\n\n  return InputNumber;\n}(Component);\n\nexport default InputNumber;\nInputNumber.propTypes = {\n  defaultValue: PropTypes.number,\n  value: PropTypes.number,\n  step: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  max: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  min: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  disabled: PropTypes.bool,\n  controls: PropTypes.bool,\n  size: PropTypes.string,\n  onChange: PropTypes.func\n};\nInputNumber.defaultProps = {\n  step: 1,\n  controls: true,\n  max: Infinity,\n  min: 0\n};","map":null,"metadata":{},"sourceType":"module"}