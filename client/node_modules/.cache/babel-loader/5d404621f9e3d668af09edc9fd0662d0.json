{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nvar View = function (_Component) {\n  _inherits(View, _Component);\n\n  function View() {\n    _classCallCheck(this, View);\n\n    return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  View.prototype.render = function render() {\n    var classNames = [];\n    var _props = this.props,\n        _props$show = _props.show,\n        show = _props$show === undefined ? true : _props$show,\n        _props$className = _props.className,\n        className = _props$className === undefined ? '' : _props$className,\n        children = _props.children;\n    var mixed = {\n      style: _extends({}, children.props.style)\n    };\n    if (!show) mixed.style.display = 'none';\n    if (children.props.className) classNames.push(children.props.className);\n    if (className) classNames.push(className);\n    mixed.className = classNames.join(' ');\n    return React.cloneElement(React.Children.only(children), mixed);\n  };\n\n  return View;\n}(Component);\n/* eslint-disable */\n\n\nexport default View;\nView.propTypes = {\n  show: PropTypes.any\n};\n/* eslint-enable */\n\nView._typeName = 'View';","map":null,"metadata":{},"sourceType":"module"}