{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { Component, PropTypes } from '../../libs';\n\nvar Steps = function (_Component) {\n  _inherits(Steps, _Component);\n\n  function Steps() {\n    _classCallCheck(this, Steps);\n\n    return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  Steps.prototype.calcProgress = function calcProgress(status, index) {\n    var step = 100;\n    var style = {};\n    style.transitionDelay = 150 * index + 'ms';\n    var nextStatus = this.calStatus(index + 1); // 前后状态不一致时，并且当前status为完成，statusLine的长度才为50%\n\n    if (nextStatus !== status) {\n      if (status === this.props.finishStatus) {\n        step = 50;\n      } else if (status === 'wait') {\n        step = 0;\n        style.transitionDelay = -150 * index + 'ms';\n      }\n    }\n\n    this.props.direction === 'vertical' ? style.height = step + '%' : style.width = step + '%';\n    return style;\n  };\n\n  Steps.prototype.calStatus = function calStatus(index) {\n    var _props = this.props,\n        active = _props.active,\n        finishStatus = _props.finishStatus,\n        processStatus = _props.processStatus;\n    var status = 'wait';\n\n    if (active > index) {\n      status = finishStatus;\n    } else if (active === index) {\n      status = processStatus;\n    }\n\n    return status;\n  };\n\n  Steps.prototype.render = function render() {\n    var _this2 = this;\n\n    var _props2 = this.props,\n        children = _props2.children,\n        space = _props2.space,\n        direction = _props2.direction;\n    return React.createElement('div', {\n      style: this.style(),\n      className: this.className('el-steps')\n    }, React.Children.map(children, function (child, index) {\n      var computedSpace = space ? space + 'px' : 100 / children.length + '%';\n      var style = direction === 'horizontal' ? {\n        width: computedSpace\n      } : {\n        height: index === children.length - 1 ? 'auto' : computedSpace\n      };\n\n      var status = _this2.calStatus(index);\n\n      var lineStyle = _this2.calcProgress(status, index);\n\n      return React.cloneElement(child, {\n        style: style,\n        lineStyle: lineStyle,\n        direction: direction,\n        status: status,\n        stepNumber: index + 1\n      });\n    }));\n  };\n\n  return Steps;\n}(Component);\n\nSteps.defaultProps = {\n  direction: 'horizontal',\n  finishStatus: 'finish',\n  processStatus: 'process',\n  active: 0\n};\nexport default Steps;\nvar statusMap = ['wait', 'process', 'finish', 'error', 'success'];\nSteps.propTypes = {\n  space: PropTypes.number,\n  active: PropTypes.number,\n  direction: PropTypes.oneOf(['vertical', 'horizontal']),\n  finishStatus: PropTypes.oneOf(statusMap),\n  processStatus: PropTypes.oneOf(statusMap)\n};","map":null,"metadata":{},"sourceType":"module"}