{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { Component, PropTypes } from '../../libs';\nimport ajax from './ajax';\nimport Cover from './Cover';\n\nvar AjaxUpload = function (_Component) {\n  _inherits(AjaxUpload, _Component);\n\n  function AjaxUpload(props) {\n    _classCallCheck(this, AjaxUpload);\n\n    return _possibleConstructorReturn(this, _Component.call(this, props));\n  }\n\n  AjaxUpload.prototype.isImage = function isImage(str) {\n    return str.indexOf('image') !== -1;\n  };\n\n  AjaxUpload.prototype.handleChange = function handleChange(e) {\n    if (e.target instanceof HTMLInputElement) {\n      var files = e.target.files;\n\n      if (!files) {\n        return;\n      }\n\n      this.uploadFiles(files);\n      this.refs.input.value = null;\n    }\n  };\n\n  AjaxUpload.prototype.uploadFiles = function uploadFiles(files) {\n    var _this2 = this;\n\n    var _props = this.props,\n        multiple = _props.multiple,\n        limit = _props.limit,\n        onExceed = _props.onExceed,\n        fileList = _props.fileList;\n\n    if (limit && fileList.length + files.length > limit) {\n      onExceed && onExceed(files, fileList);\n      return;\n    }\n\n    var postFiles = Array.prototype.slice.call(files);\n\n    if (postFiles.length === 0) {\n      return;\n    }\n\n    if (!multiple) {\n      postFiles = postFiles.slice(0, 1);\n    }\n\n    postFiles.forEach(function (file) {\n      _this2.props.onStart(file);\n\n      if (_this2.props.autoUpload) _this2.upload(file);\n    });\n  };\n\n  AjaxUpload.prototype.upload = function upload(rawFile, file) {\n    var _this3 = this;\n\n    var beforeUpload = this.props.beforeUpload;\n\n    if (!beforeUpload) {\n      return this.post(rawFile);\n    }\n\n    var before = beforeUpload(rawFile);\n\n    if (before && before.then) {\n      before.then(function (processedFile) {\n        if (Object.prototype.toString.call(processedFile) === '[object File]') {\n          _this3.post(processedFile);\n        } else {\n          _this3.post(rawFile);\n        }\n      }, function () {\n        if (file && typeof _this3.props.onRemove === 'function') _this3.props.onRemove(file);\n      });\n    } else if (before !== false) {\n      this.post(rawFile);\n    } else {\n      if (file && typeof this.props.onRemove === 'function') this.props.onRemove(file);\n    }\n  };\n\n  AjaxUpload.prototype.post = function post(file) {\n    var _props2 = this.props,\n        filename = _props2.name,\n        headers = _props2.headers,\n        withCredentials = _props2.withCredentials,\n        data = _props2.data,\n        action = _props2.action,\n        _onProgress = _props2.onProgress,\n        _onSuccess = _props2.onSuccess,\n        _onError = _props2.onError;\n    var _props$httpRequest = this.props.httpRequest,\n        httpRequest = _props$httpRequest === undefined ? ajax : _props$httpRequest;\n    var req = httpRequest({\n      headers: headers,\n      withCredentials: withCredentials,\n      file: file,\n      data: data,\n      filename: filename,\n      action: action,\n      onProgress: function onProgress(e) {\n        return _onProgress(e, file);\n      },\n      onSuccess: function onSuccess(res) {\n        return _onSuccess(res, file);\n      },\n      onError: function onError(err) {\n        return _onError(err, file);\n      }\n    });\n\n    if (req && req.then) {\n      req.then(_onSuccess, _onError);\n    }\n  };\n\n  AjaxUpload.prototype.handleClick = function handleClick() {\n    if (!this.props.disabled) {\n      this.refs.input.click();\n    }\n  };\n\n  AjaxUpload.prototype.render = function render() {\n    var _classNames,\n        _this4 = this;\n\n    var _props3 = this.props,\n        drag = _props3.drag,\n        multiple = _props3.multiple,\n        accept = _props3.accept,\n        listType = _props3.listType,\n        disabled = _props3.disabled;\n    return React.createElement('div', {\n      className: this.classNames((_classNames = {\n        'el-upload': true\n      }, _classNames['el-upload--' + listType] = true, _classNames)),\n      onClick: function onClick() {\n        return _this4.handleClick();\n      }\n    }, drag ? React.createElement(Cover, {\n      disabled: disabled,\n      onFile: function onFile(file) {\n        return _this4.uploadFiles(file);\n      }\n    }, this.props.children) : this.props.children, React.createElement('input', {\n      className: 'el-upload__input',\n      type: 'file',\n      ref: 'input',\n      onChange: function onChange(e) {\n        return _this4.handleChange(e);\n      },\n      multiple: multiple,\n      accept: accept\n    }));\n  };\n\n  return AjaxUpload;\n}(Component);\n\nAjaxUpload.defaultProps = {\n  name: 'file'\n};\nexport default AjaxUpload;\nAjaxUpload.propTypes = {\n  drag: PropTypes.bool,\n  data: PropTypes.object,\n  action: PropTypes.string.isRequired,\n  name: PropTypes.string,\n  accept: PropTypes.string,\n  headers: PropTypes.object,\n  withCredentials: PropTypes.bool,\n  multiple: PropTypes.bool,\n  onStart: PropTypes.func,\n  onProgress: PropTypes.func,\n  onSuccess: PropTypes.func,\n  onError: PropTypes.func,\n  beforeUpload: PropTypes.func,\n  autoUpload: PropTypes.bool,\n  listType: PropTypes.string,\n  fileList: PropTypes.array,\n  disabled: PropTypes.bool,\n  limit: PropTypes.number,\n  onExceed: PropTypes.func,\n  httpRequest: PropTypes.func\n};","map":null,"metadata":{},"sourceType":"module"}