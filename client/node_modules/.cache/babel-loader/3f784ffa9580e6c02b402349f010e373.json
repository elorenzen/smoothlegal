{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { Component, PropTypes, View } from '../../libs';\nimport Input from '../input';\nimport Checkbox from '../checkbox';\nimport i18n from '../locale';\n\nvar TransferPanel = function (_Component) {\n  _inherits(TransferPanel, _Component);\n\n  function TransferPanel(props) {\n    _classCallCheck(this, TransferPanel);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.handleMouseEnter = function () {\n      return _this.setState({\n        inputHover: true\n      });\n    };\n\n    _this.handleMouseLeave = function () {\n      return _this.setState({\n        inputHover: false\n      });\n    };\n\n    _this.clearQuery = function () {\n      if (_this.inputIcon === 'circle-close') {\n        _this.setState({\n          query: ''\n        });\n      }\n    };\n\n    _this.handleAllCheckedChange = function (ischecked) {\n      var checked = ischecked ? _this.checkableData.map(function (item) {\n        return item[_this.keyProp];\n      }) : [];\n\n      _this.props.onChange(checked);\n    };\n\n    _this.handleCheckedChange = function (value) {\n      _this.props.onChange(value);\n    };\n\n    _this.handleInputChange = function (value) {\n      _this.setState({\n        query: value\n      });\n    };\n\n    _this.state = {\n      query: '',\n      inputHover: false\n    };\n    return _this;\n  }\n\n  TransferPanel.prototype.render = function render() {\n    var _this2 = this;\n\n    var _props = this.props,\n        filterable = _props.filterable,\n        title = _props.title,\n        data = _props.data,\n        renderContent = _props.renderContent,\n        checked = _props.checked,\n        placeholder = _props.placeholder;\n    var query = this.state.query;\n    return React.createElement('div', {\n      className: 'el-transfer-panel'\n    }, React.createElement('p', {\n      className: 'el-transfer-panel__header'\n    }, title), React.createElement('div', {\n      className: 'el-transfer-panel__body'\n    }, filterable && React.createElement(Input, {\n      className: 'el-transfer-panel__filter',\n      value: query,\n      size: 'small',\n      placeholder: placeholder,\n      icon: this.inputIcon,\n      onMouseEnter: this.handleMouseEnter,\n      onMouseLeave: this.handleMouseLeave,\n      onIconClick: this.clearQuery,\n      onChange: this.handleInputChange\n    }), React.createElement(View, {\n      show: !this.hasNoMatch && data.length > 0\n    }, React.createElement(Checkbox.Group, {\n      value: checked,\n      'v-show': '',\n      className: this.classNames({\n        'is-filterable': filterable,\n        'el-transfer-panel__list': true\n      }),\n      onChange: this.handleCheckedChange\n    }, this.filteredData.map(function (item, index) {\n      return React.createElement(Checkbox, {\n        className: 'el-transfer-panel__item',\n        label: item[_this2.labelProp],\n        disabled: item[_this2.disabledProp],\n        value: item[_this2.keyProp],\n        key: index\n      }, React.createElement(OptionContent, {\n        option: item,\n        renderContent: renderContent,\n        labelProp: _this2.labelProp,\n        keyProp: _this2.keyProp\n      }));\n    }))), React.createElement(View, {\n      show: this.hasNoMatch\n    }, React.createElement('p', {\n      className: 'el-transfer-panel__empty'\n    }, i18n.t('el.transfer.noMatch'))), React.createElement(View, {\n      show: data.length === 0 && !this.hasNoMatch\n    }, React.createElement('p', {\n      className: 'el-transfer-panel__empty'\n    }, i18n.t('el.transfer.noData')))), React.createElement('p', {\n      className: 'el-transfer-panel__footer'\n    }, React.createElement(Checkbox, {\n      checked: this.allChecked,\n      onChange: this.handleAllCheckedChange,\n      indeterminate: this.isIndeterminate\n    }, this.checkedSummary), this.props.children));\n  };\n\n  _createClass(TransferPanel, [{\n    key: 'allChecked',\n    get: function get() {\n      var _this3 = this;\n\n      var checkableDataKeys = this.checkableData.map(function (item) {\n        return item[_this3.keyProp];\n      });\n      return checkableDataKeys.length > 0 && checkableDataKeys.every(function (item) {\n        return _this3.props.checked.includes(item);\n      });\n    }\n  }, {\n    key: 'filteredData',\n    get: function get() {\n      var _this4 = this;\n\n      return this.props.data.filter(function (item) {\n        if (typeof _this4.props.filterMethod === 'function') {\n          return _this4.props.filterMethod(_this4.state.query, item);\n        } else {\n          var label = item[_this4.labelProp] || item[_this4.keyProp].toString();\n\n          return label.toLowerCase().includes(_this4.state.query.toLowerCase());\n        }\n      });\n    }\n  }, {\n    key: 'checkableData',\n    get: function get() {\n      var _this5 = this;\n\n      return this.filteredData.filter(function (item) {\n        return !item[_this5.disabledProp];\n      });\n    }\n  }, {\n    key: 'checkedSummary',\n    get: function get() {\n      var checkedLength = this.props.checked.length;\n      var dataLength = this.props.data.length;\n      var _props$footerFormat = this.props.footerFormat,\n          noChecked = _props$footerFormat.noChecked,\n          hasChecked = _props$footerFormat.hasChecked;\n\n      if (noChecked && hasChecked) {\n        return checkedLength > 0 ? hasChecked.replace(/\\${checked}/g, checkedLength).replace(/\\${total}/g, dataLength) : noChecked.replace(/\\${total}/g, dataLength);\n      } else {\n        return checkedLength > 0 ? i18n.t('el.transfer.hasCheckedFormat', {\n          total: dataLength,\n          checked: checkedLength\n        }) : i18n.t('el.transfer.noCheckedFormat', {\n          total: dataLength\n        });\n      }\n    }\n  }, {\n    key: 'isIndeterminate',\n    get: function get() {\n      var checkedLength = this.props.checked.length;\n      return checkedLength > 0 && checkedLength < this.checkableData.length;\n    }\n  }, {\n    key: 'hasNoMatch',\n    get: function get() {\n      var query = this.state.query;\n      return query.length > 0 && this.filteredData.length === 0;\n    }\n  }, {\n    key: 'inputIcon',\n    get: function get() {\n      var _state = this.state,\n          query = _state.query,\n          inputHover = _state.inputHover;\n      return query.length > 0 && inputHover ? 'circle-close' : 'search';\n    }\n  }, {\n    key: 'labelProp',\n    get: function get() {\n      return this.props.propsAlias.label;\n    }\n  }, {\n    key: 'keyProp',\n    get: function get() {\n      return this.props.propsAlias.key;\n    }\n  }, {\n    key: 'disabledProp',\n    get: function get() {\n      return this.props.propsAlias.disabled;\n    }\n  }]);\n\n  return TransferPanel;\n}(Component);\n\nTransferPanel.propTypes = {\n  data: PropTypes.array,\n  renderContent: PropTypes.func,\n  placeholder: PropTypes.string,\n  title: PropTypes.string,\n  filterable: PropTypes.bool,\n  footerFormat: PropTypes.object,\n  filterMethod: PropTypes.func,\n  propsAlias: PropTypes.object,\n  onChange: PropTypes.func,\n  checked: PropTypes.array\n};\nTransferPanel.defaultProps = {\n  data: [],\n  footerFormat: {},\n  propsAlias: {},\n  onChange: function onChange() {}\n};\nexport default TransferPanel;\n\nvar OptionContent = function OptionContent(_ref) {\n  var option = _ref.option,\n      renderContent = _ref.renderContent,\n      labelProp = _ref.labelProp,\n      keyProp = _ref.keyProp;\n  return renderContent ? renderContent(option) : React.createElement('span', null, option[labelProp] || option[keyProp]);\n};","map":null,"metadata":{},"sourceType":"module"}