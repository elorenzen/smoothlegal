{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ClickOutside from 'react-click-outside';\nimport { Component, PropTypes } from '../../libs';\nimport Input from '../input';\nimport Suggestions from './Suggestions';\n\nvar AutoComplete = function (_Component) {\n  _inherits(AutoComplete, _Component);\n\n  function AutoComplete(props) {\n    _classCallCheck(this, AutoComplete);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      inputValue: props.value,\n      isFocus: false,\n      suggestions: [],\n      loading: false,\n      highlightedIndex: -1\n    };\n    return _this;\n  }\n\n  AutoComplete.prototype.getChildContext = function getChildContext() {\n    return {\n      component: this\n    };\n  };\n\n  AutoComplete.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {\n    this.setState({\n      inputValue: props.value\n    });\n  };\n\n  AutoComplete.prototype.componentDidUpdate = function componentDidUpdate() {\n    var _this2 = this;\n\n    var visible = this.suggestionVisible();\n    var reference = ReactDOM.findDOMNode(this.inputNode);\n\n    if (reference instanceof HTMLElement) {\n      setTimeout(function () {\n        _this2.suggestionsNode.onVisibleChange(visible, reference.offsetWidth);\n      });\n    }\n  };\n\n  AutoComplete.prototype.getData = function getData(queryString) {\n    var _this3 = this;\n\n    this.setState({\n      loading: true\n    });\n    this.props.fetchSuggestions(queryString, function (suggestions) {\n      _this3.setState({\n        loading: false\n      });\n\n      if (Array.isArray(suggestions)) {\n        _this3.setState({\n          suggestions: suggestions\n        });\n      }\n    });\n  };\n\n  AutoComplete.prototype.handleChange = function handleChange(value) {\n    this.setState({\n      inputValue: value\n    });\n\n    if (!this.props.triggerOnFocus && !value) {\n      this.setState({\n        suggestions: []\n      });\n      return;\n    }\n\n    if (this.props.onChange) {\n      this.props.onChange(value);\n    }\n\n    this.getData(value);\n  };\n\n  AutoComplete.prototype.handleFocus = function handleFocus(e) {\n    this.setState({\n      isFocus: true\n    });\n    if (this.props.onFocus) this.props.onFocus(e);\n\n    if (this.props.triggerOnFocus) {\n      this.getData(this.state.inputValue);\n    }\n  };\n\n  AutoComplete.prototype.handleKeyEnter = function handleKeyEnter(highlightedIndex) {\n    if (this.suggestionVisible() && highlightedIndex >= 0 && highlightedIndex < this.state.suggestions.length) {\n      this.select(this.state.suggestions[highlightedIndex]);\n    }\n  };\n\n  AutoComplete.prototype.handleClickOutside = function handleClickOutside() {\n    if (this.state.isFocus) {\n      this.setState({\n        isFocus: false\n      });\n    }\n  };\n\n  AutoComplete.prototype.select = function select(item) {\n    var _this4 = this;\n\n    this.setState({\n      inputValue: item.value\n    }, function () {\n      _this4.setState({\n        suggestions: []\n      });\n    });\n\n    if (this.props.onSelect) {\n      this.props.onSelect(item);\n    }\n  };\n\n  AutoComplete.prototype.highlight = function highlight(index) {\n    if (!this.suggestionVisible() || this.state.loading) return;\n    if (index < 0) index = 0;\n\n    if (index >= this.state.suggestions.length) {\n      index = this.state.suggestions.length - 1;\n    }\n\n    var reference = ReactDOM.findDOMNode(this.suggestionsNode);\n\n    if (reference instanceof HTMLElement) {\n      var suggestion = document.querySelector('.el-autocomplete-suggestion__wrap');\n      var suggestionList = document.querySelectorAll('.el-autocomplete-suggestion__list li');\n\n      if (suggestion instanceof HTMLElement && suggestionList instanceof NodeList) {\n        var highlightItem = suggestionList[index];\n        var scrollTop = suggestion.scrollTop;\n        var offsetTop = highlightItem.offsetTop;\n\n        if (offsetTop + highlightItem.scrollHeight > scrollTop + suggestion.clientHeight) {\n          suggestion.scrollTop += highlightItem.scrollHeight;\n        }\n\n        if (offsetTop < scrollTop) {\n          suggestion.scrollTop -= highlightItem.scrollHeight;\n        }\n\n        this.setState({\n          highlightedIndex: index\n        });\n      }\n    }\n  };\n  /* Computed Methods */\n\n\n  AutoComplete.prototype.suggestionVisible = function suggestionVisible() {\n    var suggestions = this.state.suggestions;\n    var isValidData = Array.isArray(suggestions) && suggestions.length > 0;\n    return (isValidData || this.state.loading) && this.state.isFocus;\n  };\n\n  AutoComplete.prototype.onKeyDown = function onKeyDown(e) {\n    var highlightedIndex = this.state.highlightedIndex;\n\n    switch (e.keyCode) {\n      case 13:\n        this.handleKeyEnter(highlightedIndex);\n        break;\n\n      case 38:\n        this.highlight(highlightedIndex - 1);\n        break;\n\n      case 40:\n        this.highlight(highlightedIndex + 1);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  AutoComplete.prototype.render = function render() {\n    var _this5 = this;\n\n    var _props = this.props,\n        disabled = _props.disabled,\n        placeholder = _props.placeholder,\n        name = _props.name,\n        size = _props.size,\n        icon = _props.icon,\n        append = _props.append,\n        prepend = _props.prepend,\n        onIconClick = _props.onIconClick,\n        popperClass = _props.popperClass;\n    var _state = this.state,\n        inputValue = _state.inputValue,\n        suggestions = _state.suggestions;\n    return React.createElement('div', {\n      style: this.style(),\n      className: this.className('el-autocomplete')\n    }, React.createElement(Input, {\n      ref: function ref(node) {\n        return _this5.inputNode = node;\n      },\n      value: inputValue,\n      disabled: disabled,\n      placeholder: placeholder,\n      name: name,\n      size: size,\n      icon: icon,\n      prepend: prepend,\n      append: append,\n      onIconClick: onIconClick,\n      onChange: this.handleChange.bind(this),\n      onFocus: this.handleFocus.bind(this),\n      onBlur: this.props.onBlur,\n      onKeyDown: this.onKeyDown.bind(this)\n    }), React.createElement(Suggestions, {\n      ref: function ref(node) {\n        return _this5.suggestionsNode = node;\n      },\n      className: this.classNames(popperClass),\n      suggestions: suggestions\n    }));\n  };\n\n  return AutoComplete;\n}(Component);\n\nAutoComplete.defaultProps = {\n  triggerOnFocus: true\n};\nAutoComplete.childContextTypes = {\n  component: PropTypes.any\n};\nexport default ClickOutside(AutoComplete);","map":null,"metadata":{},"sourceType":"module"}