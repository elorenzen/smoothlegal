{"ast":null,"code":"import * as React from 'react';\nvar _document = document;\nvar scrollBarWidth = void 0;\nexport var cleanScrollBar = function cleanScrollBar() {\n  document.querySelectorAll('.el-table__body-wrapper').forEach(function (el) {\n    setTimeout(function () {\n      el.style.overflow = 'hidden';\n      setTimeout(function () {\n        return el.style.overflow = 'auto';\n      });\n    });\n  });\n};\nexport function getScrollBarWidth() {\n  if (scrollBarWidth !== undefined) return scrollBarWidth;\n\n  var dom = _document.createElement('div');\n\n  var body = _document.body || dom;\n  dom.style.visibility = 'hidden';\n  dom.style.width = '100px';\n  dom.style.position = 'absolute';\n  dom.style.top = '-9999px';\n  dom.style.overflow = 'scroll';\n  body.appendChild(dom);\n  var totalWidth = dom.offsetWidth;\n  var widthWithoutScroll = dom.clientWidth;\n  body.removeChild(dom);\n  return totalWidth - widthWithoutScroll;\n}\nexport function getValueByPath(data, path) {\n  if (typeof path !== 'string') return null;\n  return path.split('.').reduce(function (pre, cur) {\n    return (pre || {})[cur];\n  }, data);\n}\nexport function getRowIdentity(row, rowKey) {\n  if (typeof rowKey === 'string') {\n    return getValueByPath(row, rowKey);\n  } else if (typeof rowKey === 'function') {\n    return rowKey(row);\n  }\n}\nexport function getLeafColumns(columns) {\n  var result = [];\n  columns.forEach(function (column) {\n    if (column.subColumns) {\n      result.push.apply(result, getLeafColumns(column.subColumns));\n    } else {\n      result.push(column);\n    }\n  });\n  return result;\n}\n\nfunction convertChildrenToColumns(children) {\n  return React.Children.map(children, function (child) {\n    if (child.type.typeName !== 'TableColumn') {\n      console.warn('Table component\\'s children must be TableColumn, but received ' + child.type);\n      return {};\n    }\n\n    var column = Object.assign({}, child.props);\n\n    if (column.children) {\n      column.subColumns = convertChildrenToColumns(column.children);\n      delete column.children;\n    }\n\n    return column;\n  });\n}\n\nexport function getColumns(props) {\n  return props.children ? convertChildrenToColumns(props.children) : props.columns || [];\n}\nexport function convertToRows(columns) {\n  var maxLevel = 1;\n\n  function traverse(column, parent) {\n    if (parent) {\n      column.level = parent.level + 1;\n\n      if (maxLevel < column.level) {\n        maxLevel = column.level;\n      }\n    } else {\n      column.level = 1;\n    }\n\n    if (column.subColumns) {\n      var colSpan = 0;\n      column.subColumns.forEach(function (subColumn) {\n        traverse(subColumn, column);\n        colSpan += subColumn.colSpan;\n      });\n      column.colSpan = colSpan;\n    } else {\n      column.colSpan = 1;\n    }\n  }\n\n  columns.forEach(function (column) {\n    traverse(column);\n  });\n  var rows = [];\n\n  for (var i = 0; i < maxLevel; i++) {\n    rows.push([]);\n  }\n\n  var allColumns = [];\n  var queue = columns.slice();\n\n  for (var _i = 0; queue[_i]; _i++) {\n    allColumns.push(queue[_i]);\n    if (queue[_i].subColumns) queue.push.apply(queue, queue[_i].subColumns);\n  }\n\n  allColumns.forEach(function (column) {\n    if (!column.subColumns) {\n      column.rowSpan = maxLevel - column.level + 1;\n    } else {\n      column.rowSpan = 1;\n    }\n\n    rows[column.level - 1].push(column);\n  });\n  return rows;\n}\n\nvar checkType = function checkType(data) {\n  return Object.prototype.toString.call(data).toLowerCase().slice(8, -1);\n};\n\nvar deepCompare = function deepCompare(obj1, obj2) {\n  var obj1Type = checkType(obj1);\n  var obj2Type = checkType(obj2);\n  if (obj1Type !== obj2Type) return false;\n\n  if (obj1Type === 'array' && obj1.length === obj2.length) {\n    return obj1.every(function (value, key) {\n      return deepCompare(value, obj2[key]);\n    });\n  }\n\n  if (obj1Type === 'object') {\n    for (var key in obj1) {\n      if (!Object.keys(obj2).includes(key)) return false;\n      return deepCompare(obj1[key], obj2[key]);\n    }\n\n    return false;\n  }\n\n  return Object.is(obj1, obj2);\n};\n\nexport { deepCompare, checkType };","map":null,"metadata":{},"sourceType":"module"}