{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nexport var MountBody = function (_Component) {\n  _inherits(MountBody, _Component);\n\n  function MountBody() {\n    _classCallCheck(this, MountBody);\n\n    return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  MountBody.prototype.componentWillMount = function componentWillMount() {\n    var c = React.cloneElement(this.props.children);\n    this.tnode = document.createElement('div');\n    document.body.appendChild(this.tnode);\n    ReactDOM.render(c, this.tnode);\n  };\n\n  MountBody.prototype.componentWillUnmount = function componentWillUnmount() {\n    ReactDOM.unmountComponentAtNode(this.tnode);\n    document.body.removeChild(this.tnode);\n  };\n\n  MountBody.prototype.contains = function contains(evt) {\n    var parent = this.tnode.childNodes[0];\n    var rect = parent.getBoundingClientRect();\n    var isContain = evt.clientX >= rect.left && evt.clientX <= rect.right && evt.clientY >= rect.top && evt.clientY <= rect.bottom;\n    return isContain;\n  };\n\n  MountBody.prototype.render = function render() {\n    return null;\n  };\n\n  return MountBody;\n}(Component);","map":null,"metadata":{},"sourceType":"module"}