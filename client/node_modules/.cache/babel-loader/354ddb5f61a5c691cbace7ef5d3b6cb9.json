{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport ClickOutside from 'react-click-outside';\nimport { Component, PropTypes } from '../../libs';\nimport PickerDropdown from './components/PickerDropdown';\nimport Color from './color';\n\nvar ColorPicker = function (_Component) {\n  _inherits(ColorPicker, _Component);\n\n  function ColorPicker(props) {\n    _classCallCheck(this, ColorPicker);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    var color = new Color({\n      enableAlpha: _this.props.showAlpha,\n      format: _this.props.colorFormat\n    });\n    _this.state = {\n      value: _this.props.value,\n      color: color,\n      showPicker: false,\n      showPanelColor: false\n    };\n    return _this;\n  }\n\n  ColorPicker.prototype.componentDidMount = function componentDidMount() {\n    var _state = this.state,\n        value = _state.value,\n        color = _state.color;\n\n    if (value) {\n      color.fromString(value);\n      this.setState({\n        color: color\n      });\n    }\n\n    this.popperElm = this.refs.dropdown;\n  };\n\n  ColorPicker.prototype.getChildContext = function getChildContext() {\n    return {\n      onChange: this.handleChange.bind(this)\n    };\n  };\n\n  ColorPicker.prototype.handleChange = function handleChange(color) {\n    this.setState({\n      value: color.value,\n      color: color\n    });\n  };\n\n  ColorPicker.prototype.confirmValue = function confirmValue() {\n    var value = this.state.value;\n    var onChange = this.props.onChange;\n    this.setState({\n      showPicker: false\n    }, function () {\n      return onChange(value);\n    });\n  };\n\n  ColorPicker.prototype.clearValue = function clearValue() {\n    var _this2 = this;\n\n    this.setState({\n      showPicker: false,\n      showPanelColor: false,\n      value: null\n    }, function () {\n      _this2.props.onChange(null);\n\n      _this2.resetColor();\n    });\n  };\n\n  ColorPicker.prototype.hide = function hide() {\n    var _this3 = this;\n\n    this.setState({\n      showPicker: false\n    }, function () {\n      return _this3.resetColor();\n    });\n  };\n\n  ColorPicker.prototype.resetColor = function resetColor() {\n    var _state2 = this.state,\n        value = _state2.value,\n        color = _state2.color;\n\n    if (value) {\n      color.fromString(value);\n      this.setState({\n        color: color\n      });\n    }\n  };\n\n  ColorPicker.prototype.handleClickOutside = function handleClickOutside() {\n    this.setState({\n      showPicker: false\n    });\n  };\n\n  ColorPicker.prototype.render = function render() {\n    var _this4 = this;\n\n    var showAlpha = this.props.showAlpha;\n    var _state3 = this.state,\n        value = _state3.value,\n        color = _state3.color,\n        showPicker = _state3.showPicker,\n        showPanelColor = _state3.showPanelColor;\n    var displayedColor = void 0;\n\n    if (!value && !showPanelColor) {\n      displayedColor = 'transparent';\n    } else {\n      var _color$toRgb = color.toRgb(),\n          r = _color$toRgb.r,\n          g = _color$toRgb.g,\n          b = _color$toRgb.b;\n\n      var alpha = color.get('alpha');\n\n      if (typeof alpha === 'number') {\n        displayedColor = showAlpha ? 'rgba(' + r + ', ' + g + ', ' + b + ', ' + alpha / 100 + ')' : 'rgb(' + r + ', ' + g + ', ' + b + ')';\n      }\n    }\n\n    return React.createElement('div', {\n      className: 'el-color-picker'\n    }, React.createElement('div', {\n      className: 'el-color-picker__trigger',\n      onClick: function onClick() {\n        return _this4.setState({\n          showPicker: !showPicker\n        });\n      }\n    }, React.createElement('span', {\n      className: this.classNames({\n        'el-color-picker__color': true,\n        'is-alpha': showAlpha\n      })\n    }, React.createElement('span', {\n      className: 'el-color-picker__color-inner',\n      style: {\n        backgroundColor: displayedColor\n      }\n    }), !value && !showPanelColor && React.createElement('span', {\n      className: 'el-color-picker__empty el-icon-close'\n    })), React.createElement('span', {\n      className: 'el-color-picker__icon el-icon-caret-bottom'\n    })), React.createElement(PickerDropdown, {\n      ref: 'dropdown',\n      showPicker: showPicker,\n      color: color,\n      onPick: function onPick() {\n        return _this4.confirmValue();\n      },\n      onClear: function onClear() {\n        return _this4.clearValue();\n      },\n      showAlpha: showAlpha\n    }));\n  };\n\n  return ColorPicker;\n}(Component);\n\nColorPicker.defaultProps = {\n  onChange: function onChange() {}\n};\nColorPicker.childContextTypes = {\n  onChange: PropTypes.func\n};\nColorPicker.propTypes = {\n  value: PropTypes.string,\n  showAlpha: PropTypes.bool,\n  colorFormat: PropTypes.string,\n  onChange: PropTypes.func\n};\nexport default ClickOutside(ColorPicker);","map":null,"metadata":{},"sourceType":"module"}