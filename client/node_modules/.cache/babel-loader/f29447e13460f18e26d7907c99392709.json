{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport Popper from 'popper.js';\nimport { Component, Transition, View } from '../../libs';\nimport Checkbox from '../checkbox';\nimport { FilterProps, FilterState } from './Types';\nimport local from '../locale';\n\nfunction getPopupContainer() {\n  var container = document.createElement('div');\n  container.className = 'el-table-poper';\n  container.style.zIndex = 999;\n  document.body.appendChild(container);\n  return container;\n}\n\nvar FilterPannel = function (_Component) {\n  _inherits(FilterPannel, _Component);\n\n  function FilterPannel(props) {\n    _classCallCheck(this, FilterPannel);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.container = getPopupContainer();\n    ['handleClickOutside', 'onEnter', 'onAfterLeave'].forEach(function (fn) {\n      _this[fn] = _this[fn].bind(_this);\n    });\n    _this.state = {\n      filteredValue: props.filteredValue\n    };\n    return _this;\n  }\n\n  FilterPannel.prototype.componentDidMount = function componentDidMount() {\n    this.renderPortal(this.renderContent(), this.container);\n    document.addEventListener('click', this.handleClickOutside);\n  };\n\n  FilterPannel.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (this.props.filteredValue !== nextProps.filteredValue) {\n      this.setState({\n        filteredValue: nextProps.filteredValue\n      });\n    }\n  };\n\n  FilterPannel.prototype.componentDidUpdate = function componentDidUpdate() {\n    this.renderPortal(this.renderContent(), this.container);\n  };\n\n  FilterPannel.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.poperIns && this.poperIns.destroy();\n    ReactDOM.unmountComponentAtNode(this.container);\n    document.removeEventListener('click', this.handleClickOutside);\n    document.body.removeChild(this.container);\n  };\n\n  FilterPannel.prototype.handleFiltersChange = function handleFiltersChange(value) {\n    this.setState({\n      filteredValue: value\n    });\n  };\n\n  FilterPannel.prototype.changeFilteredValue = function changeFilteredValue(value) {\n    this.props.onFilterChange(value);\n    this.props.toggleFilter();\n  };\n\n  FilterPannel.prototype.handleClickOutside = function handleClickOutside() {\n    if (this.props.visible) {\n      this.props.toggleFilter();\n    }\n  };\n\n  FilterPannel.prototype.onEnter = function onEnter() {\n    this.poperIns = new Popper(this.refer, this.container, {\n      placement: this.props.placement\n    });\n  };\n\n  FilterPannel.prototype.onAfterLeave = function onAfterLeave() {\n    this.poperIns.destroy();\n  };\n\n  FilterPannel.prototype.renderPortal = function renderPortal(element, container) {\n    ReactDOM.render(element, container);\n  };\n\n  FilterPannel.prototype.renderContent = function renderContent() {\n    var _this2 = this;\n\n    var _props = this.props,\n        multiple = _props.multiple,\n        filters = _props.filters,\n        visible = _props.visible;\n    var filteredValue = this.state.filteredValue;\n    var content = void 0;\n\n    if (multiple) {\n      content = [React.createElement('div', {\n        className: 'el-table-filter__content',\n        key: 'content'\n      }, React.createElement(Checkbox.Group, {\n        value: filteredValue || [],\n        onChange: this.handleFiltersChange.bind(this),\n        className: 'el-table-filter__checkbox-group'\n      }, filters && filters.map(function (filter) {\n        return React.createElement(Checkbox, {\n          value: filter.value,\n          label: filter.text,\n          key: filter.value\n        });\n      }))), React.createElement('div', {\n        className: 'el-table-filter__bottom',\n        key: 'bottom'\n      }, React.createElement('button', {\n        className: this.classNames({\n          'is-disabled': !filteredValue || !filteredValue.length\n        }),\n        disabled: !filteredValue || !filteredValue.length,\n        onClick: this.changeFilteredValue.bind(this, filteredValue)\n      }, local.t('el.table.confirmFilter')), React.createElement('button', {\n        onClick: this.changeFilteredValue.bind(this, null)\n      }, local.t('el.table.resetFilter')))];\n    } else {\n      content = React.createElement('ul', {\n        className: 'el-table-filter__list'\n      }, React.createElement('li', {\n        className: this.classNames('el-table-filter__list-item', {\n          'is-active': !filteredValue\n        }),\n        onClick: this.changeFilteredValue.bind(this, null)\n      }, local.t('el.table.clearFilter')), filters && filters.map(function (filter) {\n        return React.createElement('li', {\n          key: filter.value,\n          className: _this2.classNames('el-table-filter__list-item', {\n            'is-active': filter.value === filteredValue\n          }),\n          onClick: _this2.changeFilteredValue.bind(_this2, filter.value)\n        }, filter.text);\n      }));\n    }\n\n    return React.createElement(Transition, {\n      name: 'el-zoom-in-top',\n      onEnter: this.onEnter,\n      onAfterLeave: this.onAfterLeave\n    }, React.createElement(View, {\n      show: visible\n    }, React.createElement('div', {\n      className: 'el-table-filter',\n      ref: function ref(dom) {\n        _this2.poper = dom;\n      },\n      onClick: function onClick(e) {\n        e.nativeEvent.stopImmediatePropagation();\n      } // prevent document click event\n\n    }, content)));\n  };\n\n  FilterPannel.prototype.render = function render() {\n    var _this3 = this;\n\n    return React.cloneElement(this.props.children, {\n      ref: function ref(dom) {\n        _this3.refer = dom;\n      }\n    });\n  };\n\n  return FilterPannel;\n}(Component);\n\nexport default FilterPannel;","map":null,"metadata":{},"sourceType":"module"}