{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { debounce } from 'throttle-debounce';\nimport { PropTypes, Component, CollapseTransition } from '../../libs';\nimport { watchPropertyChange, IDGenerator } from '../../libs/utils';\nimport Checkbox from '../checkbox';\n\nfunction NodeContent(_ref) {\n  var context = _ref.context,\n      renderContent = _ref.renderContent;\n  var _context$props = context.props,\n      nodeModel = _context$props.nodeModel,\n      treeNode = _context$props.treeNode;\n\n  if (typeof renderContent === 'function') {\n    return renderContent(nodeModel, nodeModel.data, treeNode.store);\n  } else {\n    return React.createElement('span', {\n      className: 'el-tree-node__label'\n    }, nodeModel.label);\n  }\n}\n\nNodeContent.propTypes = {\n  renderContent: PropTypes.func,\n  context: PropTypes.object.isRequired\n};\n\nvar Node = function (_Component) {\n  _inherits(Node, _Component);\n\n  function Node(props) {\n    _classCallCheck(this, Node);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      childNodeRendered: false,\n      isShowCheckbox: false\n    };\n    _this.state.isShowCheckbox = props.treeNode.isShowCheckbox;\n    _this.oldChecked = false;\n    _this.oldIndeterminate = false;\n    _this.idGen = new IDGenerator();\n    return _this;\n  }\n\n  Node.prototype.componentDidMount = function componentDidMount() {\n    var _this2 = this,\n        _watchers;\n\n    var nodeModel = this.props.nodeModel;\n    var childrenKey = this.props.options.children || 'children';\n    var triggerChange = debounce(20, function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (_this2.isDeconstructed) return;\n\n      _this2.handleSelectChange.apply(_this2, args);\n    });\n    this.loadHandler = this.enhanceLoad(nodeModel);\n    this.watchers = (_watchers = {}, _watchers[this.idGen.next()] = watchPropertyChange(nodeModel, 'indeterminate', function (value) {\n      triggerChange(nodeModel.checked, value);\n    }), _watchers[this.idGen.next()] = watchPropertyChange(nodeModel, 'checked', function (value) {\n      triggerChange(value, nodeModel.indeterminate);\n    }), _watchers[this.idGen.next()] = watchPropertyChange(nodeModel, 'loading', function () {\n      _this2.setState({});\n    }), _watchers);\n\n    if (nodeModel.data != null) {\n      this.watchers[this.idGen.next()] = watchPropertyChange(nodeModel.data, childrenKey, function () {\n        nodeModel.updateChildren();\n\n        _this2.setState({}); //force update view\n\n      });\n    }\n  };\n\n  Node.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.loadHandler(); // clear watchs\n\n    for (var w in this.watchers) {\n      if (this.watchers[w]) {\n        this.watchers[w]();\n      }\n    }\n\n    this.isDeconstructed = true;\n  };\n\n  Node.prototype.enhanceLoad = function enhanceLoad(nodeModel) {\n    var _this3 = this;\n\n    var load = nodeModel.load;\n\n    var enhanced = function enhanced() {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      load.apply(null, args);\n\n      _this3.setState({});\n    };\n\n    nodeModel.load = enhanced;\n    return function () {\n      nodeModel.load = load;\n    };\n  };\n\n  Node.prototype.handleSelectChange = function handleSelectChange(checked, indeterminate) {\n    var _props = this.props,\n        onCheckChange = _props.onCheckChange,\n        nodeModel = _props.nodeModel; // !NOTE: 原码是 && 的关系，感觉有bug\n\n    if (this.oldChecked !== checked || this.oldIndeterminate !== indeterminate) {\n      onCheckChange(nodeModel.data, checked, indeterminate);\n      this.setState({}); //force update\n    }\n\n    this.oldChecked = checked;\n    this.oldIndeterminate = indeterminate;\n  };\n\n  Node.prototype.getNodeKey = function getNodeKey(node, otherwise) {\n    var nodeKey = this.props.nodeKey;\n\n    if (nodeKey && node) {\n      return node.data[nodeKey];\n    }\n\n    return otherwise;\n  };\n\n  Node.prototype.handleClick = function handleClick(evt) {\n    if (evt) evt.stopPropagation();\n    var _props2 = this.props,\n        nodeModel = _props2.nodeModel,\n        treeNode = _props2.treeNode;\n    treeNode.setCurrentNode(this);\n\n    if (treeNode.props.expandOnClickNode) {\n      this.handleExpandIconClick();\n    }\n  };\n\n  Node.prototype.handleExpandIconClick = function handleExpandIconClick(evt) {\n    var _this4 = this;\n\n    if (evt) evt.stopPropagation();\n    var _props3 = this.props,\n        nodeModel = _props3.nodeModel,\n        parent = _props3.parent;\n    var _props$treeNode$props = this.props.treeNode.props,\n        onNodeCollapse = _props$treeNode$props.onNodeCollapse,\n        onNodeExpand = _props$treeNode$props.onNodeExpand;\n    if (nodeModel.isLeaf) return;\n\n    if (nodeModel.expanded) {\n      nodeModel.collapse();\n      this.refresh();\n      onNodeCollapse(nodeModel.data, nodeModel, this);\n    } else {\n      nodeModel.expand(function () {\n        _this4.setState({\n          childNodeRendered: true\n        }, function () {\n          onNodeExpand(nodeModel.data, nodeModel, _this4);\n        });\n\n        parent.closeSiblings(nodeModel);\n      });\n    }\n  };\n\n  Node.prototype.closeSiblings = function closeSiblings(exclude) {\n    var _props4 = this.props,\n        treeNode = _props4.treeNode,\n        nodeModel = _props4.nodeModel;\n    if (!treeNode.props.accordion) return;\n    if (nodeModel.isLeaf || !nodeModel.childNodes || !nodeModel.childNodes.length) return;\n    nodeModel.childNodes.filter(function (e) {\n      return e !== exclude;\n    }).forEach(function (e) {\n      return e.collapse();\n    });\n    this.refresh();\n  };\n\n  Node.prototype.refresh = function refresh() {\n    this.setState({});\n  };\n\n  Node.prototype.handleUserClick = function handleUserClick() {\n    var _props$treeNode = this.props.treeNode,\n        nodeModel = _props$treeNode.nodeModel,\n        checkStrictly = _props$treeNode.checkStrictly;\n\n    if (nodeModel.indeterminate) {\n      nodeModel.setChecked(nodeModel.checked, !checkStrictly);\n    }\n  };\n\n  Node.prototype.handleCheckChange = function handleCheckChange(checked) {\n    this.props.nodeModel.setChecked(checked, true);\n  };\n\n  Node.prototype.render = function render() {\n    var _this5 = this;\n\n    var childNodeRendered = this.state.childNodeRendered;\n    var _props5 = this.props,\n        treeNode = _props5.treeNode,\n        nodeModel = _props5.nodeModel,\n        renderContent = _props5.renderContent,\n        isShowCheckbox = _props5.isShowCheckbox;\n    var expanded = nodeModel.expanded;\n    return React.createElement('div', {\n      onClick: this.handleClick.bind(this),\n      className: this.classNames('el-tree-node', {\n        expanded: childNodeRendered && expanded,\n        'is-current': treeNode.getCurrentNode() === this,\n        'is-hidden': !nodeModel.visible\n      }),\n      style: {\n        display: nodeModel.visible ? '' : 'none'\n      }\n    }, React.createElement('div', {\n      className: 'el-tree-node__content',\n      style: {\n        paddingLeft: (nodeModel.level - 1) * treeNode.props.indent + 'px'\n      }\n    }, React.createElement('span', {\n      className: this.classNames('el-tree-node__expand-icon', {\n        'is-leaf': nodeModel.isLeaf,\n        expanded: !nodeModel.isLeaf && expanded\n      }),\n      onClick: this.handleExpandIconClick.bind(this)\n    }), isShowCheckbox && React.createElement(Checkbox, {\n      checked: nodeModel.checked,\n      onChange: this.handleCheckChange.bind(this),\n      indeterminate: nodeModel.indeterminate,\n      onClick: this.handleUserClick.bind(this)\n    }), nodeModel.loading && React.createElement('span', {\n      className: 'el-tree-node__loading-icon el-icon-loading'\n    }, ' '), React.createElement(NodeContent, {\n      nodeModel: nodeModel,\n      renderContent: treeNode.props.renderContent,\n      context: this\n    })), React.createElement(CollapseTransition, {\n      isShow: expanded,\n      ref: 'collapse'\n    }, React.createElement('div', {\n      className: 'el-tree-node__children'\n    }, nodeModel.childNodes.map(function (e, idx) {\n      var props = Object.assign({}, _this5.props, {\n        nodeModel: e,\n        parent: _this5\n      });\n      return React.createElement(Node, _extends({}, props, {\n        key: _this5.getNodeKey(e, idx)\n      }));\n    }))));\n  };\n\n  return Node;\n}(Component);\n\nexport default Node;\nNode.propTypes = {\n  nodeModel: PropTypes.object,\n  options: PropTypes.object,\n  treeNode: PropTypes.object.isRequired,\n  isShowCheckbox: PropTypes.bool,\n  onCheckChange: PropTypes.func\n};\nNode.defaultProps = {\n  nodeModel: {},\n  options: {},\n  onCheckChange: function onCheckChange() {}\n};","map":null,"metadata":{},"sourceType":"module"}