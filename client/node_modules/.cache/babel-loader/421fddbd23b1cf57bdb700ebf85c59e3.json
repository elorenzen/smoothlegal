{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { debounce } from 'throttle-debounce';\nimport { PropTypes, Component } from '../../../libs';\nimport { getRangeHours } from '../utils';\nimport { Scrollbar } from '../../scrollbar';\n\nfunction range(end) {\n  var r = [];\n\n  for (var i = 0; i < end; i++) {\n    r.push(i);\n  }\n\n  return r;\n}\n\nvar isNumber = function isNumber(value) {\n  return typeof value === 'number';\n};\n\nvar validateHour = function validateHour(value) {\n  return isNumber(value) && value >= 0 && value <= 23;\n};\n\nvar validateMinOrSec = function validateMinOrSec(value) {\n  return isNumber(value) && value >= 0 && value <= 59;\n};\n\nfunction propsToState(props) {\n  var hours = props.hours,\n      minutes = props.minutes,\n      seconds = props.seconds,\n      selectableRange = props.selectableRange;\n  var state = {};\n\n  var setOnValid = function setOnValid(isValid, cb) {\n    return isValid && cb(state);\n  };\n\n  setOnValid(validateHour(hours), function (state) {\n    return state.hours = hours;\n  });\n  setOnValid(validateMinOrSec(minutes), function (state) {\n    return state.minutes = minutes;\n  });\n  setOnValid(validateMinOrSec(seconds), function (state) {\n    return state.seconds = seconds;\n  });\n  state.hoursList = getRangeHours(selectableRange);\n  state.minutesLisit = range(60);\n  state.secondsList = range(60);\n  return state;\n}\n\nvar SCROLL_AJUST_VALUE = 85;\n\nvar calcScrollTop = function calcScrollTop(value) {\n  return Math.max(0, (value - 2.5) * 32 + SCROLL_AJUST_VALUE);\n};\n\nvar TimeSpinner = function (_Component) {\n  _inherits(TimeSpinner, _Component);\n\n  _createClass(TimeSpinner, null, [{\n    key: 'propTypes',\n    get: function get() {\n      return {\n        hours: PropTypes.number,\n        minutes: PropTypes.number,\n        seconds: PropTypes.number,\n        isShowSeconds: PropTypes.bool,\n        //[[datefrom, dateend]...]\n        selectableRange: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.instanceOf(Date))),\n\n        /*\n        type: one of [hours, minutes, seconds]\n         onChange: ({type})=>()\n        */\n        onChange: PropTypes.func.isRequired,\n        onSelectRangeChange: PropTypes.func\n      };\n    }\n  }, {\n    key: 'defaultProps',\n    get: function get() {\n      return {\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n        isShowSeconds: true,\n        onSelectRangeChange: function onSelectRangeChange() {}\n      };\n    }\n  }]);\n\n  function TimeSpinner(props) {\n    _classCallCheck(this, TimeSpinner);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    };\n    Object.assign(_this.state, propsToState(props));\n    _this.ajustScrollTop = _this._ajustScrollTop.bind(_this);\n    _this.handleScroll = debounce(20, _this._handleScroll.bind(_this));\n    return _this;\n  }\n\n  TimeSpinner.prototype.componentDidMount = function componentDidMount() {\n    this.ajustScrollTop(this.state);\n  };\n\n  TimeSpinner.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var _this2 = this;\n\n    this.setState(propsToState(nextProps), function () {\n      _this2.ajustScrollTop(_this2.state);\n    });\n  };\n\n  TimeSpinner.prototype.emitSelectRange = function emitSelectRange(type) {\n    var onSelectRangeChange = this.props.onSelectRangeChange;\n\n    if (type === 'hours') {\n      onSelectRangeChange(0, 3);\n    } else if (type === 'minutes') {\n      onSelectRangeChange(3, 5);\n    } else if (type === 'seconds') {\n      onSelectRangeChange(6, 9);\n    }\n  };\n\n  TimeSpinner.prototype._handleScroll = function _handleScroll(_type) {\n    var value = Math.min(Math.floor((this.refs[_type].refs.wrap.scrollTop - SCROLL_AJUST_VALUE) / 32 + 3), 59);\n    this.handleChange(_type, value);\n  }; // type: hours, minutes, seconds\n\n\n  TimeSpinner.prototype.handleChange = function handleChange(type, value, disabled) {\n    var _this3 = this;\n\n    if (disabled) return;\n    this.state[type] = value;\n    var changed = {};\n    changed[type] = value;\n    this.setState({}, function () {\n      _this3.ajustScrollTop(_this3.state);\n    });\n    this.props.onChange(changed);\n  };\n\n  TimeSpinner.prototype._ajustScrollTop = function _ajustScrollTop(_ref) {\n    var hours = _ref.hours,\n        minutes = _ref.minutes,\n        seconds = _ref.seconds;\n\n    if (hours != null) {\n      this.refs.hours.refs.wrap.scrollTop = calcScrollTop(hours);\n    }\n\n    if (minutes != null) {\n      this.refs.minutes.refs.wrap.scrollTop = calcScrollTop(minutes);\n    }\n\n    if (this.refs.seconds && seconds != null) {\n      this.refs.seconds.refs.wrap.scrollTop = calcScrollTop(seconds);\n    }\n  };\n\n  TimeSpinner.prototype.render = function render() {\n    var _this4 = this;\n\n    var _state = this.state,\n        hoursList = _state.hoursList,\n        minutesLisit = _state.minutesLisit,\n        secondsList = _state.secondsList,\n        hours = _state.hours,\n        minutes = _state.minutes,\n        seconds = _state.seconds;\n    var isShowSeconds = this.props.isShowSeconds;\n    return React.createElement('div', {\n      className: this.classNames('el-time-spinner', {\n        'has-seconds': isShowSeconds\n      })\n    }, React.createElement(Scrollbar, {\n      onMouseEnter: function onMouseEnter() {\n        return _this4.emitSelectRange('hours');\n      },\n      onWheel: function onWheel() {\n        _this4.handleScroll('hours');\n      },\n      ref: 'hours',\n      className: 'el-time-spinner__wrapper',\n      wrapStyle: {\n        maxHeight: 'inherit'\n      },\n      viewClass: 'el-time-spinner__list',\n      viewComponent: 'ul'\n    }, hoursList.map(function (disabled, idx) {\n      return React.createElement('li', {\n        key: idx,\n        onClick: function onClick() {\n          return _this4.handleChange('hours', idx, disabled);\n        },\n        className: _this4.classNames('el-time-spinner__item', {\n          active: idx === hours,\n          disabled: disabled\n        })\n      }, idx);\n    })), React.createElement(Scrollbar, {\n      onMouseEnter: function onMouseEnter() {\n        return _this4.emitSelectRange('minutes');\n      },\n      onWheel: function onWheel() {\n        return _this4.handleScroll('minutes');\n      },\n      ref: 'minutes',\n      className: 'el-time-spinner__wrapper',\n      wrapStyle: {\n        maxHeight: 'inherit'\n      },\n      viewClass: 'el-time-spinner__list',\n      viewComponent: 'ul'\n    }, minutesLisit.map(function (minute) {\n      return React.createElement('li', {\n        key: minute,\n        onClick: function onClick() {\n          return _this4.handleChange('minutes', minute);\n        },\n        className: _this4.classNames('el-time-spinner__item', {\n          active: minute === minutes\n        })\n      }, minute);\n    })), isShowSeconds && React.createElement(Scrollbar, {\n      onMouseEnter: function onMouseEnter() {\n        return _this4.emitSelectRange('seconds');\n      },\n      onWheel: function onWheel() {\n        return _this4.handleScroll('seconds');\n      },\n      ref: 'seconds',\n      className: 'el-time-spinner__wrapper',\n      wrapStyle: {\n        maxHeight: 'inherit'\n      },\n      viewClass: 'el-time-spinner__list',\n      viewComponent: 'ul'\n    }, secondsList.map(function (sec) {\n      return React.createElement('li', {\n        key: sec,\n        onClick: function onClick() {\n          return _this4.handleChange('seconds', sec);\n        },\n        className: _this4.classNames('el-time-spinner__item', {\n          active: sec === seconds\n        })\n      }, sec);\n    })));\n  };\n\n  return TimeSpinner;\n}(Component);\n\nexport default TimeSpinner;","map":null,"metadata":{},"sourceType":"module"}