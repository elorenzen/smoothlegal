{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits'; //taken from : http://stackoverflow.com/questions/31089801/extending-error-in-javascript-with-es6-syntax\n\nexport var ExtendableError = function (_Error) {\n  _inherits(ExtendableError, _Error);\n\n  function ExtendableError(message) {\n    _classCallCheck(this, ExtendableError);\n\n    var _this = _possibleConstructorReturn(this, _Error.call(this, message));\n\n    _this.name = _this.constructor.name;\n    _this.message = message;\n\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(_this, _this.constructor);\n    } else {\n      _this.stack = new Error(message).stack;\n    }\n\n    return _this;\n  }\n\n  return ExtendableError;\n}(Error);\nexport var MethodImplementationRequiredError = function (_ExtendableError) {\n  _inherits(MethodImplementationRequiredError, _ExtendableError);\n\n  function MethodImplementationRequiredError(msg) {\n    _classCallCheck(this, MethodImplementationRequiredError);\n\n    return _possibleConstructorReturn(this, _ExtendableError.call(this, msg));\n  }\n\n  return MethodImplementationRequiredError;\n}(ExtendableError);","map":null,"metadata":{},"sourceType":"module"}