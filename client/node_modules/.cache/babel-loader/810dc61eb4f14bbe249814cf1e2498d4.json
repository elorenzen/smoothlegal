{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { PropTypes } from '../../../libs';\nimport { limitRange, parseDate } from '../utils';\nimport TimeSpinner from '../basic/TimeSpinner';\nimport Locale from '../../locale';\nimport { PopperBase } from './PopperBase';\nvar MIN_TIME = parseDate('00:00:00', 'HH:mm:ss');\nvar MAX_TIME = parseDate('23:59:59', 'HH:mm:ss');\n\nvar isDisabled = function isDisabled(minTime, maxTime) {\n  var minValue = minTime.getHours() * 3600 + minTime.getMinutes() * 60 + minTime.getSeconds();\n  var maxValue = maxTime.getHours() * 3600 + maxTime.getMinutes() * 60 + maxTime.getSeconds();\n  return minValue > maxValue;\n};\n\nvar calcTime = function calcTime(time) {\n  time = Array.isArray(time) ? time : [time];\n  var minTime = time[0] || new Date();\n  var date = new Date();\n  date.setHours(date.getHours() + 1);\n  var maxTime = time[1] || date;\n  if (minTime > maxTime) return calcTime();\n  return {\n    minTime: minTime,\n    maxTime: maxTime\n  };\n};\n\nvar mapPropsToState = function mapPropsToState(props) {\n  var currentDates = props.currentDates,\n      format = props.format;\n\n  var _calcTime = calcTime(currentDates),\n      minTime = _calcTime.minTime,\n      maxTime = _calcTime.maxTime;\n\n  var state = {\n    format: format || 'HH:mm:ss',\n    minTime: minTime,\n    maxTime: maxTime,\n    minSelectableRange: [[MIN_TIME, maxTime]],\n    maxSelectableRange: [[minTime, MAX_TIME]],\n    btnDisabled: isDisabled(minTime, maxTime)\n  };\n  state.isShowSeconds = (state.format || '').indexOf('ss') !== -1;\n  return state;\n};\n\nvar TimeRangePanel = function (_PopperBase) {\n  _inherits(TimeRangePanel, _PopperBase);\n\n  _createClass(TimeRangePanel, null, [{\n    key: 'propTypes',\n    get: function get() {\n      return Object.assign({\n        pickerWidth: PropTypes.number,\n        currentDates: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n\n        /*\n        onPicked: (value, isKeepPannelOpen)=>()\n         @param value: Date| Date[] |null\n        @param isKeepPannelOpen:boolean, should parent close the pannel\n        */\n        onPicked: PropTypes.func.isRequired,\n        // cancel btn is clicked\n        //()=>()\n        onCancel: PropTypes.func.isRequired,\n        // (start, end)=>(), index range indicate which field [hours, minutes, seconds] changes\n        onSelectRangeChange: TimeSpinner.propTypes.onSelectRangeChange\n      }, PopperBase.propTypes);\n    }\n  }, {\n    key: 'defaultProps',\n    get: function get() {\n      return {\n        popperMixinOption: {}\n      };\n    }\n  }]);\n\n  function TimeRangePanel(props) {\n    _classCallCheck(this, TimeRangePanel);\n\n    var _this = _possibleConstructorReturn(this, _PopperBase.call(this, props));\n\n    _this.state = Object.assign({\n      visible: false,\n      width: 0\n    }, mapPropsToState(props));\n    return _this;\n  }\n\n  TimeRangePanel.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    this.setState(mapPropsToState(nextProps));\n  }; // type = hours | minutes | seconds\n  // date: {type: number}\n\n\n  TimeRangePanel.prototype.handleChange = function handleChange(date, field) {\n    var _state;\n\n    var ndate = this.state[field];\n\n    if (date.hours !== undefined) {\n      ndate.setHours(date.hours);\n    }\n\n    if (date.minutes !== undefined) {\n      ndate.setMinutes(date.minutes);\n    }\n\n    if (date.seconds !== undefined) {\n      ndate.setSeconds(date.seconds);\n    }\n\n    var state = (_state = {}, _state[field] = ndate, _state);\n    this.setState(state);\n    this.handleConfirm(true);\n  };\n\n  TimeRangePanel.prototype.handleConfirm = function handleConfirm() {\n    var isKeepPannelOpen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var _state2 = this.state,\n        minTime = _state2.minTime,\n        maxTime = _state2.maxTime;\n    var onPicked = this.props.onPicked;\n    onPicked([minTime, maxTime], isKeepPannelOpen);\n  };\n\n  TimeRangePanel.prototype.render = function render() {\n    var _this2 = this;\n\n    var _state3 = this.state,\n        isShowSeconds = _state3.isShowSeconds,\n        minTime = _state3.minTime,\n        maxTime = _state3.maxTime,\n        btnDisabled = _state3.btnDisabled,\n        minSelectableRange = _state3.minSelectableRange,\n        maxSelectableRange = _state3.maxSelectableRange;\n    var _onSelectRangeChange = this.props.onSelectRangeChange;\n    var $t = Locale.t;\n    var maxHours = maxTime.getHours();\n    var maxMinutes = maxTime.getMinutes();\n    var maxSeconds = maxTime.getSeconds();\n    var minHours = minTime.getHours();\n    var minMinutes = minTime.getMinutes();\n    var minSeconds = minTime.getSeconds();\n    return React.createElement('div', {\n      ref: 'root',\n      className: 'el-time-range-picker el-picker-panel',\n      style: {\n        minWidth: '330px'\n      }\n    }, React.createElement('div', {\n      className: 'el-time-range-picker__content'\n    }, React.createElement('div', {\n      className: 'el-time-range-picker__cell'\n    }, React.createElement('div', {\n      className: 'el-time-range-picker__header'\n    }, $t('el.datepicker.startTime')), React.createElement('div', {\n      className: this.classNames('el-time-range-picker__body el-time-panel__content', {\n        'has-seconds': isShowSeconds\n      })\n    }, React.createElement(TimeSpinner, {\n      ref: 'minSpinner',\n      onChange: function onChange(date) {\n        return _this2.handleChange(date, 'minTime');\n      },\n      isShowSeconds: isShowSeconds,\n      hours: minHours,\n      minutes: minMinutes,\n      seconds: minSeconds,\n      selectableRange: minSelectableRange,\n      onSelectRangeChange: _onSelectRangeChange\n    }))), React.createElement('div', {\n      className: 'el-time-range-picker__cell'\n    }, React.createElement('div', {\n      className: 'el-time-range-picker__header'\n    }, $t('el.datepicker.endTime')), React.createElement('div', {\n      className: this.classNames('el-time-range-picker__body el-time-panel__content', {\n        'has-seconds': isShowSeconds\n      })\n    }, React.createElement(TimeSpinner, {\n      ref: 'maxSpinner',\n      onChange: function onChange(date) {\n        return _this2.handleChange(date, 'maxTime');\n      },\n      isShowSeconds: isShowSeconds,\n      hours: maxHours,\n      minutes: maxMinutes,\n      seconds: maxSeconds,\n      selectableRange: maxSelectableRange,\n      onSelectRangeChange: function onSelectRangeChange(start, end) {\n        return _onSelectRangeChange(start + 11, end + 11);\n      }\n    })))), React.createElement('div', {\n      className: 'el-time-panel__footer'\n    }, React.createElement('button', {\n      type: 'button',\n      className: 'el-time-panel__btn cancel',\n      onClick: function onClick() {\n        return _this2.props.onCancel();\n      }\n    }, $t('el.datepicker.cancel')), React.createElement('button', {\n      type: 'button',\n      className: 'el-time-panel__btn confirm',\n      onClick: function onClick() {\n        return _this2.handleConfirm();\n      },\n      disabled: btnDisabled\n    }, $t('el.datepicker.confirm'))));\n  };\n\n  return TimeRangePanel;\n}(PopperBase);\n\nexport default TimeRangePanel;","map":null,"metadata":{},"sourceType":"module"}