{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n/* eslint-disable */\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport requestAnimationFrame from 'raf';\n/**\n * @deprecated\n */\n\nvar Transition = function (_Component) {\n  _inherits(Transition, _Component);\n\n  function Transition(props) {\n    _classCallCheck(this, Transition);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    var children = props.children;\n    _this.state = {\n      children: children && _this.enhanceChildren(children)\n    };\n    _this.didEnter = _this.didEnter.bind(_this);\n    _this.didLeave = _this.didLeave.bind(_this);\n    return _this;\n  }\n\n  Transition.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var children = React.isValidElement(this.props.children) && React.Children.only(this.props.children);\n    var nextChildren = React.isValidElement(nextProps.children) && React.Children.only(nextProps.children);\n\n    if (!nextProps.name) {\n      this.setState({\n        children: nextChildren\n      });\n      return;\n    }\n\n    if (this.isViewComponent(nextChildren)) {\n      this.setState({\n        children: this.enhanceChildren(nextChildren, {\n          show: children ? children.props.show : true\n        })\n      });\n    } else {\n      if (nextChildren) {\n        this.setState({\n          children: this.enhanceChildren(nextChildren)\n        });\n      }\n    }\n  };\n\n  Transition.prototype.componentDidUpdate = function componentDidUpdate(preProps) {\n    if (!this.props.name) return;\n    var children = React.isValidElement(this.props.children) && React.Children.only(this.props.children);\n    var preChildren = React.isValidElement(preProps.children) && React.Children.only(preProps.children);\n\n    if (this.isViewComponent(children)) {\n      if ((!preChildren || !preChildren.props.show) && children.props.show) {\n        this.toggleVisible();\n      } else if (preChildren && preChildren.props.show && !children.props.show) {\n        this.toggleHidden();\n      }\n    } else {\n      if (!preChildren && children) {\n        this.toggleVisible();\n      } else if (preChildren && !children) {\n        this.toggleHidden();\n      }\n    }\n  };\n\n  Transition.prototype.enhanceChildren = function enhanceChildren(children, props) {\n    var _this2 = this;\n\n    return React.cloneElement(children, Object.assign({\n      ref: function ref(el) {\n        _this2.el = el;\n      }\n    }, props));\n  };\n\n  Transition.prototype.isViewComponent = function isViewComponent(element) {\n    return element && element.type._typeName === 'View';\n  };\n  /* css animation fix when animation applyied to .{action} instanceof .{action}-active */\n\n\n  Transition.prototype.animateElement = function animateElement(element, action, active, fn) {\n    element.classList.add(active);\n    var styles = getComputedStyle(element);\n    var duration = parseFloat(styles['animationDuration']) || parseFloat(styles['transitionDuration']);\n    element.classList.add(action);\n\n    if (duration === 0) {\n      var _styles = getComputedStyle(element);\n\n      var _duration = parseFloat(_styles['animationDuration']) || parseFloat(_styles['transitionDuration']);\n\n      clearTimeout(this.timeout);\n      this.timeout = setTimeout(function () {\n        fn();\n      }, _duration * 1000);\n    }\n\n    element.classList.remove(action, active);\n  };\n\n  Transition.prototype.didEnter = function didEnter(e) {\n    var childDOM = ReactDOM.findDOMNode(this.el);\n    if (!e || e.target !== childDOM) return;\n    var onAfterEnter = this.props.onAfterEnter;\n    var _transitionClass = this.transitionClass,\n        enterActive = _transitionClass.enterActive,\n        enterTo = _transitionClass.enterTo;\n    childDOM.classList.remove(enterActive, enterTo);\n    childDOM.removeEventListener('transitionend', this.didEnter);\n    childDOM.removeEventListener('animationend', this.didEnter);\n    onAfterEnter && onAfterEnter();\n  };\n\n  Transition.prototype.didLeave = function didLeave(e) {\n    var _this3 = this;\n\n    var childDOM = ReactDOM.findDOMNode(this.el);\n    if (!e || e.target !== childDOM) return;\n    var _props = this.props,\n        onAfterLeave = _props.onAfterLeave,\n        children = _props.children;\n    var _transitionClass2 = this.transitionClass,\n        leaveActive = _transitionClass2.leaveActive,\n        leaveTo = _transitionClass2.leaveTo;\n    new Promise(function (resolve) {\n      if (_this3.isViewComponent(children)) {\n        childDOM.removeEventListener('transitionend', _this3.didLeave);\n        childDOM.removeEventListener('animationend', _this3.didLeave);\n        requestAnimationFrame(function () {\n          childDOM.style.display = 'none';\n          childDOM.classList.remove(leaveActive, leaveTo);\n          requestAnimationFrame(resolve);\n        });\n      } else {\n        _this3.setState({\n          children: null\n        }, resolve);\n      }\n    }).then(function () {\n      onAfterLeave && onAfterLeave();\n    });\n  };\n\n  Transition.prototype.toggleVisible = function toggleVisible() {\n    var _this4 = this;\n\n    var onEnter = this.props.onEnter;\n    var _transitionClass3 = this.transitionClass,\n        enter = _transitionClass3.enter,\n        enterActive = _transitionClass3.enterActive,\n        enterTo = _transitionClass3.enterTo,\n        leaveActive = _transitionClass3.leaveActive,\n        leaveTo = _transitionClass3.leaveTo;\n    var childDOM = ReactDOM.findDOMNode(this.el);\n    childDOM.addEventListener('transitionend', this.didEnter);\n    childDOM.addEventListener('animationend', this.didEnter); // this.animateElement(childDOM, enter, enterActive, this.didEnter);\n\n    requestAnimationFrame(function () {\n      // when hidden transition not end\n      if (childDOM.classList.contains(leaveActive)) {\n        childDOM.classList.remove(leaveActive, leaveTo);\n        childDOM.removeEventListener('transitionend', _this4.didLeave);\n        childDOM.removeEventListener('animationend', _this4.didLeave);\n      }\n\n      childDOM.style.display = '';\n      childDOM.classList.add(enter, enterActive);\n      onEnter && onEnter();\n      requestAnimationFrame(function () {\n        childDOM.classList.remove(enter);\n        childDOM.classList.add(enterTo);\n      });\n    });\n  };\n\n  Transition.prototype.toggleHidden = function toggleHidden() {\n    var _this5 = this;\n\n    var onLeave = this.props.onLeave;\n    var _transitionClass4 = this.transitionClass,\n        leave = _transitionClass4.leave,\n        leaveActive = _transitionClass4.leaveActive,\n        leaveTo = _transitionClass4.leaveTo,\n        enterActive = _transitionClass4.enterActive,\n        enterTo = _transitionClass4.enterTo;\n    var childDOM = ReactDOM.findDOMNode(this.el);\n    childDOM.addEventListener('transitionend', this.didLeave);\n    childDOM.addEventListener('animationend', this.didLeave); // this.animateElement(childDOM, leave, leaveActive, this.didLeave);\n\n    requestAnimationFrame(function () {\n      // when enter transition not end\n      if (childDOM.classList.contains(enterActive)) {\n        childDOM.classList.remove(enterActive, enterTo);\n        childDOM.removeEventListener('transitionend', _this5.didEnter);\n        childDOM.removeEventListener('animationend', _this5.didEnter);\n      }\n\n      childDOM.classList.add(leave, leaveActive);\n      onLeave && onLeave();\n      requestAnimationFrame(function () {\n        childDOM.classList.remove(leave);\n        childDOM.classList.add(leaveTo);\n      });\n    });\n  };\n\n  Transition.prototype.render = function render() {\n    return this.state.children || null;\n  };\n\n  _createClass(Transition, [{\n    key: 'transitionClass',\n    get: function get() {\n      var name = this.props.name;\n      return {\n        enter: name + '-enter',\n        enterActive: name + '-enter-active',\n        enterTo: name + '-enter-to',\n        leave: name + '-leave',\n        leaveActive: name + '-leave-active',\n        leaveTo: name + '-leave-to'\n      };\n    }\n  }]);\n\n  return Transition;\n}(Component);\n\nexport default Transition;\nTransition.propTypes = {\n  name: PropTypes.string,\n  onEnter: PropTypes.func,\n  // triggered when enter transition start\n  onAfterEnter: PropTypes.func,\n  // triggered when enter transition end\n  onLeave: PropTypes.func,\n  // triggered when leave transition start\n  onAfterLeave: PropTypes.func // tiggered when leave transition end\n\n};","map":null,"metadata":{},"sourceType":"module"}