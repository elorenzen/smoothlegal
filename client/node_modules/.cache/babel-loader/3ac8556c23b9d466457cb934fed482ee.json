{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { PropTypes, Component } from '../../libs';\nimport { BAR_MAP, renderThumbStyle } from './util';\nimport { on, off } from '../../libs/utils/dom';\nexport var Bar = function (_Component) {\n  _inherits(Bar, _Component);\n\n  function Bar(props) {\n    _classCallCheck(this, Bar);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.clickTrackHandler = _this.clickTrackHandler.bind(_this);\n    _this.clickThumbHandler = _this.clickThumbHandler.bind(_this);\n    _this.mouseMoveDocumentHandler = _this.mouseMoveDocumentHandler.bind(_this);\n    _this.mouseUpDocumentHandler = _this.mouseUpDocumentHandler.bind(_this);\n    return _this;\n  }\n\n  Bar.prototype.clickThumbHandler = function clickThumbHandler(e) {\n    this.startDrag(e);\n    this[this.bar.axis] = e.currentTarget[this.bar.offset] - (e[this.bar.client] - e.currentTarget.getBoundingClientRect()[this.bar.direction]);\n  };\n\n  Bar.prototype.clickTrackHandler = function clickTrackHandler(e) {\n    var offset = Math.abs(e.target.getBoundingClientRect()[this.bar.direction] - e[this.bar.client]);\n    var thumbHalf = this.thumbRef[this.bar.offset] / 2;\n    var thumbPositionPercentage = (offset - thumbHalf) * 100 / this.rootRef[this.bar.offset];\n    this.wrap[this.bar.scroll] = thumbPositionPercentage * this.wrap[this.bar.scrollSize] / 100;\n  };\n\n  Bar.prototype.startDrag = function startDrag(e) {\n    e.nativeEvent.stopImmediatePropagation;\n    this.cursorDown = true;\n    on(document, 'mousemove', this.mouseMoveDocumentHandler);\n    on(document, 'mouseup', this.mouseUpDocumentHandler);\n\n    document.onselectstart = function () {\n      return false;\n    };\n  };\n\n  Bar.prototype.mouseMoveDocumentHandler = function mouseMoveDocumentHandler(e) {\n    if (this.cursorDown === false) return;\n    var prevPage = this[this.bar.axis];\n    if (!prevPage) return;\n    var offset = e[this.bar.client] - this.rootRef.getBoundingClientRect()[this.bar.direction];\n    var thumbClickPosition = this.thumbRef[this.bar.offset] - prevPage;\n    var thumbPositionPercentage = (offset - thumbClickPosition) * 100 / this.rootRef[this.bar.offset];\n    this.wrap[this.bar.scroll] = thumbPositionPercentage * this.wrap[this.bar.scrollSize] / 100;\n  };\n\n  Bar.prototype.mouseUpDocumentHandler = function mouseUpDocumentHandler() {\n    this.cursorDown = false;\n    this[this.bar.axis] = 0;\n    off(document, 'mousemove', this.mouseMoveDocumentHandler);\n    document.onselectstart = null;\n  };\n\n  Bar.prototype.render = function render() {\n    var _this2 = this;\n\n    var _props = this.props,\n        size = _props.size,\n        move = _props.move;\n    return React.createElement('div', {\n      ref: function ref(root) {\n        return _this2.rootRef = root;\n      },\n      className: this.classNames('el-scrollbar__bar', 'is-' + this.bar.key),\n      onMouseDown: this.clickTrackHandler\n    }, React.createElement('div', {\n      ref: function ref(thumb) {\n        return _this2.thumbRef = thumb;\n      },\n      className: 'el-scrollbar__thumb',\n      onMouseDown: this.clickThumbHandler,\n      style: renderThumbStyle({\n        size: size,\n        move: move,\n        bar: this.bar\n      })\n    }));\n  };\n\n  _createClass(Bar, [{\n    key: 'bar',\n    get: function get() {\n      return BAR_MAP[this.props.vertical ? 'vertical' : 'horizontal'];\n    }\n  }, {\n    key: 'wrap',\n    get: function get() {\n      return this.props.getParentWrap();\n    }\n  }]);\n\n  return Bar;\n}(Component);\nBar.propTypes = {\n  vertical: PropTypes.bool,\n  size: PropTypes.string,\n  move: PropTypes.number,\n  getParentWrap: PropTypes.func.isRequired\n};","map":null,"metadata":{},"sourceType":"module"}