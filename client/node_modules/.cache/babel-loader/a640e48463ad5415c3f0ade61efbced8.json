{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Popper from 'popper.js';\nimport { Component, PropTypes, Transition, View } from '../../libs';\nimport { Scrollbar } from '../scrollbar';\n\nvar Suggestions = function (_Component) {\n  _inherits(Suggestions, _Component);\n\n  function Suggestions(props) {\n    _classCallCheck(this, Suggestions);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      showPopper: false,\n      dropdownWidth: ''\n    };\n    return _this;\n  }\n\n  Suggestions.prototype.onVisibleChange = function onVisibleChange(visible, inputWidth) {\n    this.setState({\n      dropdownWidth: inputWidth,\n      showPopper: visible\n    });\n  };\n\n  Suggestions.prototype.parent = function parent() {\n    return this.context.component;\n  };\n\n  Suggestions.prototype.onSelect = function onSelect(item) {\n    this.parent().select(item);\n  };\n\n  Suggestions.prototype.onEnter = function onEnter() {\n    var reference = ReactDOM.findDOMNode(this.parent().inputNode);\n    this.popperJS = new Popper(reference, this.refs.popper, {\n      modifiers: {\n        computeStyle: {\n          gpuAcceleration: false\n        }\n      }\n    });\n  };\n\n  Suggestions.prototype.onAfterLeave = function onAfterLeave() {\n    this.popperJS.destroy();\n  };\n\n  Suggestions.prototype.render = function render() {\n    var _this2 = this;\n\n    var customItem = this.parent().props.customItem;\n    var _parent$state = this.parent().state,\n        loading = _parent$state.loading,\n        highlightedIndex = _parent$state.highlightedIndex;\n    var suggestions = this.props.suggestions;\n    var _state = this.state,\n        showPopper = _state.showPopper,\n        dropdownWidth = _state.dropdownWidth;\n    return React.createElement(Transition, {\n      name: 'el-zoom-in-top',\n      onEnter: this.onEnter.bind(this),\n      onAfterLeave: this.onAfterLeave.bind(this)\n    }, React.createElement(View, {\n      show: showPopper\n    }, React.createElement('div', {\n      ref: 'popper',\n      className: this.classNames('el-autocomplete-suggestion', 'el-popper', {\n        'is-loading': loading\n      }),\n      style: {\n        width: dropdownWidth,\n        zIndex: 1\n      }\n    }, React.createElement(Scrollbar, {\n      viewComponent: 'ul',\n      wrapClass: 'el-autocomplete-suggestion__wrap',\n      viewClass: 'el-autocomplete-suggestion__list'\n    }, loading ? React.createElement('li', null, React.createElement('i', {\n      className: 'el-icon-loading'\n    })) : suggestions.map(function (item, index) {\n      return React.createElement('li', {\n        key: index,\n        className: _this2.classNames({\n          'highlighted': highlightedIndex === index\n        }),\n        onClick: _this2.onSelect.bind(_this2, item)\n      }, !customItem ? item.value : React.createElement(customItem, {\n        index: index,\n        item: item\n      }));\n    })))));\n  };\n\n  return Suggestions;\n}(Component);\n\nexport default Suggestions;\nSuggestions.contextTypes = {\n  component: PropTypes.any\n};","map":null,"metadata":{},"sourceType":"module"}