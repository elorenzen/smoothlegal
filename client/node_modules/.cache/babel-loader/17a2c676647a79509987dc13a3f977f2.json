{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ClickOutside from 'react-click-outside';\nimport { debounce } from 'throttle-debounce';\nimport Popper from 'popper.js';\nimport { Component, PropTypes, View } from '../../libs';\nimport CascaderMenu from './Menu';\nimport Input from '../input';\nimport i18n from '../locale';\n\nvar Cascader = function (_Component) {\n  _inherits(Cascader, _Component);\n\n  function Cascader(props) {\n    _classCallCheck(this, Cascader);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      currentValue: props.value,\n      menu: null,\n      menuVisible: false,\n      inputHover: false,\n      inputValue: '',\n      flatOptions: _this.flattenOptions(props.options)\n    };\n    _this.debouncedInputChange = debounce(props.debounce, function () {\n      var value = _this.state.inputValue;\n\n      var before = _this.props.beforeFilter(value);\n\n      if (before && before.then) {\n        _this.state.menu.setState({\n          options: [{\n            __IS__FLAT__OPTIONS: true,\n            label: i18n.t('el.cascader.loading'),\n            value: '',\n            disabled: true\n          }]\n        });\n\n        before.then(function () {\n          _this.handleInputChange(value);\n        });\n      } else {\n        _this.handleInputChange(value);\n      }\n    });\n    return _this;\n  }\n\n  Cascader.prototype.getChildContext = function getChildContext() {\n    return {\n      component: this\n    };\n  };\n\n  Cascader.prototype.componentDidMount = function componentDidMount() {\n    this.input = ReactDOM.findDOMNode(this.refs.input);\n  };\n\n  Cascader.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {\n    this.setState({\n      currentValue: props.value,\n      flatOptions: this.flattenOptions(props.options)\n    });\n    this.state.menu.setState({\n      options: props.options\n    });\n  };\n\n  Cascader.prototype.componentDidUpdate = function componentDidUpdate(props, state) {\n    var menuVisible = this.state.menuVisible;\n\n    if (menuVisible !== state.menuVisible) {\n      if (menuVisible) {\n        this.showMenu();\n\n        if (this.popperJS) {\n          this.popperJS.update();\n        } else {\n          this.popperJS = new Popper(this.input, ReactDOM.findDOMNode(this.refs.menu), {\n            placement: 'bottom-start',\n            modifiers: {\n              computeStyle: {\n                gpuAcceleration: false\n              }\n            }\n          });\n        }\n      } else {\n        this.hideMenu();\n\n        if (this.popperJS) {\n          this.popperJS.destroy();\n        }\n\n        delete this.popperJS;\n      }\n    }\n  };\n\n  Cascader.prototype.componentWillUnmount = function componentWillUnmount() {\n    if (this.popperJS) {\n      this.popperJS.destroy();\n    }\n  };\n\n  Cascader.prototype.placeholder = function placeholder() {\n    return this.props.placeholder || i18n.t('el.cascader.placeholder');\n  };\n\n  Cascader.prototype.updatePopper = function updatePopper() {\n    if (this.popperJS) {\n      this.popperJS.update();\n    }\n  };\n\n  Cascader.prototype.initMenu = function initMenu(menu) {\n    this.state.menu = menu;\n  };\n\n  Cascader.prototype.showMenu = function showMenu() {\n    this.state.menu.setState({\n      value: this.state.currentValue.slice(0),\n      visible: true,\n      options: this.props.options,\n      inputWidth: this.input.offsetWidth - 2\n    });\n  };\n\n  Cascader.prototype.hideMenu = function hideMenu() {\n    this.setState({\n      inputValue: ''\n    });\n\n    if (this.state.menu) {\n      this.state.menu.setState({\n        visible: false\n      });\n    }\n  };\n\n  Cascader.prototype.handleActiveItemChange = function handleActiveItemChange(value) {\n    this.updatePopper();\n\n    if (this.props.activeItemChange) {\n      this.props.activeItemChange(value);\n    }\n  };\n\n  Cascader.prototype.handlePick = function handlePick(value) {\n    var close = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    this.setState({\n      currentValue: value\n    });\n\n    if (close) {\n      this.setState({\n        menuVisible: false\n      });\n    }\n\n    if (this.props.onChange) {\n      this.props.onChange(value);\n    }\n  };\n\n  Cascader.prototype.handleInputChange = function handleInputChange(value) {\n    var _this2 = this;\n\n    if (!this.state.menuVisible) return;\n    var flatOptions = this.state.flatOptions;\n\n    if (!value) {\n      this.state.menu.setState({\n        options: this.props.options\n      });\n      return;\n    }\n\n    var filteredFlatOptions = flatOptions.filter(function (optionsStack) {\n      return optionsStack.some(function (option) {\n        return new RegExp(value, 'i').test(option[_this2.labelKey()]);\n      });\n    });\n\n    if (filteredFlatOptions.length > 0) {\n      filteredFlatOptions = filteredFlatOptions.map(function (optionStack) {\n        return {\n          __IS__FLAT__OPTIONS: true,\n          value: optionStack.map(function (item) {\n            return item[_this2.valueKey()];\n          }),\n          label: _this2.renderFilteredOptionLabel(value, optionStack)\n        };\n      });\n    } else {\n      filteredFlatOptions = [{\n        __IS__FLAT__OPTIONS: true,\n        label: i18n.t('el.cascader.noMatch'),\n        value: '',\n        disabled: true\n      }];\n    }\n\n    this.state.menu.setState({\n      options: filteredFlatOptions\n    });\n  };\n\n  Cascader.prototype.renderFilteredOptionLabel = function renderFilteredOptionLabel(inputValue, optionsStack) {\n    var _this3 = this;\n\n    return optionsStack.map(function (option, index) {\n      var label = option[_this3.labelKey()];\n\n      var keywordIndex = label.toLowerCase().indexOf(inputValue.toLowerCase());\n      var labelPart = label.slice(keywordIndex, inputValue.length + keywordIndex);\n      var node = keywordIndex > -1 ? _this3.highlightKeyword(label, labelPart) : label;\n      return index === 0 ? node : [' / ', node];\n    });\n  };\n\n  Cascader.prototype.highlightKeyword = function highlightKeyword(label, keyword) {\n    return label.split(keyword).map(function (node, index) {\n      return index === 0 ? node : [React.createElement('span', {\n        className: 'el-cascader-menu__item__keyword'\n      }, keyword), node];\n    });\n  };\n\n  Cascader.prototype.flattenOptions = function flattenOptions(options) {\n    var _this4 = this;\n\n    var ancestor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var flatOptions = [];\n    options.forEach(function (option) {\n      var optionsStack = ancestor.concat(option);\n\n      if (!option[_this4.childrenKey()]) {\n        flatOptions.push(optionsStack);\n      } else {\n        if (_this4.changeOnSelect) {\n          flatOptions.push(optionsStack);\n        }\n\n        flatOptions = flatOptions.concat(_this4.flattenOptions(option[_this4.childrenKey()], optionsStack));\n      }\n    });\n    return flatOptions;\n  };\n\n  Cascader.prototype.clearValue = function clearValue(e) {\n    e.stopPropagation();\n    this.handlePick([], true);\n  };\n\n  Cascader.prototype.handleClickOutside = function handleClickOutside() {\n    if (this.state.menuVisible) {\n      this.setState({\n        menuVisible: false\n      });\n    }\n  };\n\n  Cascader.prototype.handleClick = function handleClick() {\n    if (this.props.disabled) return;\n\n    if (this.filterable) {\n      this.setState({\n        menuVisible: true\n      });\n      return;\n    }\n\n    this.setState({\n      menuVisible: !this.state.menuVisible\n    });\n  };\n  /* Computed Methods */\n\n\n  Cascader.prototype.labelKey = function labelKey() {\n    return this.props.props.label || 'label';\n  };\n\n  Cascader.prototype.valueKey = function valueKey() {\n    return this.props.props.value || 'value';\n  };\n\n  Cascader.prototype.childrenKey = function childrenKey() {\n    return this.props.props.children || 'children';\n  };\n\n  Cascader.prototype.currentLabels = function currentLabels() {\n    var _this5 = this;\n\n    var options = this.props.options;\n    var labels = [];\n    this.state.currentValue.forEach(function (value) {\n      var targetOption = options && options.filter(function (option) {\n        return option[_this5.valueKey()] === value;\n      })[0];\n\n      if (targetOption) {\n        labels.push(targetOption[_this5.labelKey()]);\n        options = targetOption[_this5.childrenKey()];\n      }\n    });\n    return labels;\n  };\n\n  Cascader.prototype.render = function render() {\n    var _this6 = this;\n\n    var _props = this.props,\n        size = _props.size,\n        disabled = _props.disabled,\n        filterable = _props.filterable,\n        clearable = _props.clearable,\n        showAllLevels = _props.showAllLevels;\n    var _state = this.state,\n        menuVisible = _state.menuVisible,\n        inputHover = _state.inputHover,\n        inputValue = _state.inputValue;\n    var currentLabels = this.currentLabels();\n    return React.createElement('span', {\n      ref: 'reference',\n      className: this.className('el-cascader', size ? 'el-cascader--' + size : '', {\n        'is-opened': menuVisible,\n        'is-disabled': disabled\n      })\n    }, React.createElement('span', {\n      onClick: this.handleClick.bind(this),\n      onMouseEnter: function onMouseEnter() {\n        _this6.setState({\n          inputHover: true\n        });\n      },\n      onMouseLeave: function onMouseLeave() {\n        _this6.setState({\n          inputHover: false\n        });\n      }\n    }, React.createElement(Input, {\n      ref: 'input',\n      readOnly: !filterable,\n      placeholder: currentLabels.length ? undefined : this.placeholder(),\n      value: inputValue,\n      onChange: function onChange(value) {\n        _this6.setState({\n          inputValue: value\n        });\n      },\n      onKeyUp: this.debouncedInputChange.bind(this),\n      size: size,\n      disabled: disabled,\n      icon: clearable && inputHover && currentLabels.length ? React.createElement('i', {\n        className: 'el-input__icon el-icon-circle-close el-cascader__clearIcon',\n        onClick: this.clearValue.bind(this)\n      }) : React.createElement('i', {\n        className: this.classNames('el-input__icon el-icon-caret-bottom', {\n          'is-reverse': menuVisible\n        })\n      })\n    }), React.createElement(View, {\n      show: currentLabels.length\n    }, React.createElement('span', {\n      className: 'el-cascader__label'\n    }, showAllLevels ? currentLabels.map(function (label, index) {\n      return React.createElement('label', {\n        key: index\n      }, label, index < currentLabels.length - 1 && React.createElement('span', null, ' / '));\n    }) : currentLabels[currentLabels.length - 1]))), React.createElement(CascaderMenu, {\n      ref: 'menu'\n    }));\n  };\n\n  return Cascader;\n}(Component);\n\nCascader.childContextTypes = {\n  component: PropTypes.any\n};\nCascader.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.shape({\n    value: PropTypes.string\n  })).isRequired,\n  props: PropTypes.object,\n  value: PropTypes.array,\n  placeholder: PropTypes.string,\n  disabled: PropTypes.bool,\n  clearable: PropTypes.bool,\n  changeOnSelect: PropTypes.bool,\n  popperClass: PropTypes.string,\n  expandTrigger: PropTypes.string,\n  filterable: PropTypes.bool,\n  size: PropTypes.string,\n  showAllLevels: PropTypes.bool,\n  debounce: PropTypes.number,\n  activeItemChange: PropTypes.func,\n  beforeFilter: PropTypes.func,\n  onChange: PropTypes.func\n};\nCascader.defaultProps = {\n  value: [],\n  clearable: false,\n  expandTrigger: 'click',\n  showAllLevels: true,\n  debounce: 300,\n  props: {\n    children: 'children',\n    label: 'label',\n    value: 'value',\n    disabled: 'disabled'\n  },\n  beforeFilter: function beforeFilter() {\n    return function () {};\n  }\n};\nexport default ClickOutside(Cascader);","map":null,"metadata":{},"sourceType":"module"}