{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { throttle } from 'throttle-debounce';\nimport { Component, PropTypes, Transition, View } from '../../libs';\nimport { addResizeListener, removeResizeListener } from '../../libs/utils/resize-event';\n\nvar Carousel = function (_Component) {\n  _inherits(Carousel, _Component);\n\n  function Carousel(props) {\n    _classCallCheck(this, Carousel);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      items: [],\n      activeIndex: -1,\n      containerWidth: 0,\n      timer: null,\n      hover: false\n    };\n    _this.throttledArrowClick = throttle(300, true, function (index) {\n      _this.setActiveItem(index);\n    });\n    _this.throttledIndicatorHover = throttle(300, function (index) {\n      _this.handleIndicatorHover(index);\n    });\n    _this.resetItemPosition = _this._resetItemPosition.bind(_this);\n    return _this;\n  }\n\n  Carousel.prototype.getChildContext = function getChildContext() {\n    return {\n      component: this\n    };\n  };\n\n  Carousel.prototype.componentDidMount = function componentDidMount() {\n    if (this.props.initialIndex < this.state.items.length && this.props.initialIndex >= 0) {\n      this.setState({\n        activeIndex: this.props.initialIndex\n      });\n    }\n\n    this.startTimer();\n  };\n\n  Carousel.prototype.componentDidUpdate = function componentDidUpdate(props, state) {\n    addResizeListener(this.refs.root, this.resetItemPosition);\n\n    if (state.activeIndex != this.state.activeIndex) {\n      this.resetItemPosition(state.activeIndex);\n\n      if (this.props.onChange) {\n        this.props.onChange(this.state.activeIndex, state.activeIndex);\n      }\n    }\n  };\n\n  Carousel.prototype.componentWillUnmount = function componentWillUnmount() {\n    removeResizeListener(this.refs.root, this.resetItemPosition);\n    this.pauseTimer();\n  };\n\n  Carousel.prototype.handleMouseEnter = function handleMouseEnter() {\n    this.setState({\n      hover: true\n    });\n    this.pauseTimer();\n  };\n\n  Carousel.prototype.handleMouseLeave = function handleMouseLeave() {\n    this.setState({\n      hover: false\n    });\n    this.startTimer();\n  };\n\n  Carousel.prototype.itemInStage = function itemInStage(item, index) {\n    var length = this.state.items.length;\n\n    if (index === length - 1 && item.state.inStage && this.state.items[0].state.active || item.state.inStage && this.state.items[index + 1] && this.state.items[index + 1].state.active) {\n      return 'left';\n    } else if (index === 0 && item.state.inStage && this.state.items[length - 1].state.active || item.state.inStage && this.state.items[index - 1] && this.state.items[index - 1].state.active) {\n      return 'right';\n    }\n\n    return false;\n  };\n\n  Carousel.prototype.handleButtonEnter = function handleButtonEnter(arrow) {\n    var _this2 = this;\n\n    this.state.items.forEach(function (item, index) {\n      if (arrow === _this2.itemInStage(item, index)) {\n        item.setState({\n          hover: true\n        });\n      }\n    });\n  };\n\n  Carousel.prototype.handleButtonLeave = function handleButtonLeave() {\n    this.state.items.forEach(function (item) {\n      item.setState({\n        hover: false\n      });\n    });\n  };\n\n  Carousel.prototype._resetItemPosition = function _resetItemPosition(oldIndex) {\n    var _this3 = this;\n\n    this.state.items.forEach(function (item, index) {\n      item.translateItem(index, _this3.state.activeIndex, oldIndex);\n    });\n  };\n\n  Carousel.prototype.playSlides = function playSlides() {\n    var activeIndex = this.state.activeIndex;\n\n    if (activeIndex < this.state.items.length - 1) {\n      activeIndex++;\n    } else {\n      activeIndex = 0;\n    }\n\n    this.setState({\n      activeIndex: activeIndex\n    });\n  };\n\n  Carousel.prototype.pauseTimer = function pauseTimer() {\n    clearInterval(this.timer);\n  };\n\n  Carousel.prototype.startTimer = function startTimer() {\n    if (this.props.interval <= 0 || !this.props.autoplay) return;\n    this.timer = setInterval(this.playSlides.bind(this), Number(this.props.interval));\n  };\n\n  Carousel.prototype.addItem = function addItem(item) {\n    this.state.items.push(item);\n    this.setActiveItem(0);\n  };\n\n  Carousel.prototype.removeItem = function removeItem(item) {\n    this.state.items.splice(this.state.items.indexOf(item), 1);\n    this.setActiveItem(0);\n  };\n\n  Carousel.prototype.setActiveItem = function setActiveItem(index) {\n    var activeIndex = this.state.activeIndex;\n\n    if (typeof index === 'string') {\n      var filteredItems = this.state.items.filter(function (item) {\n        return item.props.name === index;\n      });\n\n      if (filteredItems.length > 0) {\n        index = this.state.items.indexOf(filteredItems[0]);\n      }\n    }\n\n    index = Number(index);\n\n    if (isNaN(index) || index !== Math.floor(index)) {\n      process.env.NODE_ENV !== 'production' && console.warn('[Element Warn][Carousel]index must be an integer.');\n      return;\n    }\n\n    var length = this.state.items.length;\n\n    if (index < 0) {\n      activeIndex = length - 1;\n    } else if (index >= length) {\n      activeIndex = 0;\n    } else {\n      activeIndex = index;\n    }\n\n    this.setState({\n      activeIndex: activeIndex\n    });\n  };\n\n  Carousel.prototype.prev = function prev() {\n    this.setActiveItem(this.state.activeIndex - 1);\n  };\n\n  Carousel.prototype.next = function next() {\n    this.setActiveItem(this.state.activeIndex + 1);\n  };\n\n  Carousel.prototype.handleIndicatorClick = function handleIndicatorClick(index) {\n    this.setState({\n      activeIndex: index\n    });\n  };\n\n  Carousel.prototype.handleIndicatorHover = function handleIndicatorHover(index) {\n    if (this.props.trigger === 'hover' && index !== this.state.activeIndex) {\n      this.setState({\n        activeIndex: index\n      });\n    }\n  };\n\n  Carousel.prototype.render = function render() {\n    var _this4 = this;\n\n    var _props = this.props,\n        height = _props.height,\n        arrow = _props.arrow,\n        indicatorPosition = _props.indicatorPosition;\n    var _state = this.state,\n        hover = _state.hover,\n        activeIndex = _state.activeIndex,\n        items = _state.items;\n    return React.createElement('div', {\n      ref: 'root',\n      className: this.className('el-carousel', {\n        'el-carousel--card': this.iscard\n      }),\n      onMouseEnter: this.handleMouseEnter.bind(this),\n      onMouseLeave: this.handleMouseLeave.bind(this)\n    }, React.createElement('div', {\n      className: 'el-carousel__container',\n      style: {\n        height: height\n      }\n    }, React.createElement(Transition, {\n      name: 'carousel-arrow-left'\n    }, arrow !== 'never' && React.createElement(View, {\n      show: arrow === 'always' || hover\n    }, React.createElement('button', {\n      className: 'el-carousel__arrow el-carousel__arrow--left',\n      onMouseEnter: this.handleButtonEnter.bind(this, 'left'),\n      onMouseLeave: this.handleButtonLeave.bind(this),\n      onClick: this.throttledArrowClick.bind(this, activeIndex - 1)\n    }, React.createElement('i', {\n      className: 'el-icon-arrow-left'\n    })))), React.createElement(Transition, {\n      name: 'carousel-arrow-right'\n    }, arrow !== 'never' && React.createElement(View, {\n      show: arrow === 'always' || hover\n    }, React.createElement('button', {\n      className: 'el-carousel__arrow el-carousel__arrow--right',\n      onMouseEnter: this.handleButtonEnter.bind(this, 'right'),\n      onMouseLeave: this.handleButtonLeave.bind(this),\n      onClick: this.throttledArrowClick.bind(this, activeIndex + 1)\n    }, React.createElement('i', {\n      className: 'el-icon-arrow-right'\n    })))), this.props.children), indicatorPosition !== 'none' && React.createElement('ul', {\n      className: this.classNames('el-carousel__indicators', {\n        'el-carousel__indicators--outside': indicatorPosition === 'outside' || this.iscard\n      })\n    }, items.map(function (item, index) {\n      return React.createElement('li', {\n        key: index,\n        className: _this4.classNames('el-carousel__indicator', {\n          'is-active': index === activeIndex\n        }),\n        onMouseEnter: _this4.throttledIndicatorHover.bind(_this4, index),\n        onClick: _this4.handleIndicatorClick.bind(_this4, index)\n      }, React.createElement('button', {\n        className: 'el-carousel__button'\n      }));\n    })));\n  };\n\n  _createClass(Carousel, [{\n    key: 'iscard',\n    get: function get() {\n      var type = this.props.type;\n\n      if (type) {\n        return type === 'card' || type === 'flatcard';\n      }\n\n      return false;\n    }\n  }]);\n\n  return Carousel;\n}(Component);\n\nexport default Carousel;\nCarousel.childContextTypes = {\n  component: PropTypes.any\n};\nCarousel.propTypes = {\n  initialIndex: PropTypes.number,\n  height: PropTypes.string,\n  trigger: PropTypes.string,\n  autoplay: PropTypes.bool,\n  interval: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  indicatorPosition: PropTypes.string,\n  indicator: PropTypes.bool,\n  arrow: PropTypes.string,\n  type: PropTypes.oneOf(['card', 'flatcard']),\n  onChange: PropTypes.func\n};\nCarousel.defaultProps = {\n  initialIndex: 0,\n  trigger: 'hover',\n  autoplay: true,\n  interval: 3000,\n  indicator: true,\n  arrow: 'hover'\n};","map":null,"metadata":{},"sourceType":"module"}