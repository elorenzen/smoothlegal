{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { PropTypes } from '../../../libs';\nimport Locale from '../../locale';\nimport Input from '../../input';\nimport TimePanel from './TimePanel';\nimport { MountBody } from '../MountBody';\nimport { SELECTION_MODES, deconstructDate, formatDate, parseDate, toDate } from '../utils';\nimport { DateTable, MonthTable, YearTable } from '../basic';\nimport { PopperBase } from './PopperBase';\nimport { PLACEMENT_MAP } from '../constants';\nvar PICKER_VIEWS = {\n  YEAR: 'year',\n  MONTH: 'month',\n  DATE: 'date'\n};\n\nvar DatePanel = function (_PopperBase) {\n  _inherits(DatePanel, _PopperBase);\n\n  _createClass(DatePanel, null, [{\n    key: 'propTypes',\n    get: function get() {\n      return Object.assign({\n        // user picked date value\n        // value: Date | null\n        value: PropTypes.instanceOf(Date),\n        // (Date)=>void\n        onPick: PropTypes.func.isRequired,\n        isShowTime: PropTypes.bool,\n        showWeekNumber: PropTypes.bool,\n        format: PropTypes.string,\n        // Array[{text: String, onClick: (picker)=>()}]\n        shortcuts: PropTypes.arrayOf(PropTypes.shape({\n          text: PropTypes.string.isRequired,\n          // ()=>()\n          onClick: PropTypes.func.isRequired\n        })),\n        selectionMode: PropTypes.oneOf(Object.keys(SELECTION_MODES).map(function (e) {\n          return SELECTION_MODES[e];\n        })),\n        // (Date)=>bool, if true, disabled\n        disabledDate: PropTypes.func,\n        firstDayOfWeek: PropTypes.range(0, 6)\n      }, PopperBase.propTypes);\n    }\n  }]);\n\n  function DatePanel(props) {\n    _classCallCheck(this, DatePanel);\n\n    var _this = _possibleConstructorReturn(this, _PopperBase.call(this, props));\n\n    var currentView = PICKER_VIEWS.DATE;\n\n    switch (props.selectionMode) {\n      case SELECTION_MODES.MONTH:\n        currentView = PICKER_VIEWS.MONTH;\n        break;\n\n      case SELECTION_MODES.YEAR:\n        currentView = PICKER_VIEWS.YEAR;\n        break;\n    }\n\n    _this.state = {\n      currentView: currentView,\n      timePickerVisible: false,\n      pickerWidth: 0,\n      date: new Date() // current view's date\n\n    };\n\n    if (props.value) {\n      _this.state.date = new Date(props.value);\n    }\n\n    return _this;\n  }\n\n  DatePanel.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var date = new Date();\n\n    if (nextProps.value) {\n      date = toDate(nextProps.value);\n    }\n\n    this.setState({\n      date: date\n    });\n  };\n\n  DatePanel.prototype.resetDate = function resetDate() {\n    this.date = new Date(this.date);\n  };\n\n  DatePanel.prototype.showMonthPicker = function showMonthPicker() {\n    this.setState({\n      currentView: PICKER_VIEWS.MONTH\n    });\n  };\n\n  DatePanel.prototype.showYearPicker = function showYearPicker() {\n    this.setState({\n      currentView: PICKER_VIEWS.YEAR\n    });\n  };\n\n  DatePanel.prototype.prevMonth = function prevMonth() {\n    var _this2 = this;\n\n    this.updateState(function () {\n      var date = _this2.state.date;\n\n      var _deconstructDate = deconstructDate(date),\n          month = _deconstructDate.month,\n          year = _deconstructDate.year;\n\n      date.setMonth(month, 1);\n\n      if (month == 0) {\n        date.setFullYear(year - 1);\n        date.setMonth(11);\n      } else {\n        date.setMonth(month - 1);\n      }\n    });\n  };\n\n  DatePanel.prototype.nextMonth = function nextMonth() {\n    var _this3 = this;\n\n    this.updateState(function () {\n      var date = _this3.state.date;\n\n      var _deconstructDate2 = deconstructDate(date),\n          month = _deconstructDate2.month,\n          year = _deconstructDate2.year;\n\n      date.setMonth(month, 1);\n\n      if (month == 11) {\n        date.setFullYear(year + 1);\n        date.setMonth(0);\n      } else {\n        date.setMonth(month + 1);\n      }\n    });\n  };\n\n  DatePanel.prototype.nextYear = function nextYear() {\n    var _this4 = this;\n\n    this.updateState(function () {\n      var _state = _this4.state,\n          date = _state.date,\n          currentView = _state.currentView;\n\n      var _deconstructDate3 = deconstructDate(date),\n          year = _deconstructDate3.year;\n\n      if (currentView === 'year') {\n        date.setFullYear(year + 10);\n      } else {\n        date.setFullYear(year + 1);\n      }\n    });\n  };\n\n  DatePanel.prototype.updateState = function updateState(cb) {\n    cb(this.state);\n    this.setState({});\n  };\n\n  DatePanel.prototype.prevYear = function prevYear() {\n    var _this5 = this;\n\n    this.updateState(function () {\n      var _state2 = _this5.state,\n          date = _state2.date,\n          currentView = _state2.currentView;\n\n      var _deconstructDate4 = deconstructDate(date),\n          year = _deconstructDate4.year;\n\n      if (currentView === 'year') {\n        date.setFullYear(year - 10);\n      } else {\n        date.setFullYear(year - 1);\n      }\n    });\n  };\n\n  DatePanel.prototype.handleShortcutClick = function handleShortcutClick(shortcut) {\n    shortcut.onClick();\n  };\n\n  DatePanel.prototype.handleTimePick = function handleTimePick(pickedDate, isKeepPanel) {\n    this.updateState(function (state) {\n      if (pickedDate) {\n        var oldDate = state.date;\n        oldDate.setHours(pickedDate.getHours());\n        oldDate.setMinutes(pickedDate.getMinutes());\n        oldDate.setSeconds(pickedDate.getSeconds());\n      }\n\n      state.timePickerVisible = isKeepPanel;\n    });\n  };\n\n  DatePanel.prototype.handleMonthPick = function handleMonthPick(month) {\n    var _this6 = this;\n\n    this.updateState(function (state) {\n      var date = state.date;\n      var selectionMode = _this6.props.selectionMode;\n\n      var _deconstructDate5 = deconstructDate(date),\n          year = _deconstructDate5.year;\n\n      if (selectionMode !== SELECTION_MODES.MONTH) {\n        date.setMonth(month);\n        state.currentView = PICKER_VIEWS.DATE;\n      } else {\n        date.setMonth(month);\n        date.setFullYear(year);\n\n        _this6.props.onPick(new Date(year, month, 1));\n      }\n    });\n  };\n\n  DatePanel.prototype.handleDatePick = function handleDatePick(value) {\n    var _this7 = this;\n\n    this.updateState(function (state) {\n      var date = state.date;\n      var _props = _this7.props,\n          selectionMode = _props.selectionMode,\n          isShowTime = _props.isShowTime,\n          onPick = _props.onPick;\n      var pdate = value.date;\n\n      if (selectionMode === SELECTION_MODES.DAY) {\n        if (!isShowTime) {\n          onPick(new Date(pdate.getTime()));\n        }\n\n        date.setTime(pdate.getTime());\n      } else if (selectionMode === SELECTION_MODES.WEEK) {\n        onPick(pdate);\n      }\n    });\n  };\n\n  DatePanel.prototype.handleYearPick = function handleYearPick(year) {\n    var _this8 = this;\n\n    this.updateState(function (state) {\n      var _props2 = _this8.props,\n          onPick = _props2.onPick,\n          selectionMode = _props2.selectionMode;\n      var date = state.date;\n      date.setFullYear(year);\n\n      if (selectionMode === SELECTION_MODES.YEAR) {\n        onPick(new Date(year, 0));\n      } else {\n        state.currentView = PICKER_VIEWS.MONTH;\n      }\n    });\n  };\n\n  DatePanel.prototype.changeToNow = function changeToNow() {\n    var now = new Date();\n    this.props.onPick(now);\n    this.setState({\n      date: now\n    });\n  };\n\n  DatePanel.prototype.confirm = function confirm() {\n    this.props.onPick(new Date(this.state.date.getTime()));\n  };\n\n  DatePanel.prototype.resetView = function resetView() {\n    var selectionMode = this.props.selectionMode;\n    this.updateState(function (state) {\n      if (selectionMode === SELECTION_MODES.MONTH) {\n        state.currentView = PICKER_VIEWS.MONTH;\n      } else if (selectionMode === SELECTION_MODES.YEAR) {\n        state.currentView = PICKER_VIEWS.YEAR;\n      } else {\n        state.currentView = PICKER_VIEWS.DATE;\n      }\n    });\n  };\n\n  DatePanel.prototype.yearLabel = function yearLabel() {\n    var _state3 = this.state,\n        currentView = _state3.currentView,\n        date = _state3.date;\n\n    var _deconstructDate6 = deconstructDate(date),\n        year = _deconstructDate6.year;\n\n    var yearTranslation = Locale.t('el.datepicker.year');\n\n    if (currentView === 'year') {\n      var startYear = Math.floor(year / 10) * 10;\n\n      if (yearTranslation) {\n        return startYear + ' ' + yearTranslation + '-' + (startYear + 9) + ' ' + yearTranslation;\n      }\n\n      return startYear + ' - ' + (startYear + 9);\n    }\n\n    return year + ' ' + yearTranslation;\n  }; // end: ------ public methods\n\n\n  DatePanel.prototype._pickerContent = function _pickerContent() {\n    var _props3 = this.props,\n        value = _props3.value,\n        selectionMode = _props3.selectionMode,\n        disabledDate = _props3.disabledDate,\n        showWeekNumber = _props3.showWeekNumber,\n        firstDayOfWeek = _props3.firstDayOfWeek;\n    var date = this.state.date;\n    var currentView = this.state.currentView;\n    var result = null;\n\n    switch (currentView) {\n      case PICKER_VIEWS.DATE:\n        result = React.createElement(DateTable, {\n          onPick: this.handleDatePick.bind(this),\n          date: date,\n          value: value,\n          selectionMode: selectionMode,\n          disabledDate: disabledDate,\n          showWeekNumber: showWeekNumber,\n          firstDayOfWeek: firstDayOfWeek\n        });\n        break;\n\n      case PICKER_VIEWS.YEAR:\n        result = React.createElement(YearTable, {\n          ref: 'yearTable',\n          value: value,\n          date: date,\n          onPick: this.handleYearPick.bind(this),\n          disabledDate: disabledDate\n        });\n        break;\n\n      case PICKER_VIEWS.MONTH:\n        result = React.createElement(MonthTable, {\n          value: value,\n          date: date,\n          onPick: this.handleMonthPick.bind(this),\n          disabledDate: disabledDate\n        });\n        break;\n\n      default:\n        throw new Error('invalid currentView value');\n    }\n\n    return result;\n  };\n\n  DatePanel.prototype.render = function render() {\n    var _this9 = this;\n\n    var _props4 = this.props,\n        isShowTime = _props4.isShowTime,\n        shortcuts = _props4.shortcuts;\n    var _state4 = this.state,\n        currentView = _state4.currentView,\n        date = _state4.date,\n        pickerWidth = _state4.pickerWidth,\n        timePickerVisible = _state4.timePickerVisible;\n\n    var _deconstructDate7 = deconstructDate(date),\n        month = _deconstructDate7.month;\n\n    var t = Locale.t;\n    return React.createElement('div', {\n      ref: 'root',\n      className: this.classNames('el-picker-panel el-date-picker', {\n        'has-sidebar': shortcuts,\n        'has-time': isShowTime\n      })\n    }, React.createElement('div', {\n      className: 'el-picker-panel__body-wrapper'\n    }, Array.isArray(shortcuts) && React.createElement('div', {\n      className: 'el-picker-panel__sidebar'\n    }, shortcuts.map(function (e, idx) {\n      return React.createElement('button', {\n        key: idx,\n        type: 'button',\n        className: 'el-picker-panel__shortcut',\n        onClick: function onClick() {\n          return _this9.handleShortcutClick(e);\n        }\n      }, e.text);\n    })), React.createElement('div', {\n      className: 'el-picker-panel__body'\n    }, isShowTime && React.createElement('div', {\n      className: 'el-date-picker__time-header'\n    }, React.createElement('span', {\n      className: 'el-date-picker__editor-wrap'\n    }, React.createElement(Input, {\n      placeholder: t('el.datepicker.selectDate'),\n      value: this.visibleDate,\n      size: 'small',\n      onChange: function onChange(date) {\n        return _this9.visibleDate = date;\n      }\n    })), React.createElement('span', {\n      className: 'el-date-picker__editor-wrap'\n    }, React.createElement(Input, {\n      ref: 'input',\n      onFocus: function onFocus() {\n        return _this9.setState({\n          timePickerVisible: !_this9.state.timePickerVisible\n        });\n      },\n      placeholder: t('el.datepicker.selectTime'),\n      value: this.visibleTime,\n      size: 'small',\n      onChange: function onChange(date) {\n        return _this9.visibleDate = date;\n      }\n    }), timePickerVisible && React.createElement(MountBody, null, React.createElement(TimePanel, {\n      ref: 'timepicker',\n      currentDate: new Date(date.getTime())\n      /* should i dont mutate date directly here ? */\n      ,\n      pickerWidth: pickerWidth\n      /*\n      todo: pickerWidth? in original elmenent repo, this width is set by getting input with using getClientRect() method\n      but it seems work even though I purposely leave this logic unimplemented. To be honest it would require some hack to get\n      this actually done, since I can't do any setState method on componentDidUpdate method.\n      DateRangePicker has same issue\n      */\n      ,\n      onPicked: this.handleTimePick.bind(this),\n      format: this.timeFormat,\n      getPopperRefElement: function getPopperRefElement() {\n        return ReactDOM.findDOMNode(_this9.refs.input);\n      },\n      popperMixinOption: {\n        placement: PLACEMENT_MAP[this.props.align] || PLACEMENT_MAP.left\n      },\n      onCancel: function onCancel() {\n        return _this9.setState({\n          timePickerVisible: false\n        });\n      }\n    })))), currentView !== 'time' && React.createElement('div', {\n      className: 'el-date-picker__header'\n    }, React.createElement('button', {\n      type: 'button',\n      onClick: this.prevYear.bind(this),\n      className: 'el-picker-panel__icon-btn el-date-picker__prev-btn el-icon-d-arrow-left'\n    }), currentView === PICKER_VIEWS.DATE && React.createElement('button', {\n      type: 'button',\n      onClick: this.prevMonth.bind(this),\n      className: 'el-picker-panel__icon-btn el-date-picker__prev-btn el-icon-arrow-left'\n    }), React.createElement('span', {\n      onClick: this.showYearPicker.bind(this),\n      className: 'el-date-picker__header-label'\n    }, this.yearLabel()), currentView === PICKER_VIEWS.DATE && React.createElement('span', {\n      onClick: this.showMonthPicker.bind(this),\n      className: this.classNames('el-date-picker__header-label', {\n        active: currentView === 'month'\n      })\n    }, t('el.datepicker.month' + (month + 1))), React.createElement('button', {\n      type: 'button',\n      onClick: this.nextYear.bind(this),\n      className: 'el-picker-panel__icon-btn el-date-picker__next-btn el-icon-d-arrow-right'\n    }), currentView === PICKER_VIEWS.DATE && React.createElement('button', {\n      type: 'button',\n      onClick: this.nextMonth.bind(this),\n      className: 'el-picker-panel__icon-btn el-date-picker__next-btn el-icon-arrow-right'\n    })), React.createElement('div', {\n      className: 'el-picker-panel__content'\n    }, this._pickerContent()))), isShowTime && currentView === PICKER_VIEWS.DATE && React.createElement('div', {\n      className: 'el-picker-panel__footer'\n    }, React.createElement('a', {\n      href: 'JavaScript:',\n      className: 'el-picker-panel__link-btn',\n      onClick: this.changeToNow.bind(this)\n    }, t('el.datepicker.now')), React.createElement('button', {\n      type: 'button',\n      className: 'el-picker-panel__btn',\n      onClick: function onClick() {\n        return _this9.confirm();\n      }\n    }, t('el.datepicker.confirm'))));\n  };\n\n  _createClass(DatePanel, [{\n    key: 'visibleTime',\n    get: function get() {\n      return formatDate(this.state.date, this.timeFormat);\n    },\n    set: function set(val) {\n      if (val) {\n        var ndate = parseDate(val, this.timeFormat);\n        var date = this.state.date;\n\n        if (ndate) {\n          ndate.setFullYear(date.getFullYear());\n          ndate.setMonth(date.getMonth());\n          ndate.setDate(date.getDate());\n          this.setState({\n            date: ndate,\n            timePickerVisible: false\n          });\n        }\n      }\n    }\n  }, {\n    key: 'visibleDate',\n    get: function get() {\n      return formatDate(this.state.date, this.dateFormat);\n    },\n    set: function set(val) {\n      var ndate = parseDate(val, this.dateFormat);\n\n      if (!ndate) {\n        return;\n      }\n\n      var disabledDate = this.props.disabledDate;\n      var date = this.state.date;\n\n      if (typeof disabledDate === 'function' && disabledDate(ndate)) {\n        return;\n      }\n\n      ndate.setHours(date.getHours());\n      ndate.setMinutes(date.getMinutes());\n      ndate.setSeconds(date.getSeconds());\n      this.setState({\n        date: ndate\n      });\n      this.resetView();\n    }\n  }, {\n    key: 'timeFormat',\n    get: function get() {\n      var format = this.props.format;\n\n      if (format && format.indexOf('ss') === -1) {\n        return 'HH:mm';\n      } else {\n        return 'HH:mm:ss';\n      }\n    }\n  }, {\n    key: 'dateFormat',\n    get: function get() {\n      if (this.props.format) return this.props.format.replace('HH:mm', '').replace(':ss', '').trim();else return 'yyyy-MM-dd';\n    }\n  }]);\n\n  return DatePanel;\n}(PopperBase);\n\nexport default DatePanel;\nDatePanel.defaultProps = {\n  isShowTime: false,\n  selectionMode: SELECTION_MODES.DAY\n};","map":null,"metadata":{},"sourceType":"module"}