{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ClickOutside from 'react-click-outside';\nimport { Component, PropTypes } from '../../libs';\nimport Button from '../button';\n\nvar Dropdown = function (_Component) {\n  _inherits(Dropdown, _Component);\n\n  function Dropdown(props) {\n    _classCallCheck(this, Dropdown);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      visible: false\n    };\n    return _this;\n  }\n\n  Dropdown.prototype.getChildContext = function getChildContext() {\n    return {\n      component: this\n    };\n  };\n\n  Dropdown.prototype.componentDidMount = function componentDidMount() {\n    this.initEvent();\n  };\n\n  Dropdown.prototype.componentWillUpdate = function componentWillUpdate(props, state) {\n    if (state.visible != this.state.visible) {\n      this.refs.dropdown.onVisibleChange(state.visible);\n\n      if (this.props.onVisibleChange) {\n        this.props.onVisibleChange(state.visible);\n      }\n    }\n  };\n\n  Dropdown.prototype.handleClickOutside = function handleClickOutside() {\n    if (this.state.visible) {\n      this.setState({\n        visible: false\n      });\n    }\n  };\n\n  Dropdown.prototype.show = function show() {\n    var _this2 = this;\n\n    clearTimeout(this.timeout);\n    this.timeout = setTimeout(function () {\n      return _this2.setState({\n        visible: true\n      });\n    }, 250);\n  };\n\n  Dropdown.prototype.hide = function hide() {\n    var _this3 = this;\n\n    clearTimeout(this.timeout);\n    this.timeout = setTimeout(function () {\n      return _this3.setState({\n        visible: false\n      });\n    }, 150);\n  };\n\n  Dropdown.prototype.handleClick = function handleClick() {\n    this.setState({\n      visible: !this.state.visible\n    });\n  };\n\n  Dropdown.prototype.initEvent = function initEvent() {\n    var _props = this.props,\n        trigger = _props.trigger,\n        splitButton = _props.splitButton;\n    var triggerElm = ReactDOM.findDOMNode(splitButton ? this.refs.trigger : this.refs.default);\n\n    if (trigger === 'hover') {\n      triggerElm.addEventListener('mouseenter', this.show.bind(this));\n      triggerElm.addEventListener('mouseleave', this.hide.bind(this));\n      var dropdownElm = ReactDOM.findDOMNode(this.refs.dropdown);\n      dropdownElm.addEventListener('mouseenter', this.show.bind(this));\n      dropdownElm.addEventListener('mouseleave', this.hide.bind(this));\n    } else if (trigger === 'click') {\n      triggerElm.addEventListener('click', this.handleClick.bind(this));\n    }\n  };\n\n  Dropdown.prototype.handleMenuItemClick = function handleMenuItemClick(command, instance) {\n    var _this4 = this;\n\n    if (this.props.hideOnClick) {\n      this.setState({\n        visible: false\n      });\n    }\n\n    if (this.props.onCommand) {\n      setTimeout(function () {\n        _this4.props.onCommand(command, instance);\n      });\n    }\n  };\n\n  Dropdown.prototype.render = function render() {\n    var _props2 = this.props,\n        splitButton = _props2.splitButton,\n        type = _props2.type,\n        size = _props2.size,\n        menu = _props2.menu;\n    return React.createElement('div', {\n      style: this.style(),\n      className: this.className('el-dropdown')\n    }, splitButton ? React.createElement(Button.Group, null, React.createElement(Button, {\n      type: type,\n      size: size,\n      onClick: this.props.onClick.bind(this)\n    }, this.props.children), React.createElement(Button, {\n      ref: 'trigger',\n      type: type,\n      size: size,\n      className: 'el-dropdown__caret-button'\n    }, React.createElement('i', {\n      className: 'el-dropdown__icon el-icon-caret-bottom'\n    }))) : React.cloneElement(this.props.children, {\n      ref: 'default'\n    }), React.cloneElement(menu, {\n      ref: 'dropdown'\n    }));\n  };\n\n  return Dropdown;\n}(Component);\n\nDropdown.childContextTypes = {\n  component: PropTypes.any\n};\nDropdown.propTypes = {\n  menu: PropTypes.node.isRequired,\n  type: PropTypes.string,\n  size: PropTypes.string,\n  trigger: PropTypes.oneOf(['hover', 'click']),\n  menuAlign: PropTypes.oneOf(['start', 'end']),\n  splitButton: PropTypes.bool,\n  hideOnClick: PropTypes.bool,\n  onClick: PropTypes.func,\n  onCommand: PropTypes.func,\n  onVisibleChange: PropTypes.func\n};\nDropdown.defaultProps = {\n  hideOnClick: true,\n  trigger: 'hover',\n  menuAlign: 'end'\n};\nexport default ClickOutside(Dropdown);","map":null,"metadata":{},"sourceType":"module"}