{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { PropTypes, Component } from '../../libs';\nimport { EventRegister } from '../../libs/internal';\nimport Input from '../input';\nimport { PLACEMENT_MAP, HAVE_TRIGGER_TYPES, TYPE_VALUE_RESOLVER_MAP, DEFAULT_FORMATS } from './constants';\nimport { Errors, require_condition, IDGenerator } from '../../libs/utils';\nimport { MountBody } from './MountBody';\nvar idGen = new IDGenerator();\n\nvar haveTriggerType = function haveTriggerType(type) {\n  return HAVE_TRIGGER_TYPES.indexOf(type) !== -1;\n};\n\nvar isValidValue = function isValidValue(value) {\n  if (value instanceof Date) return true;\n  if (Array.isArray(value) && value.length !== 0 && value[0] instanceof Date) return true;\n  return false;\n}; // only considers date-picker's value: Date or [Date, Date]\n\n\nvar valueEquals = function valueEquals(a, b) {\n  var aIsArray = Array.isArray(a);\n  var bIsArray = Array.isArray(b);\n\n  var isEqual = function isEqual(a, b) {\n    // equal if a, b date is equal or both is null or undefined\n    var equal = false;\n    if (a && b) equal = a.getTime() === b.getTime();else equal = a === b && a == null;\n    return equal;\n  };\n\n  if (aIsArray && bIsArray) {\n    return isEqual(a[0], b[0]) && isEqual(a[1], b[1]);\n  }\n\n  if (!aIsArray && !bIsArray) {\n    return isEqual(a, b);\n  }\n\n  return false;\n};\n\nvar BasePicker = function (_Component) {\n  _inherits(BasePicker, _Component);\n\n  _createClass(BasePicker, null, [{\n    key: 'propTypes',\n    get: function get() {\n      return {\n        align: PropTypes.oneOf(['left', 'center', 'right']),\n        className: PropTypes.string,\n        format: PropTypes.string,\n        isShowTrigger: PropTypes.bool,\n        isReadOnly: PropTypes.bool,\n        isDisabled: PropTypes.bool,\n        placeholder: PropTypes.string,\n        onFocus: PropTypes.func,\n        onBlur: PropTypes.func,\n        // (Date|Date[]|null)=>(), null when click on clear icon\n        onChange: PropTypes.func,\n        // time select pannel:\n        value: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.arrayOf(PropTypes.instanceOf(Date))])\n      };\n    }\n  }, {\n    key: 'defaultProps',\n    get: function get() {\n      return {\n        value: new Date(),\n        // (thisReactElement)=>Unit\n        onFocus: function onFocus() {},\n        onBlur: function onBlur() {}\n      };\n    }\n  }]);\n\n  function BasePicker(props, _type) {\n    var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, BasePicker);\n\n    require_condition(typeof _type === 'string');\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.type = _type; // type need to be set first\n\n    _this.state = Object.assign({}, state, {\n      pickerVisible: false\n    }, _this.propsToState(props));\n    _this.clickOutsideId = 'clickOutsideId_' + idGen.next();\n    return _this;\n  } // ---: start, abstract methods\n  // (state, props)=>ReactElement\n\n\n  BasePicker.prototype.pickerPanel = function pickerPanel(state, props) {\n    throw new Errors.MethodImplementationRequiredError(props);\n  };\n\n  BasePicker.prototype.getFormatSeparator = function getFormatSeparator() {\n    return undefined;\n  }; // ---: end, abstract methods\n\n\n  BasePicker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    this.setState(this.propsToState(nextProps));\n  };\n  /**\n   * onPicked should only be called from picker pannel instance\n   * and should never return a null date instance\n   *\n   * @param value: Date|Date[]|null\n   * @param isKeepPannel: boolean = false\n   */\n\n\n  BasePicker.prototype.onPicked = function onPicked(value) {\n    var isKeepPannel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false; //only change input value on picked triggered\n\n    var hasChanged = !valueEquals(this.state.value, value);\n    this.setState({\n      pickerVisible: isKeepPannel,\n      value: value,\n      text: this.dateToStr(value)\n    });\n\n    if (hasChanged) {\n      this.props.onChange(value);\n      this.context.form && this.context.form.onFieldChange();\n    }\n  };\n\n  BasePicker.prototype.dateToStr = function dateToStr(date) {\n    if (!isValidValue(date)) return '';\n    var tdate = date;\n    var formatter = (TYPE_VALUE_RESOLVER_MAP[this.type] || TYPE_VALUE_RESOLVER_MAP['default']).formatter;\n    var result = formatter(tdate, this.getFormat(), this.getFormatSeparator());\n    return result;\n  }; // (string) => Date | null\n\n\n  BasePicker.prototype.parseDate = function parseDate(dateStr) {\n    if (!dateStr) return null;\n    var type = this.type;\n    var parser = (TYPE_VALUE_RESOLVER_MAP[type] || TYPE_VALUE_RESOLVER_MAP['default']).parser;\n    return parser(dateStr, this.getFormat(), this.getFormatSeparator());\n  };\n\n  BasePicker.prototype.getFormat = function getFormat() {\n    return this.props.format || DEFAULT_FORMATS[this.type];\n  };\n\n  BasePicker.prototype.propsToState = function propsToState(props) {\n    var state = {};\n\n    if (this.isDateValid(props.value)) {\n      state.text = this.dateToStr(props.value);\n      state.value = props.value;\n    } else {\n      state.text = '';\n      state.value = null;\n    } // if (state.value == null) {\n    //   state.value = new Date()\n    // }\n\n\n    return state;\n  };\n\n  BasePicker.prototype.triggerClass = function triggerClass() {\n    return this.type.includes('time') ? 'el-icon-time' : 'el-icon-date';\n  };\n\n  BasePicker.prototype.calcIsShowTrigger = function calcIsShowTrigger() {\n    if (this.props.isShowTrigger != null) {\n      return !!this.props.isShowTrigger;\n    } else {\n      return haveTriggerType(this.type);\n    }\n  };\n\n  BasePicker.prototype.handleFocus = function handleFocus() {\n    var _this2 = this;\n\n    this.isInputFocus = true;\n\n    if (haveTriggerType(this.type) && !this.state.pickerVisible) {\n      this.setState({\n        pickerVisible: true\n      }, function () {\n        _this2.props.onFocus(_this2);\n      });\n    }\n  };\n\n  BasePicker.prototype.handleBlur = function handleBlur() {\n    this.isInputFocus = false;\n    this.props.onBlur(this);\n  };\n\n  BasePicker.prototype.handleKeydown = function handleKeydown(evt) {\n    var keyCode = evt.keyCode; // tab\n\n    if (keyCode === 9 || keyCode === 27) {\n      this.setState({\n        pickerVisible: false\n      });\n      evt.stopPropagation();\n    }\n  };\n\n  BasePicker.prototype.togglePickerVisible = function togglePickerVisible() {\n    this.setState({\n      pickerVisible: !this.state.pickerVisible\n    });\n  };\n\n  BasePicker.prototype.isDateValid = function isDateValid(date) {\n    return date == null || isValidValue(date);\n  }; // return true on condition\n  //  * input is parsable to date\n  //  * also meet your other condition\n\n\n  BasePicker.prototype.isInputValid = function isInputValid(value) {\n    var parseable = this.parseDate(value);\n\n    if (!parseable) {\n      return false;\n    }\n\n    var isdatevalid = this.isDateValid(parseable);\n\n    if (!isdatevalid) {\n      return false;\n    }\n\n    return true;\n  };\n\n  BasePicker.prototype.handleClickOutside = function handleClickOutside(evt) {\n    var _state = this.state,\n        value = _state.value,\n        pickerVisible = _state.pickerVisible;\n\n    if (!this.isInputFocus && !pickerVisible) {\n      return;\n    }\n\n    if (this.domRoot.contains(evt.target)) return;\n    if (this.pickerProxy && this.pickerProxy.contains(evt)) return;\n\n    if (this.isDateValid(value)) {\n      this.setState({\n        pickerVisible: false\n      });\n      this.props.onChange(value);\n      this.context.form && this.context.form.onFieldChange();\n    } else {\n      this.setState({\n        pickerVisible: false,\n        text: this.dateToStr(value)\n      });\n    }\n  };\n\n  BasePicker.prototype.handleClickIcon = function handleClickIcon() {\n    var _props = this.props,\n        isReadOnly = _props.isReadOnly,\n        isDisabled = _props.isDisabled;\n    var text = this.state.text;\n    if (isReadOnly || isDisabled) return;\n\n    if (!text) {\n      this.togglePickerVisible();\n    } else {\n      this.setState({\n        text: '',\n        value: null,\n        pickerVisible: false\n      });\n      this.props.onChange(null);\n      this.context.form && this.context.form.onFieldChange();\n    }\n  };\n\n  BasePicker.prototype.render = function render() {\n    var _this3 = this;\n\n    var _props2 = this.props,\n        isReadOnly = _props2.isReadOnly,\n        placeholder = _props2.placeholder,\n        isDisabled = _props2.isDisabled,\n        className = _props2.className;\n    var _state2 = this.state,\n        pickerVisible = _state2.pickerVisible,\n        value = _state2.value,\n        text = _state2.text,\n        isShowClose = _state2.isShowClose;\n\n    var createIconSlot = function createIconSlot() {\n      if (_this3.calcIsShowTrigger()) {\n        var cls = isShowClose ? 'el-icon-close' : _this3.triggerClass();\n        return React.createElement('i', {\n          className: _this3.classNames('el-input__icon', cls),\n          onClick: _this3.handleClickIcon.bind(_this3),\n          onMouseEnter: function onMouseEnter() {\n            if (isReadOnly || isDisabled) return;\n\n            if (text) {\n              _this3.setState({\n                isShowClose: true\n              });\n            }\n          },\n          onMouseLeave: function onMouseLeave() {\n            _this3.setState({\n              isShowClose: false\n            });\n          }\n        });\n      } else {\n        return null;\n      }\n    };\n\n    var createPickerPanel = function createPickerPanel() {\n      if (pickerVisible) {\n        /* eslint-disable */\n        var _props3 = _this3.props,\n            _placeholder = _props3.placeholder,\n            onFocus = _props3.onFocus,\n            onBlur = _props3.onBlur,\n            onChange = _props3.onChange,\n            others = _objectWithoutProperties(_props3, ['placeholder', 'onFocus', 'onBlur', 'onChange']);\n        /* eslint-enable */\n\n\n        return React.createElement(MountBody, {\n          ref: function ref(e) {\n            return _this3.pickerProxy = e;\n          }\n        }, _this3.pickerPanel(_this3.state, _extends({}, others, {\n          getPopperRefElement: function getPopperRefElement() {\n            return ReactDOM.findDOMNode(_this3.refs.inputRoot);\n          },\n          popperMixinOption: {\n            placement: PLACEMENT_MAP[_this3.props.align] || PLACEMENT_MAP.left\n          }\n        })));\n      } else {\n        return null;\n      }\n    };\n\n    return React.createElement('span', {\n      className: this.classNames('el-date-editor', className, {\n        'is-have-trigger': this.calcIsShowTrigger(),\n        'is-active': pickerVisible,\n        'is-filled': !!value\n      }),\n      ref: function ref(v) {\n        return _this3.domRoot = v;\n      }\n    }, React.createElement(EventRegister, {\n      id: this.clickOutsideId,\n      target: document,\n      eventName: 'click',\n      func: this.handleClickOutside.bind(this)\n    }), React.createElement(Input, {\n      className: this.classNames('el-date-editor el-date-editor--' + this.type),\n      readOnly: isReadOnly,\n      disabled: isDisabled,\n      type: 'text',\n      placeholder: placeholder,\n      onFocus: this.handleFocus.bind(this),\n      onBlur: this.handleBlur.bind(this),\n      onKeyDown: this.handleKeydown.bind(this),\n      onChange: function onChange(value) {\n        var iptxt = value;\n        var nstate = {\n          text: iptxt\n        };\n\n        if (iptxt.trim() === '' || !_this3.isInputValid(iptxt)) {\n          nstate.value = null;\n        } else {\n          //only set value on a valid date input\n          nstate.value = _this3.parseDate(iptxt);\n        }\n\n        _this3.setState(nstate);\n      },\n      ref: 'inputRoot',\n      value: text,\n      icon: createIconSlot()\n    }), createPickerPanel());\n  };\n\n  return BasePicker;\n}(Component);\n\nexport default BasePicker;\nBasePicker.contextTypes = {\n  form: PropTypes.any\n};","map":null,"metadata":{},"sourceType":"module"}