{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport { Component, PropTypes } from '../../libs';\nimport Cover from './Cover';\n\nvar IframeUpload = function (_Component) {\n  _inherits(IframeUpload, _Component);\n\n  function IframeUpload(props) {\n    _classCallCheck(this, IframeUpload);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      dragOver: false,\n      file: null,\n      disabled: false,\n      frameName: 'frame-' + Date.now()\n    };\n    return _this;\n  }\n\n  IframeUpload.prototype.componentDidMount = function componentDidMount() {\n    var _props = this.props,\n        action = _props.action,\n        onSuccess = _props.onSuccess,\n        onError = _props.onError;\n    var file = this.state.file;\n    window.addEventListener('message', function (event) {\n      var _ref = new URL(action),\n          origin = _ref.origin;\n\n      if (event.origin !== origin) return false;\n      var response = event.data;\n\n      if (response.result === 'success') {\n        onSuccess(response, file);\n      } else if (response.result === 'failed') {\n        onError(response, file);\n      }\n    }, false);\n  };\n\n  IframeUpload.prototype.onload = function onload() {\n    this.setState({\n      disabled: false\n    });\n  };\n\n  IframeUpload.prototype.onDrop = function onDrop(e) {\n    e.preventDefault();\n    this.setState({\n      dragOver: false\n    });\n    this.uploadFiles(e.dataTransfer.files); // TODO\n  };\n\n  IframeUpload.prototype.handleChange = function handleChange(e) {\n    if (e.target instanceof HTMLInputElement) {\n      var file = e.target.files[0];\n\n      if (file) {\n        this.uploadFiles(file);\n      }\n    }\n  };\n\n  IframeUpload.prototype.uploadFiles = function uploadFiles(file) {\n    if (this.state.disabled) return;\n    this.setState({\n      disabled: false,\n      file: file\n    });\n    this.props.onStart && this.props.onStart(file);\n    var formNode = this.refs.form;\n    var dataSpan = this.refs.data;\n    var data = this.props.data;\n\n    if (typeof data === 'function') {\n      data = data(file);\n    }\n\n    var inputs = Object.keys(data).map(function (key) {\n      return '<input name=\"' + key + '\" value=\"' + data[key] + '\"/>';\n    });\n    dataSpan.innerHTML = inputs.join('');\n    formNode.submit();\n    dataSpan.innerHTML = '';\n  };\n\n  IframeUpload.prototype.handleClick = function handleClick() {\n    if (!this.state.disabled) {\n      this.refs.input.click();\n    }\n  };\n\n  IframeUpload.prototype.handleDragover = function handleDragover(e) {\n    e.preventDefault();\n    this.setState({\n      onDrop: true\n    });\n  };\n\n  IframeUpload.prototype.handleDragleave = function handleDragleave(e) {\n    e.preventDefault();\n    this.setState({\n      onDrop: false\n    });\n  };\n\n  IframeUpload.prototype.render = function render() {\n    var _classNames,\n        _this2 = this;\n\n    var _props2 = this.props,\n        drag = _props2.drag,\n        action = _props2.action,\n        name = _props2.name,\n        accept = _props2.accept,\n        listType = _props2.listType;\n    var frameName = this.state.frameName;\n    var classes = this.classNames((_classNames = {\n      'el-upload': true\n    }, _classNames['el-upload--' + listType] = true, _classNames));\n    return React.createElement('div', {\n      className: classes,\n      onClick: function onClick() {\n        return _this2.handleClick();\n      },\n      onDrop: function onDrop(e) {\n        return _this2.onDrop(e);\n      },\n      onDragOver: function onDragOver(e) {\n        return _this2.handleDragover(e);\n      },\n      onDragLeave: function onDragLeave(e) {\n        return _this2.handleDragleave(e);\n      }\n    }, React.createElement('iframe', {\n      onLoad: function onLoad() {\n        return _this2.onload();\n      },\n      ref: 'iframe',\n      name: frameName\n    }), React.createElement('form', {\n      ref: 'form',\n      action: action,\n      target: frameName,\n      encType: 'multipart/form-data',\n      method: 'POST'\n    }, React.createElement('input', {\n      className: 'el-upload__input',\n      type: 'file',\n      ref: 'input',\n      name: name,\n      onChange: function onChange(e) {\n        return _this2.handleChange(e);\n      },\n      accept: accept\n    }), React.createElement('input', {\n      type: 'hidden',\n      name: 'documentDomain',\n      value: document.domain\n    }), React.createElement('span', {\n      ref: 'data'\n    })), drag ? React.createElement(Cover, {\n      onFile: function onFile(file) {\n        return _this2.uploadFiles(file);\n      }\n    }, this.props.children) : this.props.children);\n  };\n\n  return IframeUpload;\n}(Component);\n\nIframeUpload.defaultProps = {\n  name: 'file'\n};\nexport default IframeUpload;\nIframeUpload.propTypes = {\n  drag: PropTypes.bool,\n  data: PropTypes.object,\n  action: PropTypes.string.isRequired,\n  name: PropTypes.string,\n  accept: PropTypes.string,\n  onStart: PropTypes.func,\n  onSuccess: PropTypes.func,\n  onError: PropTypes.func,\n  listType: PropTypes.string\n};","map":null,"metadata":{},"sourceType":"module"}