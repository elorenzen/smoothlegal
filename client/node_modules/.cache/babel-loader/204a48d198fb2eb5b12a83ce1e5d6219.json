{"ast":null,"code":"import { formatDate, parseDate, getWeekNumber, getDateOfISOWeek, deconstructDate } from './utils';\nexport var RANGE_SEPARATOR = ' - ';\nexport var DEFAULT_FORMATS = {\n  date: 'yyyy-MM-dd',\n  month: 'yyyy-MM',\n  year: 'yyyy',\n  datetime: 'yyyy-MM-dd HH:mm:ss',\n  week: 'yyyywWW',\n  time: 'HH:mm:ss',\n  timerange: 'HH:mm:ss',\n  timeselect: 'HH:mm',\n  daterange: 'yyyy-MM-dd',\n  datetimerange: 'yyyy-MM-dd HH:mm:ss'\n};\nexport var HAVE_TRIGGER_TYPES = ['date', 'datetime', 'time', 'timeselect', 'week', 'month', 'year', 'daterange', 'timerange', 'datetimerange'];\nexport var DATE_FORMATTER = function DATE_FORMATTER(value, format) {\n  return formatDate(value, format);\n};\nexport var DATE_PARSER = function DATE_PARSER(text, format) {\n  return parseDate(text, format);\n};\nexport var RANGE_FORMATTER = function RANGE_FORMATTER(value, format) {\n  var separator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : RANGE_SEPARATOR;\n\n  if (Array.isArray(value) && value.length === 2) {\n    var start = value[0];\n    var end = value[1];\n\n    if (start && end) {\n      return formatDate(start, format) + separator + formatDate(end, format);\n    }\n  }\n\n  return '';\n};\nexport var RANGE_PARSER = function RANGE_PARSER(text, format) {\n  var separator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : RANGE_SEPARATOR;\n  var array = text.split(separator);\n\n  if (array.length === 2) {\n    var range1 = array[0];\n    var range2 = array[1];\n    return [parseDate(range1, format), parseDate(range2, format)];\n  }\n\n  return [];\n};\nexport var TYPE_VALUE_RESOLVER_MAP = {\n  default: {\n    formatter: function formatter(value) {\n      if (!value) return '';\n      return '' + value;\n    },\n    parser: function parser(text) {\n      if (text === undefined || text === '') return null;\n      return text;\n    }\n  },\n  week: {\n    formatter: function formatter(value, format) {\n      if (value instanceof Date) {\n        if (!format) {\n          var weekNumber = getWeekNumber(value);\n          return value.getFullYear() + 'w' + (weekNumber > 9 ? weekNumber : '0' + weekNumber);\n        } else {\n          var str = DATE_FORMATTER(value, format);\n\n          if (str != '') {\n            var weekno = deconstructDate(value).week;\n            str = /WW/.test(str) ? str.replace(/WW/, weekno < 10 ? '0' + weekno : weekno) : str.replace(/W/, weekno);\n          }\n\n          return str;\n        }\n      }\n\n      return '';\n    },\n    parser: function parser(text, format) {\n      var weekno = function weekno(matcher, src) {\n        var str = src.substr(matcher.index, matcher.length);\n\n        if (/\\d\\d?/.test(str)) {\n          return {\n            week: Number(str),\n            isValid: true\n          };\n        } else {\n          return {\n            week: -1,\n            isValid: false\n          };\n        }\n      };\n\n      var date = DATE_PARSER(text, format);\n      var matcher = format.match(/(WW?)/);\n      var wn = null;\n      if (!matcher) return date;else {\n        if (text.length > format.length) return '';\n\n        switch (matcher.length) {\n          case 1:\n            wn = weekno(matcher, text);\n            if (!wn.isValid) return '';\n            break;\n\n          case 2:\n            wn = weekno(matcher, text);\n            if (!wn.isValid) return '';\n            break;\n\n          default:\n            throw new Error('never reach here');\n        }\n\n        return getDateOfISOWeek(wn.week, date.getFullYear());\n      }\n    }\n  },\n  date: {\n    formatter: DATE_FORMATTER,\n    parser: DATE_PARSER\n  },\n  datetime: {\n    formatter: DATE_FORMATTER,\n    parser: DATE_PARSER\n  },\n  daterange: {\n    formatter: RANGE_FORMATTER,\n    parser: RANGE_PARSER\n  },\n  datetimerange: {\n    formatter: RANGE_FORMATTER,\n    parser: RANGE_PARSER\n  },\n  timerange: {\n    formatter: RANGE_FORMATTER,\n    parser: RANGE_PARSER\n  },\n  time: {\n    formatter: DATE_FORMATTER,\n    parser: DATE_PARSER\n  },\n  timeselect: {\n    formatter: DATE_FORMATTER,\n    parser: DATE_PARSER\n  },\n  month: {\n    formatter: DATE_FORMATTER,\n    parser: DATE_PARSER\n  },\n  year: {\n    formatter: DATE_FORMATTER,\n    parser: DATE_FORMATTER\n  },\n  number: {\n    formatter: function formatter(value) {\n      if (!value) return '';\n      return '' + value;\n    },\n    parser: function parser(text) {\n      var result = Number(text);\n\n      if (!isNaN(text)) {\n        return result;\n      } else {\n        return null;\n      }\n    }\n  }\n};\nexport var PLACEMENT_MAP = {\n  left: 'bottom-start',\n  // in git version 8de9d2ce, this been changed to \n  // center: 'bottom',\n  // due to it's close relation to popper, I dont have enought confidence to update it right now\n  center: 'bottom-center',\n  right: 'bottom-end'\n};","map":null,"metadata":{},"sourceType":"module"}