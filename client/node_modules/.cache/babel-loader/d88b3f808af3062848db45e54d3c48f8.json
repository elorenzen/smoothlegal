{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Component, PropTypes, View } from '../../libs';\n\nvar CarouselItem = function (_Component) {\n  _inherits(CarouselItem, _Component);\n\n  function CarouselItem(props) {\n    _classCallCheck(this, CarouselItem);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      hover: false,\n      translate: 0,\n      scale: 1,\n      active: false,\n      ready: false,\n      inStage: false,\n      animating: false\n    };\n    return _this;\n  }\n\n  CarouselItem.prototype.componentWillMount = function componentWillMount() {\n    this.parent().addItem(this);\n  };\n\n  CarouselItem.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.parent().removeItem(this);\n  };\n\n  CarouselItem.prototype.processIndex = function processIndex(index, activeIndex, length) {\n    if (activeIndex === 0 && index === length - 1) {\n      return -1;\n    } else if (activeIndex === length - 1 && index === 0) {\n      return length;\n    } else if (index < activeIndex - 1 && activeIndex - index >= length / 2) {\n      return length + 1;\n    } else if (index > activeIndex + 1 && index - activeIndex >= length / 2) {\n      return -2;\n    }\n\n    return index;\n  };\n\n  CarouselItem.prototype.calculateTranslate = function calculateTranslate(index, activeIndex, parentWidth) {\n    var denominator = this.isFlat ? 3 : 4;\n\n    if (this.state.inStage) {\n      return parentWidth * ((2 - this.CARD_SCALE) * (index - activeIndex) + 1) / denominator;\n    } else if (index < activeIndex) {\n      return -(1 + this.CARD_SCALE) * parentWidth / denominator;\n    } else {\n      return (denominator - 1 + this.CARD_SCALE) * parentWidth / denominator;\n    }\n  };\n\n  CarouselItem.prototype.translateItem = function translateItem(index, activeIndex, oldIndex) {\n    var parent = ReactDOM.findDOMNode(this.parent());\n    var parentWidth = parent.offsetWidth;\n    var length = this.parent().state.items.length;\n\n    if (!this.parent().iscard && oldIndex !== undefined) {\n      this.state.animating = index === activeIndex || index === oldIndex;\n    }\n\n    if (index !== activeIndex && length > 2) {\n      index = this.processIndex(index, activeIndex, length);\n    }\n\n    if (this.parent().iscard) {\n      this.state.inStage = Math.round(Math.abs(index - activeIndex)) <= 1;\n      this.state.active = index === activeIndex;\n      this.state.translate = this.calculateTranslate(index, activeIndex, parentWidth);\n      this.state.scale = this.state.active ? 1 : this.CARD_SCALE;\n    } else {\n      this.state.active = index === activeIndex;\n      this.state.translate = parentWidth * (index - activeIndex);\n    }\n\n    this.state.ready = true;\n    this.forceUpdate();\n  };\n\n  CarouselItem.prototype.handleItemClick = function handleItemClick() {\n    if (this.parent().iscard) {\n      var index = this.parent().state.items.indexOf(this);\n      this.parent().setActiveItem(index);\n    }\n  };\n\n  CarouselItem.prototype.parent = function parent() {\n    return this.context.component;\n  };\n\n  CarouselItem.prototype.render = function render() {\n    var _state = this.state,\n        hover = _state.hover,\n        translate = _state.translate,\n        scale = _state.scale,\n        active = _state.active,\n        ready = _state.ready,\n        inStage = _state.inStage,\n        animating = _state.animating;\n    return React.createElement(View, {\n      show: ready\n    }, React.createElement('div', {\n      className: this.className('el-carousel__item', {\n        'is-active': active,\n        'el-carousel__item--card': this.parent().iscard,\n        'is-in-stage': inStage,\n        'is-hover': hover,\n        'is-animating': animating\n      }),\n      onClick: this.handleItemClick.bind(this),\n      style: {\n        msTransform: 'translateX(' + translate + 'px) scale(' + scale + ')',\n        WebkitTransform: 'translateX(' + translate + 'px) scale(' + scale + ')',\n        transform: 'translateX(' + translate + 'px) scale(' + scale + ')'\n      }\n    }, this.parent().iscard && React.createElement(View, {\n      show: !active\n    }, React.createElement('div', {\n      className: 'el-carousel__mask'\n    })), this.props.children));\n  };\n\n  _createClass(CarouselItem, [{\n    key: 'isFlat',\n    get: function get() {\n      return this.parent().props.type === 'flatcard';\n    }\n  }, {\n    key: 'CARD_SCALE',\n    get: function get() {\n      return this.isFlat ? 1 : 0.83;\n    }\n  }, {\n    key: 'calculateWidth',\n    get: function get() {\n      if (this.isFlat) {\n        return parseInt(100 / 3) + '%';\n      }\n    }\n  }]);\n\n  return CarouselItem;\n}(Component);\n\nexport default CarouselItem;\nCarouselItem.contextTypes = {\n  component: PropTypes.any\n};","map":null,"metadata":{},"sourceType":"module"}