{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport AsyncValidator from 'async-validator';\nimport { Component, PropTypes, Transition } from '../../libs';\n\nvar FormItem = function (_Component) {\n  _inherits(FormItem, _Component);\n\n  function FormItem(props) {\n    _classCallCheck(this, FormItem);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      error: '',\n      valid: false,\n      validating: false\n    };\n    return _this;\n  }\n\n  FormItem.prototype.getChildContext = function getChildContext() {\n    return {\n      form: this\n    };\n  };\n\n  FormItem.prototype.componentDidMount = function componentDidMount() {\n    var prop = this.props.prop;\n\n    if (prop) {\n      this.parent().addField(this);\n      this.initialValue = this.getInitialValue();\n    }\n  };\n\n  FormItem.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.parent().removeField(this);\n  };\n\n  FormItem.prototype.parent = function parent() {\n    return this.context.component;\n  };\n\n  FormItem.prototype.isRequired = function isRequired() {\n    var rules = this.getRules();\n    var isRequired = false;\n\n    if (rules && rules.length) {\n      rules.every(function (rule) {\n        if (rule.required) {\n          isRequired = true;\n          return false;\n        }\n\n        return true;\n      });\n    }\n\n    return isRequired;\n  };\n\n  FormItem.prototype.onFieldBlur = function onFieldBlur() {\n    this.validate('blur');\n  };\n\n  FormItem.prototype.onFieldChange = function onFieldChange() {\n    var _this2 = this;\n\n    if (this.validateDisabled) {\n      this.validateDisabled = false;\n      return;\n    }\n\n    setTimeout(function () {\n      _this2.validate('change');\n    });\n  };\n\n  FormItem.prototype.validate = function validate(trigger, cb) {\n    var _descriptor,\n        _model,\n        _this3 = this;\n\n    var rules = this.getFilteredRule(trigger);\n\n    if (!rules || rules.length === 0) {\n      if (cb instanceof Function) {\n        cb();\n      }\n\n      return true;\n    }\n\n    this.setState({\n      validating: true\n    });\n    var descriptor = (_descriptor = {}, _descriptor[this.props.prop] = rules, _descriptor);\n    var validator = new AsyncValidator(descriptor);\n    var model = (_model = {}, _model[this.props.prop] = this.fieldValue(), _model);\n    validator.validate(model, {\n      firstFields: true\n    }, function (errors) {\n      _this3.setState({\n        error: errors ? errors[0].message : '',\n        validating: false,\n        valid: !errors\n      }, function () {\n        if (cb instanceof Function) {\n          cb(errors);\n        }\n      });\n    });\n  };\n\n  FormItem.prototype.getInitialValue = function getInitialValue() {\n    var value = this.parent().props.model[this.props.prop];\n\n    if (value === undefined) {\n      return value;\n    } else {\n      return JSON.parse(JSON.stringify(value));\n    }\n  };\n\n  FormItem.prototype.resetField = function resetField() {\n    var _state = this.state,\n        valid = _state.valid,\n        error = _state.error;\n    valid = true;\n    error = '';\n    this.setState({\n      valid: valid,\n      error: error\n    });\n    var value = this.fieldValue();\n\n    if (Array.isArray(value) && value.length > 0) {\n      this.validateDisabled = true;\n      this.parent().props.model[this.props.prop] = [];\n    } else if (value) {\n      this.validateDisabled = true;\n      this.parent().props.model[this.props.prop] = this.initialValue;\n    }\n  };\n\n  FormItem.prototype.getRules = function getRules() {\n    var formRules = this.parent().props.rules;\n    var selfRuels = this.props.rules;\n    formRules = formRules ? formRules[this.props.prop] : [];\n    return [].concat(selfRuels || formRules || []);\n  };\n\n  FormItem.prototype.getFilteredRule = function getFilteredRule(trigger) {\n    var rules = this.getRules();\n    return rules.filter(function (rule) {\n      if (!rule.trigger || trigger === '') return true;\n\n      if (Array.isArray(rule.trigger)) {\n        return rule.trigger.indexOf(trigger) > -1;\n      } else {\n        return rule.trigger === trigger;\n      }\n    }).map(function (rule) {\n      return Object.assign({}, rule);\n    });\n  };\n\n  FormItem.prototype.labelStyle = function labelStyle() {\n    var ret = {};\n    if (this.parent().props.labelPosition === 'top') return ret;\n    var labelWidth = this.props.labelWidth || this.parent().props.labelWidth;\n\n    if (labelWidth) {\n      ret.width = parseInt(labelWidth);\n    }\n\n    return ret;\n  };\n\n  FormItem.prototype.contentStyle = function contentStyle() {\n    var ret = {};\n    if (this.parent().props.labelPosition === 'top' || this.parent().props.inline) return ret;\n    var labelWidth = this.props.labelWidth || this.parent().props.labelWidth;\n\n    if (labelWidth) {\n      ret.marginLeft = parseInt(labelWidth);\n    }\n\n    return ret;\n  };\n\n  FormItem.prototype.fieldValue = function fieldValue() {\n    var model = this.parent().props.model;\n\n    if (!model || !this.props.prop) {\n      return;\n    }\n\n    var temp = this.props.prop.split(':');\n    return temp.length > 1 ? model[temp[0]][temp[1]] : model[this.props.prop];\n  };\n\n  FormItem.prototype.render = function render() {\n    var _state2 = this.state,\n        error = _state2.error,\n        validating = _state2.validating;\n    var _props = this.props,\n        label = _props.label,\n        required = _props.required;\n    return React.createElement('div', {\n      style: this.style(),\n      className: this.className('el-form-item', {\n        'is-error': error !== '',\n        'is-validating': validating,\n        'is-required': this.isRequired() || required\n      }),\n      onBlur: this.onFieldBlur.bind(this),\n      onChange: this.onFieldChange.bind(this)\n    }, label && React.createElement('label', {\n      className: 'el-form-item__label',\n      style: this.labelStyle()\n    }, typeof label === 'string' ? label + this.parent().props.labelSuffix : label), React.createElement('div', {\n      className: 'el-form-item__content',\n      style: this.contentStyle()\n    }, this.props.children, React.createElement(Transition, {\n      name: 'el-zoom-in-top'\n    }, error && React.createElement('div', {\n      className: 'el-form-item__error'\n    }, error))));\n  };\n\n  return FormItem;\n}(Component);\n\nexport default FormItem;\nFormItem.contextTypes = {\n  component: PropTypes.any\n};\nFormItem.childContextTypes = {\n  form: PropTypes.any\n};\nFormItem.propTypes = {\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  labelWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  prop: PropTypes.string,\n  required: PropTypes.bool,\n  rules: PropTypes.oneOfType([PropTypes.object, PropTypes.array])\n};","map":null,"metadata":{},"sourceType":"module"}