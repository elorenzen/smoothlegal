{"ast":null,"code":"import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport { Component, PropTypes } from '../../libs';\nimport { getRowIdentity, getValueByPath } from \"./utils\"; // import {toDate} from \"../date-picker/utils/index\";\n\nimport Checkbox from '../checkbox';\nimport Tag from '../tag';\n\nvar TableBody = function (_Component) {\n  _inherits(TableBody, _Component);\n\n  function TableBody(props) {\n    _classCallCheck(this, TableBody);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    ['handleMouseLeave'].forEach(function (fn) {\n      _this[fn] = _this[fn].bind(_this);\n    });\n    return _this;\n  }\n\n  TableBody.prototype.handleMouseEnter = function handleMouseEnter(index) {\n    this.context.tableStore.setHoverRow(index);\n  };\n\n  TableBody.prototype.handleMouseLeave = function handleMouseLeave() {\n    this.context.tableStore.setHoverRow(null);\n  };\n\n  TableBody.prototype.handleCellMouseEnter = function handleCellMouseEnter(row, column, event) {\n    this.dispatchEvent('onCellMouseEnter', row, column, event.currentTarget, event);\n  };\n\n  TableBody.prototype.handleCellMouseLeave = function handleCellMouseLeave(row, column, event) {\n    this.dispatchEvent('onCellMouseLeave', row, column, event.currentTarget, event);\n  };\n\n  TableBody.prototype.handleCellClick = function handleCellClick(row, column, event) {\n    this.dispatchEvent('onCellClick', row, column, event.currentTarget, event);\n    this.dispatchEvent('onRowClick', row, event, column);\n  };\n\n  TableBody.prototype.handleCellDbClick = function handleCellDbClick(row, column, event) {\n    this.dispatchEvent('onCellDbClick', row, column, event.currentTarget, event);\n    this.dispatchEvent('onRowDbClick', row, column);\n  };\n\n  TableBody.prototype.handleRowContextMenu = function handleRowContextMenu(row, event) {\n    this.dispatchEvent('onRowContextMenu', row, event);\n  };\n\n  TableBody.prototype.dispatchEvent = function dispatchEvent(name) {\n    var fn = this.props[name];\n\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    fn && fn.apply(undefined, args);\n  };\n\n  TableBody.prototype.isColumnHidden = function isColumnHidden(index) {\n    var _props = this.props,\n        tableStoreState = _props.tableStoreState,\n        layout = _props.layout,\n        props = _objectWithoutProperties(_props, ['tableStoreState', 'layout']);\n\n    if (props.fixed === true || props.fixed === 'left') {\n      return index >= this.leftFixedCount;\n    } else if (props.fixed === 'right') {\n      return index < this.columnsCount - this.rightFixedCount;\n    } else {\n      return index < this.leftFixedCount || index >= this.columnsCount - this.rightFixedCount;\n    }\n  };\n\n  TableBody.prototype.getRowStyle = function getRowStyle(row, index) {\n    var rowStyle = this.props.rowStyle;\n\n    if (typeof rowStyle === 'function') {\n      return rowStyle.call(null, row, index);\n    }\n\n    return rowStyle;\n  };\n\n  TableBody.prototype.getKeyOfRow = function getKeyOfRow(row, index) {\n    var rowKey = this.props.rowKey;\n\n    if (rowKey) {\n      return getRowIdentity(row, rowKey);\n    }\n\n    return index;\n  }; // getRowClass(row, index) {\n  //   const { rowClassName, stripe } = this.props;\n  //\n  // }\n\n\n  TableBody.prototype.handleExpandClick = function handleExpandClick(row, rowKey) {\n    this.context.tableStore.toggleRowExpanded(row, rowKey);\n  };\n\n  TableBody.prototype.handleClick = function handleClick(row) {\n    this.context.tableStore.setCurrentRow(row);\n  };\n\n  TableBody.prototype.renderCell = function renderCell(row, column, index, rowKey) {\n    var _this2 = this;\n\n    var type = column.type,\n        selectable = column.selectable;\n\n    if (type === 'expand') {\n      return React.createElement('div', {\n        className: this.classNames('el-table__expand-icon ', {\n          'el-table__expand-icon--expanded': this.context.tableStore.isRowExpanding(row, rowKey)\n        }),\n        onClick: this.handleExpandClick.bind(this, row, rowKey)\n      }, React.createElement('i', {\n        className: 'el-icon el-icon-arrow-right'\n      }));\n    }\n\n    if (type === 'index') {\n      return React.createElement('div', null, index + 1);\n    }\n\n    if (type === 'selection') {\n      var isSelected = this.context.tableStore.isRowSelected(row, rowKey);\n      return React.createElement(Checkbox, {\n        checked: isSelected,\n        disabled: selectable && !selectable(row, index),\n        onChange: function onChange() {\n          _this2.context.tableStore.toggleRowSelection(row, !isSelected);\n        }\n      });\n    }\n\n    return column.render(row, column, index);\n  };\n\n  TableBody.prototype.render = function render() {\n    var _this3 = this;\n\n    var _props2 = this.props,\n        tableStoreState = _props2.tableStoreState,\n        layout = _props2.layout,\n        props = _objectWithoutProperties(_props2, ['tableStoreState', 'layout']);\n\n    var columnsHidden = tableStoreState.columns.map(function (column, index) {\n      return _this3.isColumnHidden(index);\n    });\n    return React.createElement('table', {\n      className: 'el-table__body',\n      cellPadding: 0,\n      cellSpacing: 0,\n      style: this.style({\n        borderSpacing: 0,\n        border: 0\n      })\n    }, React.createElement('colgroup', null, tableStoreState.columns.map(function (column, index) {\n      return React.createElement('col', {\n        width: column.realWidth,\n        style: {\n          width: column.realWidth\n        },\n        key: index\n      });\n    })), React.createElement('tbody', null, tableStoreState.data.map(function (row, rowIndex) {\n      var rowKey = _this3.getKeyOfRow(row, rowIndex);\n\n      return [React.createElement('tr', {\n        key: rowKey,\n        style: _this3.getRowStyle(row, rowIndex),\n        className: _this3.className('el-table__row', {\n          'el-table__row--striped': props.stripe && rowIndex % 2 === 1,\n          'hover-row': tableStoreState.hoverRow === rowIndex,\n          'current-row': props.highlightCurrentRow && (props.currentRowKey === rowKey || tableStoreState.currentRow === row)\n        }, typeof props.rowClassName === 'string' ? props.rowClassName : typeof props.rowClassName === 'function' && props.rowClassName(row, rowIndex)),\n        onMouseEnter: _this3.handleMouseEnter.bind(_this3, rowIndex),\n        onMouseLeave: _this3.handleMouseLeave,\n        onClick: _this3.handleClick.bind(_this3, row),\n        onContextMenu: _this3.handleRowContextMenu.bind(_this3, row)\n      }, tableStoreState.columns.map(function (column, cellIndex) {\n        return React.createElement('td', {\n          key: cellIndex,\n          className: _this3.classNames(column.className, column.align, column.columnKey, {\n            'is-hidden': columnsHidden[cellIndex]\n          }),\n          onMouseEnter: _this3.handleCellMouseEnter.bind(_this3, row, column),\n          onMouseLeave: _this3.handleCellMouseLeave.bind(_this3, row, column),\n          onClick: _this3.handleCellClick.bind(_this3, row, column),\n          onDoubleClick: _this3.handleCellDbClick.bind(_this3, row, column)\n        }, React.createElement('div', {\n          className: 'cell'\n        }, _this3.renderCell(row, column, rowIndex, rowKey)));\n      }), !props.fixed && layout.scrollY && !!layout.gutterWidth && React.createElement('td', {\n        className: 'gutter'\n      })), _this3.context.tableStore.isRowExpanding(row, rowKey) && React.createElement('tr', {\n        key: rowKey + 'Expanded'\n      }, React.createElement('td', {\n        colSpan: tableStoreState.columns.length,\n        className: 'el-table__expanded-cell'\n      }, typeof props.renderExpanded === 'function' && props.renderExpanded(row, rowIndex)))];\n    })));\n  };\n\n  _createClass(TableBody, [{\n    key: 'columnsCount',\n    get: function get() {\n      return this.props.tableStoreState.columns.length;\n    }\n  }, {\n    key: 'leftFixedCount',\n    get: function get() {\n      return this.props.tableStoreState.fixedColumns.length;\n    }\n  }, {\n    key: 'rightFixedCount',\n    get: function get() {\n      return this.props.tableStoreState.rightFixedColumns.length;\n    }\n  }]);\n\n  return TableBody;\n}(Component);\n\nTableBody.contextTypes = {\n  tableStore: PropTypes.any,\n  layout: PropTypes.any\n};\nexport default TableBody;","map":null,"metadata":{},"sourceType":"module"}